
LoRa_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08008c98  08008c98  00009c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000210  080092f8  080092f8  0000a2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000290  08009508  08009508  0000a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009798  08009798  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  0000a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080097a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d8  08009978  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08009978  0000b488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecde  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da5  00000000  00000000  00019ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b91  00000000  00000000  0001cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027a5  00000000  00000000  0001d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010444  00000000  00000000  0001fe6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31cc  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010347e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  001034c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00108874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c7c 	.word	0x08008c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008c7c 	.word	0x08008c7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f001 b8f6 	b.w	8001dec <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <selfrel_offset31>:
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	005a      	lsls	r2, r3, #1
 8000ed8:	bf4c      	ite	mi
 8000eda:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000ede:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000ee2:	4418      	add	r0, r3
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <search_EIT_table>:
 8000ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b349      	cbz	r1, 8000f42 <search_EIT_table+0x5a>
 8000eee:	1e4f      	subs	r7, r1, #1
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	4615      	mov	r5, r2
 8000ef4:	463e      	mov	r6, r7
 8000ef6:	f04f 0900 	mov.w	r9, #0
 8000efa:	eb09 0106 	add.w	r1, r9, r6
 8000efe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000f02:	1049      	asrs	r1, r1, #1
 8000f04:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000f08:	4640      	mov	r0, r8
 8000f0a:	f7ff ffe3 	bl	8000ed4 <selfrel_offset31>
 8000f0e:	428f      	cmp	r7, r1
 8000f10:	4603      	mov	r3, r0
 8000f12:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000f16:	d00f      	beq.n	8000f38 <search_EIT_table+0x50>
 8000f18:	3008      	adds	r0, #8
 8000f1a:	42ab      	cmp	r3, r5
 8000f1c:	4420      	add	r0, r4
 8000f1e:	d807      	bhi.n	8000f30 <search_EIT_table+0x48>
 8000f20:	f7ff ffd8 	bl	8000ed4 <selfrel_offset31>
 8000f24:	3801      	subs	r0, #1
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	d208      	bcs.n	8000f3c <search_EIT_table+0x54>
 8000f2a:	f101 0901 	add.w	r9, r1, #1
 8000f2e:	e7e4      	b.n	8000efa <search_EIT_table+0x12>
 8000f30:	4589      	cmp	r9, r1
 8000f32:	d006      	beq.n	8000f42 <search_EIT_table+0x5a>
 8000f34:	1e4e      	subs	r6, r1, #1
 8000f36:	e7e0      	b.n	8000efa <search_EIT_table+0x12>
 8000f38:	42ab      	cmp	r3, r5
 8000f3a:	d8f9      	bhi.n	8000f30 <search_EIT_table+0x48>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f42:	f04f 0800 	mov.w	r8, #0
 8000f46:	4640      	mov	r0, r8
 8000f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000f4c <__gnu_unwind_get_pr_addr>:
 8000f4c:	2801      	cmp	r0, #1
 8000f4e:	d007      	beq.n	8000f60 <__gnu_unwind_get_pr_addr+0x14>
 8000f50:	2802      	cmp	r0, #2
 8000f52:	d007      	beq.n	8000f64 <__gnu_unwind_get_pr_addr+0x18>
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__gnu_unwind_get_pr_addr+0x1c>)
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	4618      	moveq	r0, r3
 8000f5c:	2000      	movne	r0, #0
 8000f5e:	4770      	bx	lr
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <__gnu_unwind_get_pr_addr+0x20>)
 8000f62:	4770      	bx	lr
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <__gnu_unwind_get_pr_addr+0x24>)
 8000f66:	4770      	bx	lr
 8000f68:	08001615 	.word	0x08001615
 8000f6c:	08001619 	.word	0x08001619
 8000f70:	0800161d 	.word	0x0800161d

08000f74 <get_eit_entry>:
 8000f74:	b530      	push	{r4, r5, lr}
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <get_eit_entry+0x88>)
 8000f78:	b083      	sub	sp, #12
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	1e8d      	subs	r5, r1, #2
 8000f7e:	b31b      	cbz	r3, 8000fc8 <get_eit_entry+0x54>
 8000f80:	a901      	add	r1, sp, #4
 8000f82:	4628      	mov	r0, r5
 8000f84:	f3af 8000 	nop.w
 8000f88:	b388      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000f8a:	9901      	ldr	r1, [sp, #4]
 8000f8c:	462a      	mov	r2, r5
 8000f8e:	f7ff ffab 	bl	8000ee8 <search_EIT_table>
 8000f92:	4601      	mov	r1, r0
 8000f94:	b358      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000f96:	f7ff ff9d 	bl	8000ed4 <selfrel_offset31>
 8000f9a:	684b      	ldr	r3, [r1, #4]
 8000f9c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d028      	beq.n	8000ff4 <get_eit_entry+0x80>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f101 0004 	add.w	r0, r1, #4
 8000fa8:	db1f      	blt.n	8000fea <get_eit_entry+0x76>
 8000faa:	f7ff ff93 	bl	8000ed4 <selfrel_offset31>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6523      	str	r3, [r4, #80]	@ 0x50
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0d      	blt.n	8000fd6 <get_eit_entry+0x62>
 8000fba:	f7ff ff8b 	bl	8000ed4 <selfrel_offset31>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	6123      	str	r3, [r4, #16]
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <get_eit_entry+0x8c>)
 8000fca:	490e      	ldr	r1, [pc, #56]	@ (8001004 <get_eit_entry+0x90>)
 8000fcc:	1ac9      	subs	r1, r1, r3
 8000fce:	10c9      	asrs	r1, r1, #3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	9101      	str	r1, [sp, #4]
 8000fd4:	e7da      	b.n	8000f8c <get_eit_entry+0x18>
 8000fd6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000fda:	f7ff ffb7 	bl	8000f4c <__gnu_unwind_get_pr_addr>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b128      	cbz	r0, 8000fee <get_eit_entry+0x7a>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	6123      	str	r3, [r4, #16]
 8000fe6:	b003      	add	sp, #12
 8000fe8:	bd30      	pop	{r4, r5, pc}
 8000fea:	2301      	movs	r3, #1
 8000fec:	e7e0      	b.n	8000fb0 <get_eit_entry+0x3c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2009      	movs	r0, #9
 8000ff2:	e7e6      	b.n	8000fc2 <get_eit_entry+0x4e>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	e7e3      	b.n	8000fc2 <get_eit_entry+0x4e>
 8000ffa:	bf00      	nop
 8000ffc:	00000000 	.word	0x00000000
 8001000:	08009508 	.word	0x08009508
 8001004:	08009798 	.word	0x08009798

08001008 <restore_non_core_regs>:
 8001008:	6803      	ldr	r3, [r0, #0]
 800100a:	07da      	lsls	r2, r3, #31
 800100c:	b510      	push	{r4, lr}
 800100e:	4604      	mov	r4, r0
 8001010:	d406      	bmi.n	8001020 <restore_non_core_regs+0x18>
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8001018:	d509      	bpl.n	800102e <restore_non_core_regs+0x26>
 800101a:	f000 fc69 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	0759      	lsls	r1, r3, #29
 8001022:	d509      	bpl.n	8001038 <restore_non_core_regs+0x30>
 8001024:	071a      	lsls	r2, r3, #28
 8001026:	d50e      	bpl.n	8001046 <restore_non_core_regs+0x3e>
 8001028:	06db      	lsls	r3, r3, #27
 800102a:	d513      	bpl.n	8001054 <restore_non_core_regs+0x4c>
 800102c:	bd10      	pop	{r4, pc}
 800102e:	f000 fc57 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0759      	lsls	r1, r3, #29
 8001036:	d4f5      	bmi.n	8001024 <restore_non_core_regs+0x1c>
 8001038:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800103c:	f000 fc60 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	071a      	lsls	r2, r3, #28
 8001044:	d4f0      	bmi.n	8001028 <restore_non_core_regs+0x20>
 8001046:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800104a:	f000 fc61 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	06db      	lsls	r3, r3, #27
 8001052:	d4eb      	bmi.n	800102c <restore_non_core_regs+0x24>
 8001054:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8001058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105c:	f000 bc9c 	b.w	8001998 <__gnu_Unwind_Restore_WMMXC>

08001060 <__gnu_unwind_24bit.constprop.0>:
 8001060:	2009      	movs	r0, #9
 8001062:	4770      	bx	lr

08001064 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001064:	4603      	mov	r3, r0
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	b100      	cbz	r0, 800106c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800106a:	4418      	add	r0, r3
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <_Unwind_DebugHook>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <unwind_phase2>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	460e      	mov	r6, r1
 800107a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff ff79 	bl	8000f74 <get_eit_entry>
 8001082:	4605      	mov	r5, r0
 8001084:	b988      	cbnz	r0, 80010aa <unwind_phase2+0x36>
 8001086:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001088:	6162      	str	r2, [r4, #20]
 800108a:	6923      	ldr	r3, [r4, #16]
 800108c:	4632      	mov	r2, r6
 800108e:	4621      	mov	r1, r4
 8001090:	2001      	movs	r0, #1
 8001092:	4798      	blx	r3
 8001094:	2808      	cmp	r0, #8
 8001096:	d0f0      	beq.n	800107a <unwind_phase2+0x6>
 8001098:	2807      	cmp	r0, #7
 800109a:	d106      	bne.n	80010aa <unwind_phase2+0x36>
 800109c:	4628      	mov	r0, r5
 800109e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010a0:	f7ff ffe6 	bl	8001070 <_Unwind_DebugHook>
 80010a4:	1d30      	adds	r0, r6, #4
 80010a6:	f000 fc0f 	bl	80018c8 <__restore_core_regs>
 80010aa:	f005 f91d 	bl	80062e8 <abort>
 80010ae:	bf00      	nop

080010b0 <unwind_phase2_forced>:
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	1d0d      	adds	r5, r1, #4
 80010b6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80010ba:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80010be:	4607      	mov	r7, r0
 80010c0:	4614      	mov	r4, r2
 80010c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80010c8:	f10d 0c0c 	add.w	ip, sp, #12
 80010cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010e0:	ae02      	add	r6, sp, #8
 80010e2:	f04f 0e00 	mov.w	lr, #0
 80010e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010ea:	f8c6 e000 	str.w	lr, [r6]
 80010ee:	e020      	b.n	8001132 <unwind_phase2_forced+0x82>
 80010f0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80010f8:	4631      	mov	r1, r6
 80010fa:	a87a      	add	r0, sp, #488	@ 0x1e8
 80010fc:	f005 ffdd 	bl	80070ba <memcpy>
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8001104:	4639      	mov	r1, r7
 8001106:	4650      	mov	r0, sl
 8001108:	4798      	blx	r3
 800110a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800110c:	6473      	str	r3, [r6, #68]	@ 0x44
 800110e:	4621      	mov	r1, r4
 8001110:	e9cd 6900 	strd	r6, r9, [sp]
 8001114:	4605      	mov	r5, r0
 8001116:	463b      	mov	r3, r7
 8001118:	463a      	mov	r2, r7
 800111a:	2001      	movs	r0, #1
 800111c:	47c0      	blx	r8
 800111e:	4604      	mov	r4, r0
 8001120:	bb18      	cbnz	r0, 800116a <unwind_phase2_forced+0xba>
 8001122:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001126:	a97a      	add	r1, sp, #488	@ 0x1e8
 8001128:	4630      	mov	r0, r6
 800112a:	f005 ffc6 	bl	80070ba <memcpy>
 800112e:	2d08      	cmp	r5, #8
 8001130:	d119      	bne.n	8001166 <unwind_phase2_forced+0xb6>
 8001132:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8001134:	4638      	mov	r0, r7
 8001136:	f7ff ff1d 	bl	8000f74 <get_eit_entry>
 800113a:	3409      	adds	r4, #9
 800113c:	fa5f fa84 	uxtb.w	sl, r4
 8001140:	4605      	mov	r5, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	d0d4      	beq.n	80010f0 <unwind_phase2_forced+0x40>
 8001146:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001148:	6473      	str	r3, [r6, #68]	@ 0x44
 800114a:	463a      	mov	r2, r7
 800114c:	e9cd 6900 	strd	r6, r9, [sp]
 8001150:	463b      	mov	r3, r7
 8001152:	f04a 0110 	orr.w	r1, sl, #16
 8001156:	2001      	movs	r0, #1
 8001158:	47c0      	blx	r8
 800115a:	b930      	cbnz	r0, 800116a <unwind_phase2_forced+0xba>
 800115c:	4628      	mov	r0, r5
 800115e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	2d07      	cmp	r5, #7
 8001168:	d005      	beq.n	8001176 <unwind_phase2_forced+0xc6>
 800116a:	2509      	movs	r5, #9
 800116c:	4628      	mov	r0, r5
 800116e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	4620      	mov	r0, r4
 8001178:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800117a:	f7ff ff79 	bl	8001070 <_Unwind_DebugHook>
 800117e:	a803      	add	r0, sp, #12
 8001180:	f000 fba2 	bl	80018c8 <__restore_core_regs>

08001184 <_Unwind_GetCFA>:
 8001184:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8001186:	4770      	bx	lr

08001188 <__gnu_Unwind_RaiseException>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800118c:	640b      	str	r3, [r1, #64]	@ 0x40
 800118e:	f101 0c04 	add.w	ip, r1, #4
 8001192:	460e      	mov	r6, r1
 8001194:	4605      	mov	r5, r0
 8001196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800119a:	b0f9      	sub	sp, #484	@ 0x1e4
 800119c:	ac01      	add	r4, sp, #4
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80011b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80011b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011b8:	9700      	str	r7, [sp, #0]
 80011ba:	e006      	b.n	80011ca <__gnu_Unwind_RaiseException+0x42>
 80011bc:	692b      	ldr	r3, [r5, #16]
 80011be:	466a      	mov	r2, sp
 80011c0:	4629      	mov	r1, r5
 80011c2:	4798      	blx	r3
 80011c4:	2808      	cmp	r0, #8
 80011c6:	4604      	mov	r4, r0
 80011c8:	d108      	bne.n	80011dc <__gnu_Unwind_RaiseException+0x54>
 80011ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80011cc:	4628      	mov	r0, r5
 80011ce:	f7ff fed1 	bl	8000f74 <get_eit_entry>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d0f2      	beq.n	80011bc <__gnu_Unwind_RaiseException+0x34>
 80011d6:	2009      	movs	r0, #9
 80011d8:	b079      	add	sp, #484	@ 0x1e4
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	4668      	mov	r0, sp
 80011de:	f7ff ff13 	bl	8001008 <restore_non_core_regs>
 80011e2:	2c06      	cmp	r4, #6
 80011e4:	d1f7      	bne.n	80011d6 <__gnu_Unwind_RaiseException+0x4e>
 80011e6:	4631      	mov	r1, r6
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff ff43 	bl	8001074 <unwind_phase2>
 80011ee:	bf00      	nop

080011f0 <__gnu_Unwind_ForcedUnwind>:
 80011f0:	60c1      	str	r1, [r0, #12]
 80011f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80011f4:	6182      	str	r2, [r0, #24]
 80011f6:	6419      	str	r1, [r3, #64]	@ 0x40
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	e758      	b.n	80010b0 <unwind_phase2_forced>
 80011fe:	bf00      	nop

08001200 <__gnu_Unwind_Resume>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	68c6      	ldr	r6, [r0, #12]
 8001204:	6943      	ldr	r3, [r0, #20]
 8001206:	640b      	str	r3, [r1, #64]	@ 0x40
 8001208:	b9ae      	cbnz	r6, 8001236 <__gnu_Unwind_Resume+0x36>
 800120a:	6903      	ldr	r3, [r0, #16]
 800120c:	460a      	mov	r2, r1
 800120e:	4604      	mov	r4, r0
 8001210:	460d      	mov	r5, r1
 8001212:	4601      	mov	r1, r0
 8001214:	2002      	movs	r0, #2
 8001216:	4798      	blx	r3
 8001218:	2807      	cmp	r0, #7
 800121a:	d005      	beq.n	8001228 <__gnu_Unwind_Resume+0x28>
 800121c:	2808      	cmp	r0, #8
 800121e:	d10f      	bne.n	8001240 <__gnu_Unwind_Resume+0x40>
 8001220:	4629      	mov	r1, r5
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff ff26 	bl	8001074 <unwind_phase2>
 8001228:	4630      	mov	r0, r6
 800122a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800122c:	f7ff ff20 	bl	8001070 <_Unwind_DebugHook>
 8001230:	1d28      	adds	r0, r5, #4
 8001232:	f000 fb49 	bl	80018c8 <__restore_core_regs>
 8001236:	2201      	movs	r2, #1
 8001238:	f7ff ff3a 	bl	80010b0 <unwind_phase2_forced>
 800123c:	f005 f854 	bl	80062e8 <abort>
 8001240:	f005 f852 	bl	80062e8 <abort>

08001244 <__gnu_Unwind_Resume_or_Rethrow>:
 8001244:	68c2      	ldr	r2, [r0, #12]
 8001246:	b11a      	cbz	r2, 8001250 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001248:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800124a:	640a      	str	r2, [r1, #64]	@ 0x40
 800124c:	2200      	movs	r2, #0
 800124e:	e72f      	b.n	80010b0 <unwind_phase2_forced>
 8001250:	e79a      	b.n	8001188 <__gnu_Unwind_RaiseException>
 8001252:	bf00      	nop

08001254 <_Unwind_Complete>:
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <_Unwind_DeleteException>:
 8001258:	6883      	ldr	r3, [r0, #8]
 800125a:	4601      	mov	r1, r0
 800125c:	b10b      	cbz	r3, 8001262 <_Unwind_DeleteException+0xa>
 800125e:	2001      	movs	r0, #1
 8001260:	4718      	bx	r3
 8001262:	4770      	bx	lr

08001264 <_Unwind_VRS_Get>:
 8001264:	2901      	cmp	r1, #1
 8001266:	d010      	beq.n	800128a <_Unwind_VRS_Get+0x26>
 8001268:	d809      	bhi.n	800127e <_Unwind_VRS_Get+0x1a>
 800126a:	b983      	cbnz	r3, 800128e <_Unwind_VRS_Get+0x2a>
 800126c:	2a0f      	cmp	r2, #15
 800126e:	d80e      	bhi.n	800128e <_Unwind_VRS_Get+0x2a>
 8001270:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001274:	4618      	mov	r0, r3
 8001276:	6853      	ldr	r3, [r2, #4]
 8001278:	9a00      	ldr	r2, [sp, #0]
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4770      	bx	lr
 800127e:	3903      	subs	r1, #3
 8001280:	2901      	cmp	r1, #1
 8001282:	bf8c      	ite	hi
 8001284:	2002      	movhi	r0, #2
 8001286:	2001      	movls	r0, #1
 8001288:	4770      	bx	lr
 800128a:	4608      	mov	r0, r1
 800128c:	4770      	bx	lr
 800128e:	2002      	movs	r0, #2
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <_Unwind_GetGR>:
 8001294:	b500      	push	{lr}
 8001296:	b085      	sub	sp, #20
 8001298:	460a      	mov	r2, r1
 800129a:	2300      	movs	r3, #0
 800129c:	a903      	add	r1, sp, #12
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff ffdf 	bl	8001264 <_Unwind_VRS_Get>
 80012a6:	9803      	ldr	r0, [sp, #12]
 80012a8:	b005      	add	sp, #20
 80012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ae:	bf00      	nop

080012b0 <_Unwind_VRS_Set>:
 80012b0:	2901      	cmp	r1, #1
 80012b2:	d010      	beq.n	80012d6 <_Unwind_VRS_Set+0x26>
 80012b4:	d809      	bhi.n	80012ca <_Unwind_VRS_Set+0x1a>
 80012b6:	b983      	cbnz	r3, 80012da <_Unwind_VRS_Set+0x2a>
 80012b8:	2a0f      	cmp	r2, #15
 80012ba:	d80e      	bhi.n	80012da <_Unwind_VRS_Set+0x2a>
 80012bc:	9900      	ldr	r1, [sp, #0]
 80012be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	6051      	str	r1, [r2, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	4770      	bx	lr
 80012ca:	3903      	subs	r1, #3
 80012cc:	2901      	cmp	r1, #1
 80012ce:	bf8c      	ite	hi
 80012d0:	2002      	movhi	r0, #2
 80012d2:	2001      	movls	r0, #1
 80012d4:	4770      	bx	lr
 80012d6:	4608      	mov	r0, r1
 80012d8:	4770      	bx	lr
 80012da:	2002      	movs	r0, #2
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <_Unwind_SetGR>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	2300      	movs	r3, #0
 80012e6:	ac03      	add	r4, sp, #12
 80012e8:	9203      	str	r2, [sp, #12]
 80012ea:	9400      	str	r4, [sp, #0]
 80012ec:	460a      	mov	r2, r1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff ffde 	bl	80012b0 <_Unwind_VRS_Set>
 80012f4:	b004      	add	sp, #16
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <__gnu_Unwind_Backtrace>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	f102 0c04 	add.w	ip, r2, #4
 8001302:	4605      	mov	r5, r0
 8001304:	460c      	mov	r4, r1
 8001306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800130a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800130e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800131a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800131e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001322:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001326:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800132a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800132e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001332:	9616      	str	r6, [sp, #88]	@ 0x58
 8001334:	e010      	b.n	8001358 <__gnu_Unwind_Backtrace+0x60>
 8001336:	f7ff ffd3 	bl	80012e0 <_Unwind_SetGR>
 800133a:	4621      	mov	r1, r4
 800133c:	a816      	add	r0, sp, #88	@ 0x58
 800133e:	47a8      	blx	r5
 8001340:	4603      	mov	r3, r0
 8001342:	aa16      	add	r2, sp, #88	@ 0x58
 8001344:	4669      	mov	r1, sp
 8001346:	2008      	movs	r0, #8
 8001348:	b983      	cbnz	r3, 800136c <__gnu_Unwind_Backtrace+0x74>
 800134a:	9b04      	ldr	r3, [sp, #16]
 800134c:	4798      	blx	r3
 800134e:	2805      	cmp	r0, #5
 8001350:	4606      	mov	r6, r0
 8001352:	d00c      	beq.n	800136e <__gnu_Unwind_Backtrace+0x76>
 8001354:	2809      	cmp	r0, #9
 8001356:	d009      	beq.n	800136c <__gnu_Unwind_Backtrace+0x74>
 8001358:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800135a:	4668      	mov	r0, sp
 800135c:	f7ff fe0a 	bl	8000f74 <get_eit_entry>
 8001360:	4603      	mov	r3, r0
 8001362:	466a      	mov	r2, sp
 8001364:	210c      	movs	r1, #12
 8001366:	a816      	add	r0, sp, #88	@ 0x58
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0e4      	beq.n	8001336 <__gnu_Unwind_Backtrace+0x3e>
 800136c:	2609      	movs	r6, #9
 800136e:	a816      	add	r0, sp, #88	@ 0x58
 8001370:	f7ff fe4a 	bl	8001008 <restore_non_core_regs>
 8001374:	4630      	mov	r0, r6
 8001376:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800137a:	bd70      	pop	{r4, r5, r6, pc}

0800137c <__gnu_unwind_pr_common>:
 800137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001380:	4693      	mov	fp, r2
 8001382:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001384:	b089      	sub	sp, #36	@ 0x24
 8001386:	460d      	mov	r5, r1
 8001388:	f852 1b04 	ldr.w	r1, [r2], #4
 800138c:	9206      	str	r2, [sp, #24]
 800138e:	f000 0c03 	and.w	ip, r0, #3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d079      	beq.n	800148a <__gnu_unwind_pr_common+0x10e>
 8001396:	0c0c      	lsrs	r4, r1, #16
 8001398:	f88d 401d 	strb.w	r4, [sp, #29]
 800139c:	0409      	lsls	r1, r1, #16
 800139e:	b2e4      	uxtb	r4, r4
 80013a0:	9105      	str	r1, [sp, #20]
 80013a2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80013a6:	2102      	movs	r1, #2
 80013a8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80013aa:	f88d 101c 	strb.w	r1, [sp, #28]
 80013ae:	f1bc 0f02 	cmp.w	ip, #2
 80013b2:	bf08      	it	eq
 80013b4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80013b6:	f017 0701 	ands.w	r7, r7, #1
 80013ba:	d00c      	beq.n	80013d6 <__gnu_unwind_pr_common+0x5a>
 80013bc:	a905      	add	r1, sp, #20
 80013be:	4658      	mov	r0, fp
 80013c0:	f000 fb84 	bl	8001acc <__gnu_unwind_execute>
 80013c4:	b918      	cbnz	r0, 80013ce <__gnu_unwind_pr_common+0x52>
 80013c6:	2008      	movs	r0, #8
 80013c8:	b009      	add	sp, #36	@ 0x24
 80013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ce:	2009      	movs	r0, #9
 80013d0:	b009      	add	sp, #36	@ 0x24
 80013d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d6:	6816      	ldr	r6, [r2, #0]
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d0ef      	beq.n	80013bc <__gnu_unwind_pr_common+0x40>
 80013dc:	f000 0108 	and.w	r1, r0, #8
 80013e0:	9101      	str	r1, [sp, #4]
 80013e2:	46b2      	mov	sl, r6
 80013e4:	9702      	str	r7, [sp, #8]
 80013e6:	4664      	mov	r4, ip
 80013e8:	4699      	mov	r9, r3
 80013ea:	f1b9 0f02 	cmp.w	r9, #2
 80013ee:	d048      	beq.n	8001482 <__gnu_unwind_pr_common+0x106>
 80013f0:	f8b2 a000 	ldrh.w	sl, [r2]
 80013f4:	8856      	ldrh	r6, [r2, #2]
 80013f6:	f102 0804 	add.w	r8, r2, #4
 80013fa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 80013fc:	f026 0301 	bic.w	r3, r6, #1
 8001400:	210f      	movs	r1, #15
 8001402:	4658      	mov	r0, fp
 8001404:	189f      	adds	r7, r3, r2
 8001406:	f7ff ff45 	bl	8001294 <_Unwind_GetGR>
 800140a:	4287      	cmp	r7, r0
 800140c:	d837      	bhi.n	800147e <__gnu_unwind_pr_common+0x102>
 800140e:	f02a 0201 	bic.w	r2, sl, #1
 8001412:	443a      	add	r2, r7
 8001414:	4282      	cmp	r2, r0
 8001416:	bf94      	ite	ls
 8001418:	2200      	movls	r2, #0
 800141a:	2201      	movhi	r2, #1
 800141c:	0073      	lsls	r3, r6, #1
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	f00a 0a01 	and.w	sl, sl, #1
 8001426:	ea43 030a 	orr.w	r3, r3, sl
 800142a:	2b01      	cmp	r3, #1
 800142c:	d047      	beq.n	80014be <__gnu_unwind_pr_common+0x142>
 800142e:	2b02      	cmp	r3, #2
 8001430:	d031      	beq.n	8001496 <__gnu_unwind_pr_common+0x11a>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1cb      	bne.n	80013ce <__gnu_unwind_pr_common+0x52>
 8001436:	b114      	cbz	r4, 800143e <__gnu_unwind_pr_common+0xc2>
 8001438:	2a00      	cmp	r2, #0
 800143a:	f040 80c9 	bne.w	80015d0 <__gnu_unwind_pr_common+0x254>
 800143e:	f108 0204 	add.w	r2, r8, #4
 8001442:	f8d2 a000 	ldr.w	sl, [r2]
 8001446:	f1ba 0f00 	cmp.w	sl, #0
 800144a:	d1ce      	bne.n	80013ea <__gnu_unwind_pr_common+0x6e>
 800144c:	a905      	add	r1, sp, #20
 800144e:	4658      	mov	r0, fp
 8001450:	9f02      	ldr	r7, [sp, #8]
 8001452:	f000 fb3b 	bl	8001acc <__gnu_unwind_execute>
 8001456:	2800      	cmp	r0, #0
 8001458:	d1b9      	bne.n	80013ce <__gnu_unwind_pr_common+0x52>
 800145a:	2f00      	cmp	r7, #0
 800145c:	d0b3      	beq.n	80013c6 <__gnu_unwind_pr_common+0x4a>
 800145e:	210f      	movs	r1, #15
 8001460:	4658      	mov	r0, fp
 8001462:	f7ff ff17 	bl	8001294 <_Unwind_GetGR>
 8001466:	210e      	movs	r1, #14
 8001468:	4602      	mov	r2, r0
 800146a:	4658      	mov	r0, fp
 800146c:	f7ff ff38 	bl	80012e0 <_Unwind_SetGR>
 8001470:	4a67      	ldr	r2, [pc, #412]	@ (8001610 <__gnu_unwind_pr_common+0x294>)
 8001472:	210f      	movs	r1, #15
 8001474:	4658      	mov	r0, fp
 8001476:	f7ff ff33 	bl	80012e0 <_Unwind_SetGR>
 800147a:	2007      	movs	r0, #7
 800147c:	e7a8      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 800147e:	2200      	movs	r2, #0
 8001480:	e7cc      	b.n	800141c <__gnu_unwind_pr_common+0xa0>
 8001482:	6856      	ldr	r6, [r2, #4]
 8001484:	f102 0808 	add.w	r8, r2, #8
 8001488:	e7b7      	b.n	80013fa <__gnu_unwind_pr_common+0x7e>
 800148a:	0209      	lsls	r1, r1, #8
 800148c:	9105      	str	r1, [sp, #20]
 800148e:	f88d 301d 	strb.w	r3, [sp, #29]
 8001492:	2103      	movs	r1, #3
 8001494:	e788      	b.n	80013a8 <__gnu_unwind_pr_common+0x2c>
 8001496:	f8d8 6000 	ldr.w	r6, [r8]
 800149a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d144      	bne.n	800152c <__gnu_unwind_pr_common+0x1b0>
 80014a2:	b122      	cbz	r2, 80014ae <__gnu_unwind_pr_common+0x132>
 80014a4:	9a01      	ldr	r2, [sp, #4]
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d05a      	beq.n	8001560 <__gnu_unwind_pr_common+0x1e4>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d058      	beq.n	8001560 <__gnu_unwind_pr_common+0x1e4>
 80014ae:	2e00      	cmp	r6, #0
 80014b0:	da01      	bge.n	80014b6 <__gnu_unwind_pr_common+0x13a>
 80014b2:	f108 0804 	add.w	r8, r8, #4
 80014b6:	3301      	adds	r3, #1
 80014b8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 80014bc:	e7c1      	b.n	8001442 <__gnu_unwind_pr_common+0xc6>
 80014be:	b9ec      	cbnz	r4, 80014fc <__gnu_unwind_pr_common+0x180>
 80014c0:	b1ca      	cbz	r2, 80014f6 <__gnu_unwind_pr_common+0x17a>
 80014c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80014c6:	f8d8 2000 	ldr.w	r2, [r8]
 80014ca:	1c99      	adds	r1, r3, #2
 80014cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80014d0:	f43f af7d 	beq.w	80013ce <__gnu_unwind_pr_common+0x52>
 80014d4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80014d8:	3301      	adds	r3, #1
 80014da:	9104      	str	r1, [sp, #16]
 80014dc:	f000 808b 	beq.w	80015f6 <__gnu_unwind_pr_common+0x27a>
 80014e0:	f108 0004 	add.w	r0, r8, #4
 80014e4:	f7ff fdbe 	bl	8001064 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80014e8:	ab04      	add	r3, sp, #16
 80014ea:	4601      	mov	r1, r0
 80014ec:	4628      	mov	r0, r5
 80014ee:	f3af 8000 	nop.w
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d157      	bne.n	80015a6 <__gnu_unwind_pr_common+0x22a>
 80014f6:	f108 0208 	add.w	r2, r8, #8
 80014fa:	e7a2      	b.n	8001442 <__gnu_unwind_pr_common+0xc6>
 80014fc:	210d      	movs	r1, #13
 80014fe:	4658      	mov	r0, fp
 8001500:	f7ff fec8 	bl	8001294 <_Unwind_GetGR>
 8001504:	6a2b      	ldr	r3, [r5, #32]
 8001506:	4283      	cmp	r3, r0
 8001508:	d1f5      	bne.n	80014f6 <__gnu_unwind_pr_common+0x17a>
 800150a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800150c:	4598      	cmp	r8, r3
 800150e:	d1f2      	bne.n	80014f6 <__gnu_unwind_pr_common+0x17a>
 8001510:	4640      	mov	r0, r8
 8001512:	f7ff fcdf 	bl	8000ed4 <selfrel_offset31>
 8001516:	210f      	movs	r1, #15
 8001518:	4602      	mov	r2, r0
 800151a:	4658      	mov	r0, fp
 800151c:	f7ff fee0 	bl	80012e0 <_Unwind_SetGR>
 8001520:	462a      	mov	r2, r5
 8001522:	2100      	movs	r1, #0
 8001524:	4658      	mov	r0, fp
 8001526:	f7ff fedb 	bl	80012e0 <_Unwind_SetGR>
 800152a:	e7a6      	b.n	800147a <__gnu_unwind_pr_common+0xfe>
 800152c:	210d      	movs	r1, #13
 800152e:	4658      	mov	r0, fp
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	f7ff feaf 	bl	8001294 <_Unwind_GetGR>
 8001536:	6a2a      	ldr	r2, [r5, #32]
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	4282      	cmp	r2, r0
 800153c:	d1b7      	bne.n	80014ae <__gnu_unwind_pr_common+0x132>
 800153e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001540:	4590      	cmp	r8, r2
 8001542:	d1b4      	bne.n	80014ae <__gnu_unwind_pr_common+0x132>
 8001544:	2700      	movs	r7, #0
 8001546:	2204      	movs	r2, #4
 8001548:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 800154c:	4442      	add	r2, r8
 800154e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001550:	636a      	str	r2, [r5, #52]	@ 0x34
 8001552:	f8d8 2000 	ldr.w	r2, [r8]
 8001556:	42ba      	cmp	r2, r7
 8001558:	db55      	blt.n	8001606 <__gnu_unwind_pr_common+0x28a>
 800155a:	2201      	movs	r2, #1
 800155c:	9202      	str	r2, [sp, #8]
 800155e:	e7aa      	b.n	80014b6 <__gnu_unwind_pr_common+0x13a>
 8001560:	9403      	str	r4, [sp, #12]
 8001562:	f108 0a04 	add.w	sl, r8, #4
 8001566:	2600      	movs	r6, #0
 8001568:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800156c:	461c      	mov	r4, r3
 800156e:	e00d      	b.n	800158c <__gnu_unwind_pr_common+0x210>
 8001570:	4650      	mov	r0, sl
 8001572:	9704      	str	r7, [sp, #16]
 8001574:	f7ff fd76 	bl	8001064 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001578:	2200      	movs	r2, #0
 800157a:	4601      	mov	r1, r0
 800157c:	ab04      	add	r3, sp, #16
 800157e:	4628      	mov	r0, r5
 8001580:	3601      	adds	r6, #1
 8001582:	f10a 0a04 	add.w	sl, sl, #4
 8001586:	f3af 8000 	nop.w
 800158a:	b9e0      	cbnz	r0, 80015c6 <__gnu_unwind_pr_common+0x24a>
 800158c:	42a6      	cmp	r6, r4
 800158e:	d1ef      	bne.n	8001570 <__gnu_unwind_pr_common+0x1f4>
 8001590:	210d      	movs	r1, #13
 8001592:	4658      	mov	r0, fp
 8001594:	f7ff fe7e 	bl	8001294 <_Unwind_GetGR>
 8001598:	9b04      	ldr	r3, [sp, #16]
 800159a:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 800159e:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80015a2:	2006      	movs	r0, #6
 80015a4:	e714      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 80015a6:	4604      	mov	r4, r0
 80015a8:	210d      	movs	r1, #13
 80015aa:	4658      	mov	r0, fp
 80015ac:	f7ff fe72 	bl	8001294 <_Unwind_GetGR>
 80015b0:	9e04      	ldr	r6, [sp, #16]
 80015b2:	6228      	str	r0, [r5, #32]
 80015b4:	2c02      	cmp	r4, #2
 80015b6:	bf04      	itt	eq
 80015b8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 80015ba:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 80015be:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 80015c2:	2006      	movs	r0, #6
 80015c4:	e704      	b.n	80013d0 <__gnu_unwind_pr_common+0x54>
 80015c6:	4623      	mov	r3, r4
 80015c8:	f8d8 6000 	ldr.w	r6, [r8]
 80015cc:	9c03      	ldr	r4, [sp, #12]
 80015ce:	e76e      	b.n	80014ae <__gnu_unwind_pr_common+0x132>
 80015d0:	4640      	mov	r0, r8
 80015d2:	f7ff fc7f 	bl	8000ed4 <selfrel_offset31>
 80015d6:	f108 0204 	add.w	r2, r8, #4
 80015da:	4604      	mov	r4, r0
 80015dc:	63aa      	str	r2, [r5, #56]	@ 0x38
 80015de:	4628      	mov	r0, r5
 80015e0:	f3af 8000 	nop.w
 80015e4:	2800      	cmp	r0, #0
 80015e6:	f43f aef2 	beq.w	80013ce <__gnu_unwind_pr_common+0x52>
 80015ea:	4622      	mov	r2, r4
 80015ec:	210f      	movs	r1, #15
 80015ee:	4658      	mov	r0, fp
 80015f0:	f7ff fe76 	bl	80012e0 <_Unwind_SetGR>
 80015f4:	e741      	b.n	800147a <__gnu_unwind_pr_common+0xfe>
 80015f6:	460c      	mov	r4, r1
 80015f8:	4658      	mov	r0, fp
 80015fa:	210d      	movs	r1, #13
 80015fc:	f7ff fe4a 	bl	8001294 <_Unwind_GetGR>
 8001600:	4626      	mov	r6, r4
 8001602:	6228      	str	r0, [r5, #32]
 8001604:	e7db      	b.n	80015be <__gnu_unwind_pr_common+0x242>
 8001606:	1c58      	adds	r0, r3, #1
 8001608:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800160c:	e781      	b.n	8001512 <__gnu_unwind_pr_common+0x196>
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000

08001614 <__aeabi_unwind_cpp_pr0>:
 8001614:	2300      	movs	r3, #0
 8001616:	e6b1      	b.n	800137c <__gnu_unwind_pr_common>

08001618 <__aeabi_unwind_cpp_pr1>:
 8001618:	2301      	movs	r3, #1
 800161a:	e6af      	b.n	800137c <__gnu_unwind_pr_common>

0800161c <__aeabi_unwind_cpp_pr2>:
 800161c:	2302      	movs	r3, #2
 800161e:	e6ad      	b.n	800137c <__gnu_unwind_pr_common>

08001620 <_Unwind_VRS_Pop>:
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	4606      	mov	r6, r0
 8001626:	b0c3      	sub	sp, #268	@ 0x10c
 8001628:	4615      	mov	r5, r2
 800162a:	461c      	mov	r4, r3
 800162c:	2904      	cmp	r1, #4
 800162e:	f200 80d1 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001632:	e8df f001 	tbb	[pc, r1]
 8001636:	51ac      	.short	0x51ac
 8001638:	2acf      	.short	0x2acf
 800163a:	03          	.byte	0x03
 800163b:	00          	.byte	0x00
 800163c:	2c00      	cmp	r4, #0
 800163e:	f040 80c9 	bne.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001642:	2a10      	cmp	r2, #16
 8001644:	f200 80c6 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	06dc      	lsls	r4, r3, #27
 800164c:	f100 80e7 	bmi.w	800181e <_Unwind_VRS_Pop+0x1fe>
 8001650:	af20      	add	r7, sp, #128	@ 0x80
 8001652:	4638      	mov	r0, r7
 8001654:	f000 f9aa 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 8001658:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800165a:	4639      	mov	r1, r7
 800165c:	2300      	movs	r3, #0
 800165e:	f04f 0c01 	mov.w	ip, #1
 8001662:	fa0c f203 	lsl.w	r2, ip, r3
 8001666:	422a      	tst	r2, r5
 8001668:	4620      	mov	r0, r4
 800166a:	f103 0301 	add.w	r3, r3, #1
 800166e:	d003      	beq.n	8001678 <_Unwind_VRS_Pop+0x58>
 8001670:	f850 2b04 	ldr.w	r2, [r0], #4
 8001674:	600a      	str	r2, [r1, #0]
 8001676:	4604      	mov	r4, r0
 8001678:	2b04      	cmp	r3, #4
 800167a:	f101 0104 	add.w	r1, r1, #4
 800167e:	d1f0      	bne.n	8001662 <_Unwind_VRS_Pop+0x42>
 8001680:	63b4      	str	r4, [r6, #56]	@ 0x38
 8001682:	4638      	mov	r0, r7
 8001684:	f000 f988 	bl	8001998 <__gnu_Unwind_Restore_WMMXC>
 8001688:	e099      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800168a:	2c03      	cmp	r4, #3
 800168c:	f040 80a2 	bne.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001690:	b294      	uxth	r4, r2
 8001692:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001696:	2b10      	cmp	r3, #16
 8001698:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800169c:	f200 809a 	bhi.w	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	071f      	lsls	r7, r3, #28
 80016a4:	f100 80c3 	bmi.w	800182e <_Unwind_VRS_Pop+0x20e>
 80016a8:	af20      	add	r7, sp, #128	@ 0x80
 80016aa:	4638      	mov	r0, r7
 80016ac:	f000 f952 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 80016b0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80016b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80016b6:	b154      	cbz	r4, 80016ce <_Unwind_VRS_Pop+0xae>
 80016b8:	460b      	mov	r3, r1
 80016ba:	1ad0      	subs	r0, r2, r3
 80016bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80016c0:	00e4      	lsls	r4, r4, #3
 80016c2:	581d      	ldr	r5, [r3, r0]
 80016c4:	f843 5b04 	str.w	r5, [r3], #4
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d1fa      	bne.n	80016c2 <_Unwind_VRS_Pop+0xa2>
 80016cc:	4422      	add	r2, r4
 80016ce:	63b2      	str	r2, [r6, #56]	@ 0x38
 80016d0:	4638      	mov	r0, r7
 80016d2:	f000 f91d 	bl	8001910 <__gnu_Unwind_Restore_WMMXD>
 80016d6:	e072      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 80016d8:	2c01      	cmp	r4, #1
 80016da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80016de:	b295      	uxth	r5, r2
 80016e0:	d071      	beq.n	80017c6 <_Unwind_VRS_Pop+0x1a6>
 80016e2:	2c05      	cmp	r4, #5
 80016e4:	d176      	bne.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016e6:	eb08 0905 	add.w	r9, r8, r5
 80016ea:	f1b9 0f20 	cmp.w	r9, #32
 80016ee:	d871      	bhi.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80016f0:	f1b8 0f0f 	cmp.w	r8, #15
 80016f4:	d872      	bhi.n	80017dc <_Unwind_VRS_Pop+0x1bc>
 80016f6:	f1b9 0f10 	cmp.w	r9, #16
 80016fa:	6803      	ldr	r3, [r0, #0]
 80016fc:	f200 809f 	bhi.w	800183e <_Unwind_VRS_Pop+0x21e>
 8001700:	07d9      	lsls	r1, r3, #31
 8001702:	d508      	bpl.n	8001716 <_Unwind_VRS_Pop+0xf6>
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	4630      	mov	r0, r6
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f840 3b48 	str.w	r3, [r0], #72
 8001712:	f000 f8f1 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001716:	af20      	add	r7, sp, #128	@ 0x80
 8001718:	4638      	mov	r0, r7
 800171a:	f000 f8ed 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 800171e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8001720:	2d00      	cmp	r5, #0
 8001722:	f000 80b9 	beq.w	8001898 <_Unwind_VRS_Pop+0x278>
 8001726:	006d      	lsls	r5, r5, #1
 8001728:	1e6a      	subs	r2, r5, #1
 800172a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800172e:	2500      	movs	r5, #0
 8001730:	3201      	adds	r2, #1
 8001732:	3904      	subs	r1, #4
 8001734:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001738:	f853 0b04 	ldr.w	r0, [r3], #4
 800173c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001740:	4293      	cmp	r3, r2
 8001742:	d1f9      	bne.n	8001738 <_Unwind_VRS_Pop+0x118>
 8001744:	2d00      	cmp	r5, #0
 8001746:	f000 80a1 	beq.w	800188c <_Unwind_VRS_Pop+0x26c>
 800174a:	4641      	mov	r1, r8
 800174c:	2910      	cmp	r1, #16
 800174e:	bf38      	it	cc
 8001750:	2110      	movcc	r1, #16
 8001752:	006b      	lsls	r3, r5, #1
 8001754:	3910      	subs	r1, #16
 8001756:	466f      	mov	r7, sp
 8001758:	3b01      	subs	r3, #1
 800175a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800175e:	3301      	adds	r3, #1
 8001760:	3904      	subs	r1, #4
 8001762:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001766:	f852 0b04 	ldr.w	r0, [r2], #4
 800176a:	f841 0f04 	str.w	r0, [r1, #4]!
 800176e:	429a      	cmp	r2, r3
 8001770:	d1f9      	bne.n	8001766 <_Unwind_VRS_Pop+0x146>
 8001772:	2c01      	cmp	r4, #1
 8001774:	f000 8088 	beq.w	8001888 <_Unwind_VRS_Pop+0x268>
 8001778:	f1b8 0f0f 	cmp.w	r8, #15
 800177c:	63b2      	str	r2, [r6, #56]	@ 0x38
 800177e:	d802      	bhi.n	8001786 <_Unwind_VRS_Pop+0x166>
 8001780:	a820      	add	r0, sp, #128	@ 0x80
 8001782:	f000 f8b5 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 8001786:	4638      	mov	r0, r7
 8001788:	f000 f8ba 	bl	8001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800178c:	e017      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800178e:	bb0c      	cbnz	r4, 80017d4 <_Unwind_VRS_Pop+0x1b4>
 8001790:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001792:	4623      	mov	r3, r4
 8001794:	fa1f fc82 	uxth.w	ip, r2
 8001798:	2401      	movs	r4, #1
 800179a:	1d37      	adds	r7, r6, #4
 800179c:	fa04 f103 	lsl.w	r1, r4, r3
 80017a0:	ea11 0f0c 	tst.w	r1, ip
 80017a4:	4602      	mov	r2, r0
 80017a6:	d004      	beq.n	80017b2 <_Unwind_VRS_Pop+0x192>
 80017a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80017ac:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 80017b0:	4610      	mov	r0, r2
 80017b2:	3301      	adds	r3, #1
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d1f1      	bne.n	800179c <_Unwind_VRS_Pop+0x17c>
 80017b8:	04ac      	lsls	r4, r5, #18
 80017ba:	d400      	bmi.n	80017be <_Unwind_VRS_Pop+0x19e>
 80017bc:	63b0      	str	r0, [r6, #56]	@ 0x38
 80017be:	2000      	movs	r0, #0
 80017c0:	b043      	add	sp, #268	@ 0x10c
 80017c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017c6:	eb08 0305 	add.w	r3, r8, r5
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d802      	bhi.n	80017d4 <_Unwind_VRS_Pop+0x1b4>
 80017ce:	f1b8 0f10 	cmp.w	r8, #16
 80017d2:	d114      	bne.n	80017fe <_Unwind_VRS_Pop+0x1de>
 80017d4:	2002      	movs	r0, #2
 80017d6:	b043      	add	sp, #268	@ 0x10c
 80017d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017dc:	2d00      	cmp	r5, #0
 80017de:	d0ee      	beq.n	80017be <_Unwind_VRS_Pop+0x19e>
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	075a      	lsls	r2, r3, #29
 80017e4:	d45c      	bmi.n	80018a0 <_Unwind_VRS_Pop+0x280>
 80017e6:	466f      	mov	r7, sp
 80017e8:	4638      	mov	r0, r7
 80017ea:	f000 f88d 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80017ee:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80017f0:	006b      	lsls	r3, r5, #1
 80017f2:	f1a8 0110 	sub.w	r1, r8, #16
 80017f6:	3b01      	subs	r3, #1
 80017f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80017fc:	e7af      	b.n	800175e <_Unwind_VRS_Pop+0x13e>
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	07da      	lsls	r2, r3, #31
 8001802:	d459      	bmi.n	80018b8 <_Unwind_VRS_Pop+0x298>
 8001804:	af20      	add	r7, sp, #128	@ 0x80
 8001806:	4638      	mov	r0, r7
 8001808:	f000 f86e 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 800180c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800180e:	2d00      	cmp	r5, #0
 8001810:	d189      	bne.n	8001726 <_Unwind_VRS_Pop+0x106>
 8001812:	3304      	adds	r3, #4
 8001814:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001816:	4638      	mov	r0, r7
 8001818:	f000 f862 	bl	80018e0 <__gnu_Unwind_Restore_VFP>
 800181c:	e7cf      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 800181e:	f023 0310 	bic.w	r3, r3, #16
 8001822:	6003      	str	r3, [r0, #0]
 8001824:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8001828:	f000 f8c0 	bl	80019ac <__gnu_Unwind_Save_WMMXC>
 800182c:	e710      	b.n	8001650 <_Unwind_VRS_Pop+0x30>
 800182e:	f023 0308 	bic.w	r3, r3, #8
 8001832:	6003      	str	r3, [r0, #0]
 8001834:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8001838:	f000 f88c 	bl	8001954 <__gnu_Unwind_Save_WMMXD>
 800183c:	e734      	b.n	80016a8 <_Unwind_VRS_Pop+0x88>
 800183e:	07d9      	lsls	r1, r3, #31
 8001840:	d508      	bpl.n	8001854 <_Unwind_VRS_Pop+0x234>
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f840 3b48 	str.w	r3, [r0], #72
 800184e:	f000 f853 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 8001852:	6833      	ldr	r3, [r6, #0]
 8001854:	0758      	lsls	r0, r3, #29
 8001856:	d506      	bpl.n	8001866 <_Unwind_VRS_Pop+0x246>
 8001858:	4630      	mov	r0, r6
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	f840 3bd0 	str.w	r3, [r0], #208
 8001862:	f000 f851 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001866:	af20      	add	r7, sp, #128	@ 0x80
 8001868:	4638      	mov	r0, r7
 800186a:	f000 f845 	bl	80018f8 <__gnu_Unwind_Save_VFP_D>
 800186e:	4668      	mov	r0, sp
 8001870:	f000 f84a 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001874:	f1c8 0210 	rsb	r2, r8, #16
 8001878:	0052      	lsls	r2, r2, #1
 800187a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 800187c:	f1a9 0510 	sub.w	r5, r9, #16
 8001880:	3a01      	subs	r2, #1
 8001882:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001886:	e753      	b.n	8001730 <_Unwind_VRS_Pop+0x110>
 8001888:	af20      	add	r7, sp, #128	@ 0x80
 800188a:	e7c2      	b.n	8001812 <_Unwind_VRS_Pop+0x1f2>
 800188c:	2c01      	cmp	r4, #1
 800188e:	d0c0      	beq.n	8001812 <_Unwind_VRS_Pop+0x1f2>
 8001890:	f1b8 0f0f 	cmp.w	r8, #15
 8001894:	63b3      	str	r3, [r6, #56]	@ 0x38
 8001896:	d892      	bhi.n	80017be <_Unwind_VRS_Pop+0x19e>
 8001898:	4638      	mov	r0, r7
 800189a:	f000 f829 	bl	80018f0 <__gnu_Unwind_Restore_VFP_D>
 800189e:	e78e      	b.n	80017be <_Unwind_VRS_Pop+0x19e>
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	f840 3bd0 	str.w	r3, [r0], #208
 80018a8:	466f      	mov	r7, sp
 80018aa:	f000 f82d 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018ae:	4638      	mov	r0, r7
 80018b0:	f000 f82a 	bl	8001908 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018b4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 80018b6:	e79b      	b.n	80017f0 <_Unwind_VRS_Pop+0x1d0>
 80018b8:	4630      	mov	r0, r6
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	f840 3b48 	str.w	r3, [r0], #72
 80018c2:	f000 f811 	bl	80018e8 <__gnu_Unwind_Save_VFP>
 80018c6:	e79d      	b.n	8001804 <_Unwind_VRS_Pop+0x1e4>

080018c8 <__restore_core_regs>:
 80018c8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80018cc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80018d0:	469c      	mov	ip, r3
 80018d2:	46a6      	mov	lr, r4
 80018d4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80018d8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80018dc:	46e5      	mov	sp, ip
 80018de:	bd00      	pop	{pc}

080018e0 <__gnu_Unwind_Restore_VFP>:
 80018e0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <__gnu_Unwind_Save_VFP>:
 80018e8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <__gnu_Unwind_Restore_VFP_D>:
 80018f0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <__gnu_Unwind_Save_VFP_D>:
 80018f8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001900:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001908:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <__gnu_Unwind_Restore_WMMXD>:
 8001910:	ecf0 0102 	ldfe	f0, [r0], #8
 8001914:	ecf0 1102 	ldfe	f1, [r0], #8
 8001918:	ecf0 2102 	ldfe	f2, [r0], #8
 800191c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001920:	ecf0 4102 	ldfe	f4, [r0], #8
 8001924:	ecf0 5102 	ldfe	f5, [r0], #8
 8001928:	ecf0 6102 	ldfe	f6, [r0], #8
 800192c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001930:	ecf0 8102 	ldfp	f0, [r0], #8
 8001934:	ecf0 9102 	ldfp	f1, [r0], #8
 8001938:	ecf0 a102 	ldfp	f2, [r0], #8
 800193c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001940:	ecf0 c102 	ldfp	f4, [r0], #8
 8001944:	ecf0 d102 	ldfp	f5, [r0], #8
 8001948:	ecf0 e102 	ldfp	f6, [r0], #8
 800194c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <__gnu_Unwind_Save_WMMXD>:
 8001954:	ece0 0102 	stfe	f0, [r0], #8
 8001958:	ece0 1102 	stfe	f1, [r0], #8
 800195c:	ece0 2102 	stfe	f2, [r0], #8
 8001960:	ece0 3102 	stfe	f3, [r0], #8
 8001964:	ece0 4102 	stfe	f4, [r0], #8
 8001968:	ece0 5102 	stfe	f5, [r0], #8
 800196c:	ece0 6102 	stfe	f6, [r0], #8
 8001970:	ece0 7102 	stfe	f7, [r0], #8
 8001974:	ece0 8102 	stfp	f0, [r0], #8
 8001978:	ece0 9102 	stfp	f1, [r0], #8
 800197c:	ece0 a102 	stfp	f2, [r0], #8
 8001980:	ece0 b102 	stfp	f3, [r0], #8
 8001984:	ece0 c102 	stfp	f4, [r0], #8
 8001988:	ece0 d102 	stfp	f5, [r0], #8
 800198c:	ece0 e102 	stfp	f6, [r0], #8
 8001990:	ece0 f102 	stfp	f7, [r0], #8
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Restore_WMMXC>:
 8001998:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800199c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80019a0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80019a4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <__gnu_Unwind_Save_WMMXC>:
 80019ac:	fca0 8101 	stc2	1, cr8, [r0], #4
 80019b0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80019b4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80019b8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <_Unwind_RaiseException>:
 80019c0:	46ec      	mov	ip, sp
 80019c2:	b500      	push	{lr}
 80019c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019d4:	a901      	add	r1, sp, #4
 80019d6:	f7ff fbd7 	bl	8001188 <__gnu_Unwind_RaiseException>
 80019da:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80019de:	b012      	add	sp, #72	@ 0x48
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <_Unwind_Resume>:
 80019e4:	46ec      	mov	ip, sp
 80019e6:	b500      	push	{lr}
 80019e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019f8:	a901      	add	r1, sp, #4
 80019fa:	f7ff fc01 	bl	8001200 <__gnu_Unwind_Resume>
 80019fe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a02:	b012      	add	sp, #72	@ 0x48
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <_Unwind_Resume_or_Rethrow>:
 8001a08:	46ec      	mov	ip, sp
 8001a0a:	b500      	push	{lr}
 8001a0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a1c:	a901      	add	r1, sp, #4
 8001a1e:	f7ff fc11 	bl	8001244 <__gnu_Unwind_Resume_or_Rethrow>
 8001a22:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a26:	b012      	add	sp, #72	@ 0x48
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <_Unwind_ForcedUnwind>:
 8001a2c:	46ec      	mov	ip, sp
 8001a2e:	b500      	push	{lr}
 8001a30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a40:	ab01      	add	r3, sp, #4
 8001a42:	f7ff fbd5 	bl	80011f0 <__gnu_Unwind_ForcedUnwind>
 8001a46:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a4a:	b012      	add	sp, #72	@ 0x48
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <_Unwind_Backtrace>:
 8001a50:	46ec      	mov	ip, sp
 8001a52:	b500      	push	{lr}
 8001a54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a64:	aa01      	add	r2, sp, #4
 8001a66:	f7ff fc47 	bl	80012f8 <__gnu_Unwind_Backtrace>
 8001a6a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a6e:	b012      	add	sp, #72	@ 0x48
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <next_unwind_byte>:
 8001a74:	7a02      	ldrb	r2, [r0, #8]
 8001a76:	4603      	mov	r3, r0
 8001a78:	b97a      	cbnz	r2, 8001a9a <next_unwind_byte+0x26>
 8001a7a:	7a42      	ldrb	r2, [r0, #9]
 8001a7c:	b1a2      	cbz	r2, 8001aa8 <next_unwind_byte+0x34>
 8001a7e:	6841      	ldr	r1, [r0, #4]
 8001a80:	3a01      	subs	r2, #1
 8001a82:	b410      	push	{r4}
 8001a84:	7242      	strb	r2, [r0, #9]
 8001a86:	6808      	ldr	r0, [r1, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	1d0c      	adds	r4, r1, #4
 8001a8c:	721a      	strb	r2, [r3, #8]
 8001a8e:	0202      	lsls	r2, r0, #8
 8001a90:	605c      	str	r4, [r3, #4]
 8001a92:	0e00      	lsrs	r0, r0, #24
 8001a94:	bc10      	pop	{r4}
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4770      	bx	lr
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	721a      	strb	r2, [r3, #8]
 8001aa0:	0202      	lsls	r2, r0, #8
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	0e00      	lsrs	r0, r0, #24
 8001aa6:	4770      	bx	lr
 8001aa8:	20b0      	movs	r0, #176	@ 0xb0
 8001aaa:	4770      	bx	lr

08001aac <_Unwind_GetGR.constprop.0>:
 8001aac:	b500      	push	{lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	aa03      	add	r2, sp, #12
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	220c      	movs	r2, #12
 8001aba:	f7ff fbd3 	bl	8001264 <_Unwind_VRS_Get>
 8001abe:	9803      	ldr	r0, [sp, #12]
 8001ac0:	b005      	add	sp, #20
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac6:	bf00      	nop

08001ac8 <unwind_UCB_from_context>:
 8001ac8:	e7f0      	b.n	8001aac <_Unwind_GetGR.constprop.0>
 8001aca:	bf00      	nop

08001acc <__gnu_unwind_execute>:
 8001acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad0:	4606      	mov	r6, r0
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	460d      	mov	r5, r1
 8001ad6:	f04f 0800 	mov.w	r8, #0
 8001ada:	4628      	mov	r0, r5
 8001adc:	f7ff ffca 	bl	8001a74 <next_unwind_byte>
 8001ae0:	28b0      	cmp	r0, #176	@ 0xb0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	f000 80da 	beq.w	8001c9c <__gnu_unwind_execute+0x1d0>
 8001ae8:	0607      	lsls	r7, r0, #24
 8001aea:	d546      	bpl.n	8001b7a <__gnu_unwind_execute+0xae>
 8001aec:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001af0:	2b80      	cmp	r3, #128	@ 0x80
 8001af2:	d05e      	beq.n	8001bb2 <__gnu_unwind_execute+0xe6>
 8001af4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001af6:	d073      	beq.n	8001be0 <__gnu_unwind_execute+0x114>
 8001af8:	d81b      	bhi.n	8001b32 <__gnu_unwind_execute+0x66>
 8001afa:	2b90      	cmp	r3, #144	@ 0x90
 8001afc:	f000 809b 	beq.w	8001c36 <__gnu_unwind_execute+0x16a>
 8001b00:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b02:	d112      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b04:	43c3      	mvns	r3, r0
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001b0e:	411a      	asrs	r2, r3
 8001b10:	0701      	lsls	r1, r0, #28
 8001b12:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001b16:	d501      	bpl.n	8001b1c <__gnu_unwind_execute+0x50>
 8001b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4630      	mov	r0, r6
 8001b22:	f7ff fd7d 	bl	8001620 <_Unwind_VRS_Pop>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d0d7      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	b005      	add	sp, #20
 8001b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b34:	d16d      	bne.n	8001c12 <__gnu_unwind_execute+0x146>
 8001b36:	28c6      	cmp	r0, #198	@ 0xc6
 8001b38:	f000 8093 	beq.w	8001c62 <__gnu_unwind_execute+0x196>
 8001b3c:	28c7      	cmp	r0, #199	@ 0xc7
 8001b3e:	f000 80b2 	beq.w	8001ca6 <__gnu_unwind_execute+0x1da>
 8001b42:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b48:	f000 80d2 	beq.w	8001cf0 <__gnu_unwind_execute+0x224>
 8001b4c:	28c8      	cmp	r0, #200	@ 0xc8
 8001b4e:	f000 80dd 	beq.w	8001d0c <__gnu_unwind_execute+0x240>
 8001b52:	28c9      	cmp	r0, #201	@ 0xc9
 8001b54:	d1e9      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b56:	4628      	mov	r0, r5
 8001b58:	f7ff ff8c 	bl	8001a74 <next_unwind_byte>
 8001b5c:	0302      	lsls	r2, r0, #12
 8001b5e:	f000 000f 	and.w	r0, r0, #15
 8001b62:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001b66:	3001      	adds	r0, #1
 8001b68:	4302      	orrs	r2, r0
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f7ff fd56 	bl	8001620 <_Unwind_VRS_Pop>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d0b0      	beq.n	8001ada <__gnu_unwind_execute+0xe>
 8001b78:	e7d7      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001b7a:	0083      	lsls	r3, r0, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	1d1f      	adds	r7, r3, #4
 8001b80:	f10d 090c 	add.w	r9, sp, #12
 8001b84:	2300      	movs	r3, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	f8cd 9000 	str.w	r9, [sp]
 8001b8c:	220d      	movs	r2, #13
 8001b8e:	4630      	mov	r0, r6
 8001b90:	f7ff fb68 	bl	8001264 <_Unwind_VRS_Get>
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	f8cd 9000 	str.w	r9, [sp]
 8001b9a:	0660      	lsls	r0, r4, #25
 8001b9c:	bf4c      	ite	mi
 8001b9e:	1bdf      	submi	r7, r3, r7
 8001ba0:	18ff      	addpl	r7, r7, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	220d      	movs	r2, #13
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4630      	mov	r0, r6
 8001baa:	9703      	str	r7, [sp, #12]
 8001bac:	f7ff fb80 	bl	80012b0 <_Unwind_VRS_Set>
 8001bb0:	e793      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f7ff ff5e 	bl	8001a74 <next_unwind_byte>
 8001bb8:	0224      	lsls	r4, r4, #8
 8001bba:	4320      	orrs	r0, r4
 8001bbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001bc0:	d0b3      	beq.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bc2:	0104      	lsls	r4, r0, #4
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	b2a2      	uxth	r2, r4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f7ff fd28 	bl	8001620 <_Unwind_VRS_Pop>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d1aa      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bd4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001bd8:	bf18      	it	ne
 8001bda:	f04f 0801 	movne.w	r8, #1
 8001bde:	e77c      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001be0:	28b1      	cmp	r0, #177	@ 0xb1
 8001be2:	d051      	beq.n	8001c88 <__gnu_unwind_execute+0x1bc>
 8001be4:	28b2      	cmp	r0, #178	@ 0xb2
 8001be6:	f000 80ad 	beq.w	8001d44 <__gnu_unwind_execute+0x278>
 8001bea:	28b3      	cmp	r0, #179	@ 0xb3
 8001bec:	d06d      	beq.n	8001cca <__gnu_unwind_execute+0x1fe>
 8001bee:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001bf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001bf4:	d099      	beq.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001bf6:	f000 0207 	and.w	r2, r0, #7
 8001bfa:	3201      	adds	r2, #1
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c02:	4619      	mov	r1, r3
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff fd0b 	bl	8001620 <_Unwind_VRS_Pop>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	f43f af65 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c10:	e78b      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c12:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c16:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c18:	d187      	bne.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c1a:	f000 0207 	and.w	r2, r0, #7
 8001c1e:	3201      	adds	r2, #1
 8001c20:	2305      	movs	r3, #5
 8001c22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c26:	2101      	movs	r1, #1
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f7ff fcf9 	bl	8001620 <_Unwind_VRS_Pop>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	f43f af53 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c34:	e779      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c36:	f000 030d 	and.w	r3, r0, #13
 8001c3a:	2b0d      	cmp	r3, #13
 8001c3c:	f43f af75 	beq.w	8001b2a <__gnu_unwind_execute+0x5e>
 8001c40:	af03      	add	r7, sp, #12
 8001c42:	2300      	movs	r3, #0
 8001c44:	f000 020f 	and.w	r2, r0, #15
 8001c48:	4619      	mov	r1, r3
 8001c4a:	9700      	str	r7, [sp, #0]
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f7ff fb09 	bl	8001264 <_Unwind_VRS_Get>
 8001c52:	2300      	movs	r3, #0
 8001c54:	9700      	str	r7, [sp, #0]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f7ff fb28 	bl	80012b0 <_Unwind_VRS_Set>
 8001c60:	e73b      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001c62:	4628      	mov	r0, r5
 8001c64:	f7ff ff06 	bl	8001a74 <next_unwind_byte>
 8001c68:	0302      	lsls	r2, r0, #12
 8001c6a:	f000 000f 	and.w	r0, r0, #15
 8001c6e:	3001      	adds	r0, #1
 8001c70:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c74:	2303      	movs	r3, #3
 8001c76:	4302      	orrs	r2, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff fcd0 	bl	8001620 <_Unwind_VRS_Pop>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f43f af2a 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001c86:	e750      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7ff fef3 	bl	8001a74 <next_unwind_byte>
 8001c8e:	1e43      	subs	r3, r0, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b0e      	cmp	r3, #14
 8001c94:	4602      	mov	r2, r0
 8001c96:	f67f af41 	bls.w	8001b1c <__gnu_unwind_execute+0x50>
 8001c9a:	e746      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001c9c:	f1b8 0f00 	cmp.w	r8, #0
 8001ca0:	d040      	beq.n	8001d24 <__gnu_unwind_execute+0x258>
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e742      	b.n	8001b2c <__gnu_unwind_execute+0x60>
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff fee4 	bl	8001a74 <next_unwind_byte>
 8001cac:	1e43      	subs	r3, r0, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b0e      	cmp	r3, #14
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f63f af39 	bhi.w	8001b2a <__gnu_unwind_execute+0x5e>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7ff fcaf 	bl	8001620 <_Unwind_VRS_Pop>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	f43f af09 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cc8:	e72f      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff fed2 	bl	8001a74 <next_unwind_byte>
 8001cd0:	0302      	lsls	r2, r0, #12
 8001cd2:	f000 000f 	and.w	r0, r0, #15
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001cdc:	2301      	movs	r3, #1
 8001cde:	4302      	orrs	r2, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff fc9c 	bl	8001620 <_Unwind_VRS_Pop>
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	f43f aef6 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001cee:	e71c      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001cf0:	f000 020f 	and.w	r2, r0, #15
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f7ff fc8e 	bl	8001620 <_Unwind_VRS_Pop>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	f43f aee8 	beq.w	8001ada <__gnu_unwind_execute+0xe>
 8001d0a:	e70e      	b.n	8001b2a <__gnu_unwind_execute+0x5e>
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff feb1 	bl	8001a74 <next_unwind_byte>
 8001d12:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001d16:	f000 030f 	and.w	r3, r0, #15
 8001d1a:	3210      	adds	r2, #16
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001d22:	e722      	b.n	8001b6a <__gnu_unwind_execute+0x9e>
 8001d24:	ac03      	add	r4, sp, #12
 8001d26:	4643      	mov	r3, r8
 8001d28:	4641      	mov	r1, r8
 8001d2a:	220e      	movs	r2, #14
 8001d2c:	9400      	str	r4, [sp, #0]
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f7ff fa98 	bl	8001264 <_Unwind_VRS_Get>
 8001d34:	9400      	str	r4, [sp, #0]
 8001d36:	4643      	mov	r3, r8
 8001d38:	220f      	movs	r2, #15
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fab7 	bl	80012b0 <_Unwind_VRS_Set>
 8001d42:	e7ae      	b.n	8001ca2 <__gnu_unwind_execute+0x1d6>
 8001d44:	2300      	movs	r3, #0
 8001d46:	f10d 090c 	add.w	r9, sp, #12
 8001d4a:	220d      	movs	r2, #13
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f8cd 9000 	str.w	r9, [sp]
 8001d52:	4630      	mov	r0, r6
 8001d54:	f7ff fa86 	bl	8001264 <_Unwind_VRS_Get>
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff fe8b 	bl	8001a74 <next_unwind_byte>
 8001d5e:	0602      	lsls	r2, r0, #24
 8001d60:	9c03      	ldr	r4, [sp, #12]
 8001d62:	f04f 0702 	mov.w	r7, #2
 8001d66:	d50b      	bpl.n	8001d80 <__gnu_unwind_execute+0x2b4>
 8001d68:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001d6c:	40b8      	lsls	r0, r7
 8001d6e:	4404      	add	r4, r0
 8001d70:	4628      	mov	r0, r5
 8001d72:	9403      	str	r4, [sp, #12]
 8001d74:	f7ff fe7e 	bl	8001a74 <next_unwind_byte>
 8001d78:	0603      	lsls	r3, r0, #24
 8001d7a:	f107 0707 	add.w	r7, r7, #7
 8001d7e:	d4f3      	bmi.n	8001d68 <__gnu_unwind_execute+0x29c>
 8001d80:	fa00 f207 	lsl.w	r2, r0, r7
 8001d84:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001d88:	4422      	add	r2, r4
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9203      	str	r2, [sp, #12]
 8001d8e:	f8cd 9000 	str.w	r9, [sp]
 8001d92:	220d      	movs	r2, #13
 8001d94:	4619      	mov	r1, r3
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fa8a 	bl	80012b0 <_Unwind_VRS_Set>
 8001d9c:	e69d      	b.n	8001ada <__gnu_unwind_execute+0xe>
 8001d9e:	bf00      	nop

08001da0 <__gnu_unwind_frame>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001da4:	6853      	ldr	r3, [r2, #4]
 8001da6:	b084      	sub	sp, #16
 8001da8:	f04f 0c03 	mov.w	ip, #3
 8001dac:	3208      	adds	r2, #8
 8001dae:	021c      	lsls	r4, r3, #8
 8001db0:	4608      	mov	r0, r1
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	a901      	add	r1, sp, #4
 8001db6:	9401      	str	r4, [sp, #4]
 8001db8:	9202      	str	r2, [sp, #8]
 8001dba:	f88d c00c 	strb.w	ip, [sp, #12]
 8001dbe:	f88d 300d 	strb.w	r3, [sp, #13]
 8001dc2:	f7ff fe83 	bl	8001acc <__gnu_unwind_execute>
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	bf00      	nop

08001dcc <_Unwind_GetRegionStart>:
 8001dcc:	b508      	push	{r3, lr}
 8001dce:	f7ff fe7b 	bl	8001ac8 <unwind_UCB_from_context>
 8001dd2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop

08001dd8 <_Unwind_GetLanguageSpecificData>:
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	f7ff fe75 	bl	8001ac8 <unwind_UCB_from_context>
 8001dde:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001de0:	79c3      	ldrb	r3, [r0, #7]
 8001de2:	3302      	adds	r3, #2
 8001de4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop

08001dec <__aeabi_idiv0>:
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <_Z9ResetChipP12GPIO_TypeDeft>:
	}

	// Lock the Flash
	HAL_FLASH_Lock();
}
void ResetChip(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 fbd9 	bl	80035ba <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e08:	2014      	movs	r0, #20
 8001e0a:	f001 f917 	bl	800303c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fbd0 	bl	80035ba <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001e1a:	2064      	movs	r0, #100	@ 0x64
 8001e1c:	f001 f90e 	bl	800303c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 fbc7 	bl	80035ba <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e2c:	2014      	movs	r0, #20
 8001e2e:	f001 f905 	bl	800303c <HAL_Delay>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_Z10SelectChipP12GPIO_TypeDeft13GPIO_PinState>:

void SelectChip(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState state) {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]
 8001e46:	4613      	mov	r3, r2
 8001e48:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
 8001e4a:	787a      	ldrb	r2, [r7, #1]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 fbb2 	bl	80035ba <HAL_GPIO_WritePin>
	HAL_Delay(2); // Falls notwendig
 8001e56:	2002      	movs	r0, #2
 8001e58:	f001 f8f0 	bl	800303c <HAL_Delay>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>:
void SPI_TransmitReceiveWithDebug(SPI_HandleTypeDef* hspi, uint8_t* txData, uint8_t* rxData, uint16_t length, const char* debugMessage) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	807b      	strh	r3, [r7, #2]
	HAL_SPI_TransmitReceive(hspi, txData, rxData, length, HAL_MAX_DELAY);
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f002 fdce 	bl	8004a20 <HAL_SPI_TransmitReceive>
	if (debugMessage) {
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc+0x3a>
		HAL_UART_Transmit(&huart2, (uint8_t*)debugMessage, strlen(debugMessage), 100);
 8001e8a:	69b8      	ldr	r0, [r7, #24]
 8001e8c:	f7fe fa10 	bl	80002b0 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	2364      	movs	r3, #100	@ 0x64
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc+0x44>)
 8001e9a:	f003 fe26 	bl	8005aea <HAL_UART_Transmit>
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002ec 	.word	0x200002ec

08001eac <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef>:
	return circuitMode;
}



void SPI_WaitUntilReady(SPI_HandleTypeDef *hspi) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8001eb4:	e028      	b.n	8001f08 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x5c>
		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8001eb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eba:	4820      	ldr	r0, [pc, #128]	@ (8001f3c <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x90>)
 8001ebc:	f001 fb60 	bl	8003580 <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x94>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2140      	movs	r1, #64	@ 0x40
 8001ecc:	481d      	ldr	r0, [pc, #116]	@ (8001f44 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x98>)
 8001ece:	f001 fb74 	bl	80035ba <HAL_GPIO_WritePin>
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8001ed2:	2140      	movs	r1, #64	@ 0x40
 8001ed4:	481b      	ldr	r0, [pc, #108]	@ (8001f44 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x98>)
 8001ed6:	f001 fb53 	bl	8003580 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x9c>)
 8001ee0:	701a      	strb	r2, [r3, #0]

		HAL_Delay(5);
 8001ee2:	2005      	movs	r0, #5
 8001ee4:	f001 f8aa 	bl	800303c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	@ 0x40
 8001eec:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x98>)
 8001eee:	f001 fb64 	bl	80035ba <HAL_GPIO_WritePin>
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8001ef2:	2140      	movs	r1, #64	@ 0x40
 8001ef4:	4813      	ldr	r0, [pc, #76]	@ (8001f44 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x98>)
 8001ef6:	f001 fb43 	bl	8003580 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x9c>)
 8001f00:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f001 f89a 	bl	800303c <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8001f08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f0c:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x90>)
 8001f0e:	f001 fb37 	bl	8003580 <HAL_GPIO_ReadPin>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1c9      	bne.n	8001eb6 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0xa>
			}
	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8001f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x90>)
 8001f28:	f001 fb2a 	bl	8003580 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef+0x94>)
 8001f32:	701a      	strb	r2, [r3, #0]


}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	200001f4 	.word	0x200001f4
 8001f44:	40020400 	.word	0x40020400
 8001f48:	200001f5 	.word	0x200001f5

08001f4c <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef>:
	}
	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));

}

void SPI_WaitTransmit(SPI_HandleTypeDef *hspi) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	4827      	ldr	r0, [pc, #156]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001f5a:	f001 fb2e 	bl	80035ba <HAL_GPIO_WritePin>
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8001f5e:	2140      	movs	r1, #64	@ 0x40
 8001f60:	4825      	ldr	r0, [pc, #148]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001f62:	f001 fb0d 	bl	8003580 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb0>)
 8001f6c:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != GPIO_PIN_SET) {
 8001f6e:	e025      	b.n	8001fbc <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0x70>
		busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8001f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f74:	4822      	ldr	r0, [pc, #136]	@ (8002000 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb4>)
 8001f76:	f001 fb03 	bl	8003580 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb8>)
 8001f80:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Select the chip
 8001f82:	2201      	movs	r2, #1
 8001f84:	2140      	movs	r1, #64	@ 0x40
 8001f86:	481c      	ldr	r0, [pc, #112]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001f88:	f001 fb17 	bl	80035ba <HAL_GPIO_WritePin>
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8001f8c:	2140      	movs	r1, #64	@ 0x40
 8001f8e:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001f90:	f001 faf6 	bl	8003580 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb0>)
 8001f9a:	701a      	strb	r2, [r3, #0]

		HAL_Delay(5); // Small delay to ensure stability
 8001f9c:	2005      	movs	r0, #5
 8001f9e:	f001 f84d 	bl	800303c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Select the chip
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2140      	movs	r1, #64	@ 0x40
 8001fa6:	4814      	ldr	r0, [pc, #80]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001fa8:	f001 fb07 	bl	80035ba <HAL_GPIO_WritePin>
		nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8001fac:	2140      	movs	r1, #64	@ 0x40
 8001fae:	4812      	ldr	r0, [pc, #72]	@ (8001ff8 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xac>)
 8001fb0:	f001 fae6 	bl	8003580 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb0>)
 8001fba:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) != GPIO_PIN_SET) {
 8001fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc0:	480f      	ldr	r0, [pc, #60]	@ (8002000 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb4>)
 8001fc2:	f001 fadd 	bl	8003580 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1cc      	bne.n	8001f70 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0x24>



	}
	busy=uint8_t(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8001fd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fda:	4809      	ldr	r0, [pc, #36]	@ (8002000 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb4>)
 8001fdc:	f001 fad0 	bl	8003580 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef+0xb8>)
 8001fe6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10); // Small delay to ensure stability
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f001 f827 	bl	800303c <HAL_Delay>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	200001f5 	.word	0x200001f5
 8002000:	40020000 	.word	0x40020000
 8002004:	200001f4 	.word	0x200001f4

08002008 <_Z9GetStatusv>:
void GetStatus() {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af02      	add	r7, sp, #8
	uint8_t command = 0xC0;  // Nur Low Byte wird verwendet
 800200e:	23c0      	movs	r3, #192	@ 0xc0
 8002010:	71fb      	strb	r3, [r7, #7]
	uint8_t response = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	71bb      	strb	r3, [r7, #6]

	// Sende 16-Bit-Datenrahmen (High Byte wird ignoriert)
	HAL_SPI_TransmitReceive(&hspi1, &command, &response, 1, HAL_MAX_DELAY);
 8002016:	1dba      	adds	r2, r7, #6
 8002018:	1df9      	adds	r1, r7, #7
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <_Z9GetStatusv+0x30>)
 8002024:	f002 fcfc 	bl	8004a20 <HAL_SPI_TransmitReceive>

	// Extrahiere nur das Low Byte aus der Antwort
	HAL_Delay(10);
 8002028:	200a      	movs	r0, #10
 800202a:	f001 f807 	bl	800303c <HAL_Delay>


}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000024c 	.word	0x2000024c

0800203c <_Z10SetStandbyv>:

void SetStandby() {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	uint8_t command[2] = {0x80, 0x01};
 8002042:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002046:	80bb      	strh	r3, [r7, #4]
	//uint8_t response[2]= {0x00, 0x00};
	// Sende und empfange 16-Bit-Datenrahmen
	// Zuerst Daten senden
	HAL_SPI_Transmit(&hspi1, (uint8_t*)command, 2, HAL_MAX_DELAY);
 8002048:	1d39      	adds	r1, r7, #4
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800204e:	2202      	movs	r2, #2
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <_Z10SetStandbyv+0x28>)
 8002052:	f002 fa21 	bl	8004498 <HAL_SPI_Transmit>

	// Dann die Antwort empfangen
	//HAL_SPI_Receive(&hspi1, (uint8_t*)&response, 2, HAL_MAX_DELAY);
	HAL_Delay(10);
 8002056:	200a      	movs	r0, #10
 8002058:	f000 fff0 	bl	800303c <HAL_Delay>

}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000024c 	.word	0x2000024c

08002068 <_Z11setLoRaModev>:

// Funktion zum Aktivieren des LoRa Modus
void setLoRaMode() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
	//*(uint16_t*)tx = 0x8A | 0x01 << 8; // LoRa mode

	uint8_t tx[2] = {0x8A, 0x01}; // LoRa Mode aktivieren
 800206e:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8002072:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, tx, 2, HAL_MAX_DELAY);
 8002074:	1d39      	adds	r1, r7, #4
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800207a:	2202      	movs	r2, #2
 800207c:	4807      	ldr	r0, [pc, #28]	@ (800209c <_Z11setLoRaModev+0x34>)
 800207e:	f002 fa0b 	bl	8004498 <HAL_SPI_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Set LoRa mode\r\n", 15, 100);
 8002082:	2364      	movs	r3, #100	@ 0x64
 8002084:	220f      	movs	r2, #15
 8002086:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <_Z11setLoRaModev+0x38>)
 8002088:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <_Z11setLoRaModev+0x3c>)
 800208a:	f003 fd2e 	bl	8005aea <HAL_UART_Transmit>
	HAL_Delay(10);
 800208e:	200a      	movs	r0, #10
 8002090:	f000 ffd4 	bl	800303c <HAL_Delay>

}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2000024c 	.word	0x2000024c
 80020a0:	08008de4 	.word	0x08008de4
 80020a4:	200002ec 	.word	0x200002ec

080020a8 <_Z13getPacketTypeP19__SPI_HandleTypeDef>:
void getPacketType(SPI_HandleTypeDef* hspi) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	//uint8_t txData;
	//*(uint32_t*)txData = 0x03 | 0x00 << 16; // LoRa mode
	uint8_t txData[3] = {0x03, 0x00, 0x00};  // Opcode = 0x03, NOP, NOP
 80020b0:	4a37      	ldr	r2, [pc, #220]	@ (8002190 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xe8>)
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4611      	mov	r1, r2
 80020ba:	8019      	strh	r1, [r3, #0]
 80020bc:	3302      	adds	r3, #2
 80020be:	0c12      	lsrs	r2, r2, #16
 80020c0:	701a      	strb	r2, [r3, #0]
	uint8_t rxData[3] = {0x00, 0x00, 0x00};
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xec>)
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4611      	mov	r1, r2
 80020cc:	8019      	strh	r1, [r3, #0]
 80020ce:	3302      	adds	r3, #2
 80020d0:	0c12      	lsrs	r2, r2, #16
 80020d2:	701a      	strb	r2, [r3, #0]

	// SPI-Übertragung und Empfang
	HAL_SPI_Transmit(&hspi1,txData, 3, HAL_MAX_DELAY);   // Lese die Antwort
 80020d4:	f107 0114 	add.w	r1, r7, #20
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020dc:	2203      	movs	r2, #3
 80020de:	482e      	ldr	r0, [pc, #184]	@ (8002198 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf0>)
 80020e0:	f002 f9da 	bl	8004498 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rxData, 3, HAL_MAX_DELAY);   // Lese die Antwort
 80020e4:	f107 0110 	add.w	r1, r7, #16
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ec:	2203      	movs	r2, #3
 80020ee:	482a      	ldr	r0, [pc, #168]	@ (8002198 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf0>)
 80020f0:	f002 fb49 	bl	8004786 <HAL_SPI_Receive>

	// SPI_TransmitReceiveWithDebug(hspi, txData[0], rxData, 3, "GetPacketType: ");
	// Der Pakettyp befindet sistatusch im dritten Byte (rxData[2])
	uint8_t packetType = rxData[2];
 80020f4:	7cbb      	ldrb	r3, [r7, #18]
 80020f6:	73fb      	strb	r3, [r7, #15]

	// Debug-Ausgabe
	switch (packetType) {
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d82f      	bhi.n	800215e <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xb6>
 80020fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002104 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x5c>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002119 	.word	0x08002119
 8002108:	08002127 	.word	0x08002127
 800210c:	08002135 	.word	0x08002135
 8002110:	08002143 	.word	0x08002143
 8002114:	08002151 	.word	0x08002151
	case 0x00:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: GFSK (0x00)\r\n", 30, 100);
 8002118:	2364      	movs	r3, #100	@ 0x64
 800211a:	221e      	movs	r2, #30
 800211c:	491f      	ldr	r1, [pc, #124]	@ (800219c <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf4>)
 800211e:	4820      	ldr	r0, [pc, #128]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 8002120:	f003 fce3 	bl	8005aea <HAL_UART_Transmit>
		break;
 8002124:	e02f      	b.n	8002186 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xde>
	case 0x01:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: LoRa (0x01)\r\n", 30, 100);
 8002126:	2364      	movs	r3, #100	@ 0x64
 8002128:	221e      	movs	r2, #30
 800212a:	491e      	ldr	r1, [pc, #120]	@ (80021a4 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xfc>)
 800212c:	481c      	ldr	r0, [pc, #112]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 800212e:	f003 fcdc 	bl	8005aea <HAL_UART_Transmit>

		break;
 8002132:	e028      	b.n	8002186 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xde>
	case 0x02:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: Ranging (0x02)\r\n", 30, 100);
 8002134:	2364      	movs	r3, #100	@ 0x64
 8002136:	221e      	movs	r2, #30
 8002138:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x100>)
 800213a:	4819      	ldr	r0, [pc, #100]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 800213c:	f003 fcd5 	bl	8005aea <HAL_UART_Transmit>

		break;
 8002140:	e021      	b.n	8002186 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xde>
	case 0x03:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: FLRC (0x03)\r\n", 30, 100);
 8002142:	2364      	movs	r3, #100	@ 0x64
 8002144:	221e      	movs	r2, #30
 8002146:	4919      	ldr	r1, [pc, #100]	@ (80021ac <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x104>)
 8002148:	4815      	ldr	r0, [pc, #84]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 800214a:	f003 fcce 	bl	8005aea <HAL_UART_Transmit>

		break;
 800214e:	e01a      	b.n	8002186 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xde>
	case 0x04:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Packet Type: BLE (0x04)\r\n", 30, 100);
 8002150:	2364      	movs	r3, #100	@ 0x64
 8002152:	221e      	movs	r2, #30
 8002154:	4916      	ldr	r1, [pc, #88]	@ (80021b0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x108>)
 8002156:	4812      	ldr	r0, [pc, #72]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 8002158:	f003 fcc7 	bl	8005aea <HAL_UART_Transmit>

		break;
 800215c:	e013      	b.n	8002186 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xde>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Packet Type:", 20, 100);
 800215e:	2364      	movs	r3, #100	@ 0x64
 8002160:	2214      	movs	r2, #20
 8002162:	4914      	ldr	r1, [pc, #80]	@ (80021b4 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x10c>)
 8002164:	480e      	ldr	r0, [pc, #56]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 8002166:	f003 fcc0 	bl	8005aea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &packetType, 1, 100);
 800216a:	f107 010f 	add.w	r1, r7, #15
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	2201      	movs	r2, #1
 8002172:	480b      	ldr	r0, [pc, #44]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 8002174:	f003 fcb9 	bl	8005aea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 4, 100);
 8002178:	2364      	movs	r3, #100	@ 0x64
 800217a:	2204      	movs	r2, #4
 800217c:	490e      	ldr	r1, [pc, #56]	@ (80021b8 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0x110>)
 800217e:	4808      	ldr	r0, [pc, #32]	@ (80021a0 <_Z13getPacketTypeP19__SPI_HandleTypeDef+0xf8>)
 8002180:	f003 fcb3 	bl	8005aea <HAL_UART_Transmit>

		break;
 8002184:	bf00      	nop
	}
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	08008ea0 	.word	0x08008ea0
 8002194:	08008ea4 	.word	0x08008ea4
 8002198:	2000024c 	.word	0x2000024c
 800219c:	08008df4 	.word	0x08008df4
 80021a0:	200002ec 	.word	0x200002ec
 80021a4:	08008e10 	.word	0x08008e10
 80021a8:	08008e2c 	.word	0x08008e2c
 80021ac:	08008e4c 	.word	0x08008e4c
 80021b0:	08008e68 	.word	0x08008e68
 80021b4:	08008e84 	.word	0x08008e84
 80021b8:	08008e9c 	.word	0x08008e9c

080021bc <_Z12setFrequencyv>:


// Funktion zum Setzen der Frequenz
void setFrequency() {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
	uint8_t tx[4] = {0x86, 0xB8, 0x9D, 0x89}; // Frequenzdaten
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <_Z12setFrequencyv+0x2c>)
 80021c4:	607b      	str	r3, [r7, #4]
	uint8_t rx[4] = {0};
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set Frequency\r\n");  // SPI mit Debugger
 80021ca:	463a      	mov	r2, r7
 80021cc:	1d39      	adds	r1, r7, #4
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_Z12setFrequencyv+0x30>)
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2304      	movs	r3, #4
 80021d4:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <_Z12setFrequencyv+0x34>)
 80021d6:	f7ff fe45 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 80021da:	200a      	movs	r0, #10
 80021dc:	f000 ff2e 	bl	800303c <HAL_Delay>

}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	899db886 	.word	0x899db886
 80021ec:	08008ea8 	.word	0x08008ea8
 80021f0:	2000024c 	.word	0x2000024c

080021f4 <_Z20setBufferBaseAddressv>:

// Funktion zum Setzen der Basisadresse des Buffers
void setBufferBaseAddress() {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
	uint8_t tx[3] = {0x8F, 0x80, 0x00}; // Basisadresse
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <_Z20setBufferBaseAddressv+0x40>)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4611      	mov	r1, r2
 8002202:	8019      	strh	r1, [r3, #0]
 8002204:	3302      	adds	r3, #2
 8002206:	0c12      	lsrs	r2, r2, #16
 8002208:	701a      	strb	r2, [r3, #0]
	uint8_t rx[3] = {0};
 800220a:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <_Z20setBufferBaseAddressv+0x44>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	803b      	strh	r3, [r7, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	70bb      	strb	r3, [r7, #2]
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 3, "Set Buffer Base Address\r\n");  // SPI mit Debugger
 8002214:	463a      	mov	r2, r7
 8002216:	1d39      	adds	r1, r7, #4
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <_Z20setBufferBaseAddressv+0x48>)
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2303      	movs	r3, #3
 800221e:	4808      	ldr	r0, [pc, #32]	@ (8002240 <_Z20setBufferBaseAddressv+0x4c>)
 8002220:	f7ff fe20 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 8002224:	200a      	movs	r0, #10
 8002226:	f000 ff09 	bl	800303c <HAL_Delay>

}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08008ed4 	.word	0x08008ed4
 8002238:	08008ed8 	.word	0x08008ed8
 800223c:	08008eb8 	.word	0x08008eb8
 8002240:	2000024c 	.word	0x2000024c

08002244 <_Z19setModulationParamsv>:

// Funktion zum Setzen der Modulationsparameter
void setModulationParams() {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af02      	add	r7, sp, #8
	uint8_t tx[4] = {0x8B, 0x70, 0x18, 0x01}; // Modulationsparameter
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <_Z19setModulationParamsv+0x2c>)
 800224c:	607b      	str	r3, [r7, #4]
	uint8_t rx[4] = {0};
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set Modulation Params\r\n");  // SPI mit Debugger
 8002252:	463a      	mov	r2, r7
 8002254:	1d39      	adds	r1, r7, #4
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <_Z19setModulationParamsv+0x30>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2304      	movs	r3, #4
 800225c:	4806      	ldr	r0, [pc, #24]	@ (8002278 <_Z19setModulationParamsv+0x34>)
 800225e:	f7ff fe01 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f000 feea 	bl	800303c <HAL_Delay>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	0118708b 	.word	0x0118708b
 8002274:	08008edc 	.word	0x08008edc
 8002278:	2000024c 	.word	0x2000024c

0800227c <_Z15setPacketParamsv>:

// Funktion zum Setzen der Paketparameter
void setPacketParams() {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af02      	add	r7, sp, #8
	uint8_t tx[8] = {0x8C, 0x0C, 0x80, 0x08, 0x20, 0x40, 0x00, 0x00}; // Paketparameter
 8002282:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <_Z15setPacketParamsv+0x3c>)
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx[8] = {0};
 8002290:	2300      	movs	r3, #0
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 8, "Set Packet Params\r\n");  // SPI mit Debugger
 8002298:	463a      	mov	r2, r7
 800229a:	f107 0108 	add.w	r1, r7, #8
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <_Z15setPacketParamsv+0x40>)
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2308      	movs	r3, #8
 80022a4:	4806      	ldr	r0, [pc, #24]	@ (80022c0 <_Z15setPacketParamsv+0x44>)
 80022a6:	f7ff fddd 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f000 fec6 	bl	800303c <HAL_Delay>
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	08008f08 	.word	0x08008f08
 80022bc:	08008ef4 	.word	0x08008ef4
 80022c0:	2000024c 	.word	0x2000024c

080022c4 <_Z5setTxv>:
	uint8_t tx[3] = {0x8E, 0x1F, 0xE0}; // TX Periode
	uint8_t rx[3] = {0};
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 3, "Set TX Period\r\n");  // SPI mit Debugger
	HAL_Delay(10);
}
void setTx() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af02      	add	r7, sp, #8
	uint8_t tx[4] = {0x83, 0x00, 0x00, 0x00}; // TX Periode
 80022ca:	2383      	movs	r3, #131	@ 0x83
 80022cc:	607b      	str	r3, [r7, #4]
	uint8_t rx[4] = {0};
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 4, "Set TX\r\n");  // SPI mit Debugger
 80022d2:	463a      	mov	r2, r7
 80022d4:	1d39      	adds	r1, r7, #4
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <_Z5setTxv+0x2c>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2304      	movs	r3, #4
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <_Z5setTxv+0x30>)
 80022de:	f7ff fdc1 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 80022e2:	200a      	movs	r0, #10
 80022e4:	f000 feaa 	bl	800303c <HAL_Delay>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08008f24 	.word	0x08008f24
 80022f4:	2000024c 	.word	0x2000024c

080022f8 <_Z16InterruptSettingv>:
void InterruptSetting() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
    uint8_t tx[3] = {0};
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <_Z16InterruptSettingv+0x44>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	80bb      	strh	r3, [r7, #4]
 8002304:	2300      	movs	r3, #0
 8002306:	71bb      	strb	r3, [r7, #6]
    uint8_t rx[3] = {0};
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <_Z16InterruptSettingv+0x44>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	803b      	strh	r3, [r7, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	70bb      	strb	r3, [r7, #2]

    // SPI-Befehl: ClrIrqStatus
    tx[0] = 0x97;          // Opcode für ClrIrqStatus
 8002312:	2397      	movs	r3, #151	@ 0x97
 8002314:	713b      	strb	r3, [r7, #4]
    tx[1] = 0xFF;          // Alle Interrupt-Bits löschen (High-Byte)
 8002316:	23ff      	movs	r3, #255	@ 0xff
 8002318:	717b      	strb	r3, [r7, #5]
    tx[2] = 0xFF;          // Alle Interrupt-Bits löschen (Low-Byte)
 800231a:	23ff      	movs	r3, #255	@ 0xff
 800231c:	71bb      	strb	r3, [r7, #6]

    // Sende SPI-Befehl
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 3, "Clear interrupt Settings\r\n");  // SPI mit Debugger
 800231e:	463a      	mov	r2, r7
 8002320:	1d39      	adds	r1, r7, #4
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <_Z16InterruptSettingv+0x48>)
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2303      	movs	r3, #3
 8002328:	4806      	ldr	r0, [pc, #24]	@ (8002344 <_Z16InterruptSettingv+0x4c>)
 800232a:	f7ff fd9b 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 800232e:	200a      	movs	r0, #10
 8002330:	f000 fe84 	bl	800303c <HAL_Delay>

}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08008ed8 	.word	0x08008ed8
 8002340:	08008f30 	.word	0x08008f30
 8002344:	2000024c 	.word	0x2000024c

08002348 <_Z15setDioIrqParamstttt>:
void setDioIrqParams(uint16_t irqMask, uint16_t dioMask, uint16_t dio1Mask, uint16_t dio2Mask) {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b08b      	sub	sp, #44	@ 0x2c
 800234c:	af02      	add	r7, sp, #8
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	80fb      	strh	r3, [r7, #6]
 800235a:	4603      	mov	r3, r0
 800235c:	80bb      	strh	r3, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	803b      	strh	r3, [r7, #0]
    uint8_t tx[10] = {0};
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	809a      	strh	r2, [r3, #4]
    uint8_t rx[10] = {0};
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	809a      	strh	r2, [r3, #4]

    // SPI-Befehl: SetDioIrqParams
    tx[0] = 0x8D;               // Opcode für SetDioIrqParams
 8002382:	238d      	movs	r3, #141	@ 0x8d
 8002384:	753b      	strb	r3, [r7, #20]
    tx[1] = (irqMask >> 8);     // IRQ-Maske (High-Byte)
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	757b      	strb	r3, [r7, #21]
    tx[2] = (irqMask & 0xFF);   // IRQ-Maske (Low-Byte)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	75bb      	strb	r3, [r7, #22]
    tx[3] = (dioMask >> 8);     // DIO-Maske (High-Byte)
 8002396:	88bb      	ldrh	r3, [r7, #4]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	75fb      	strb	r3, [r7, #23]
    tx[4] = (dioMask & 0xFF);   // DIO-Maske (Low-Byte)
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	763b      	strb	r3, [r7, #24]
    tx[5] = (dio1Mask >> 8);    // DIO1-Maske (High-Byte)
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	767b      	strb	r3, [r7, #25]
    tx[6] = (dio1Mask & 0xFF);  // DIO1-Maske (Low-Byte)
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	76bb      	strb	r3, [r7, #26]
    tx[7] = (dio2Mask >> 8);    // DIO2-Maske (High-Byte)
 80023b6:	883b      	ldrh	r3, [r7, #0]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	76fb      	strb	r3, [r7, #27]
    tx[8] = (dio2Mask & 0xFF);  // DIO2-Maske (Low-Byte)
 80023c0:	883b      	ldrh	r3, [r7, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	773b      	strb	r3, [r7, #28]

    // Sende SPI-Befehl
	SPI_TransmitReceiveWithDebug(&hspi1, tx, rx, 9, "Set Irq Params\r\n");  // SPI mit Debugger
 80023c6:	f107 0208 	add.w	r2, r7, #8
 80023ca:	f107 0114 	add.w	r1, r7, #20
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <_Z15setDioIrqParamstttt+0xa0>)
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2309      	movs	r3, #9
 80023d4:	4805      	ldr	r0, [pc, #20]	@ (80023ec <_Z15setDioIrqParamstttt+0xa4>)
 80023d6:	f7ff fd45 	bl	8001e64 <_Z28SPI_TransmitReceiveWithDebugP19__SPI_HandleTypeDefPhS1_tPKc>
	HAL_Delay(10);
 80023da:	200a      	movs	r0, #10
 80023dc:	f000 fe2e 	bl	800303c <HAL_Delay>

}
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	@ 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	08008f4c 	.word	0x08008f4c
 80023ec:	2000024c 	.word	0x2000024c

080023f0 <_Z7DerTaktv>:
void DerTakt()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);   // NSS auf HIGH
 80023f4:	2201      	movs	r2, #1
 80023f6:	2140      	movs	r1, #64	@ 0x40
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <_Z7DerTaktv+0x3c>)
 80023fa:	f001 f8de 	bl	80035ba <HAL_GPIO_WritePin>
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	480a      	ldr	r0, [pc, #40]	@ (800242c <_Z7DerTaktv+0x3c>)
 8002402:	f001 f8bd 	bl	8003580 <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <_Z7DerTaktv+0x40>)
 800240c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 800240e:	2002      	movs	r0, #2
 8002410:	f000 fe14 	bl	800303c <HAL_Delay>
	SPI_WaitUntilReady(&hspi1);
 8002414:	4807      	ldr	r0, [pc, #28]	@ (8002434 <_Z7DerTaktv+0x44>)
 8002416:	f7ff fd49 	bl	8001eac <_Z18SPI_WaitUntilReadyP19__SPI_HandleTypeDef>
	HAL_Delay(2);
 800241a:	2002      	movs	r0, #2
 800241c:	f000 fe0e 	bl	800303c <HAL_Delay>
	SPI_WaitTransmit(&hspi1);
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <_Z7DerTaktv+0x44>)
 8002422:	f7ff fd93 	bl	8001f4c <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef>

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020400 	.word	0x40020400
 8002430:	200001f5 	.word	0x200001f5
 8002434:	2000024c 	.word	0x2000024c

08002438 <_Z11WriteBufferhPhh>:
//    //HalPreTx();
//    WriteCommand(RADIO_SET_TX, buf, sizeof(buf));
//    //OperatingMode = MODE_TX;
//}

void WriteBuffer(uint8_t offset, uint8_t *data, uint8_t length) {
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	b08d      	sub	sp, #52	@ 0x34
 800243e:	af02      	add	r7, sp, #8
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	4613      	mov	r3, r2
 8002448:	73bb      	strb	r3, [r7, #14]

    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n ", 4, HAL_MAX_DELAY);
	HAL_Delay(10);

}
 800244a:	466b      	mov	r3, sp
 800244c:	461e      	mov	r6, r3
    uint8_t txBuffer[length + 2];
 800244e:	7bbb      	ldrb	r3, [r7, #14]
 8002450:	1c99      	adds	r1, r3, #2
 8002452:	1e4b      	subs	r3, r1, #1
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	460a      	mov	r2, r1
 8002458:	2300      	movs	r3, #0
 800245a:	603a      	str	r2, [r7, #0]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	00c3      	lsls	r3, r0, #3
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	00c2      	lsls	r2, r0, #3
 8002474:	460a      	mov	r2, r1
 8002476:	2300      	movs	r3, #0
 8002478:	4692      	mov	sl, r2
 800247a:	469b      	mov	fp, r3
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800248c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002490:	460b      	mov	r3, r1
 8002492:	3307      	adds	r3, #7
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	ebad 0d03 	sub.w	sp, sp, r3
 800249c:	ab02      	add	r3, sp, #8
 800249e:	3300      	adds	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    uint8_t rxBuffer[length + 2];  // Empfangspuffer für Status
 80024a2:	7bbb      	ldrb	r3, [r7, #14]
 80024a4:	1c99      	adds	r1, r3, #2
 80024a6:	1e4b      	subs	r3, r1, #1
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	460a      	mov	r2, r1
 80024ac:	2300      	movs	r3, #0
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c6:	460a      	mov	r2, r1
 80024c8:	2300      	movs	r3, #0
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	00eb      	lsls	r3, r5, #3
 80024d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024dc:	00e2      	lsls	r2, r4, #3
 80024de:	460b      	mov	r3, r1
 80024e0:	3307      	adds	r3, #7
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	ebad 0d03 	sub.w	sp, sp, r3
 80024ea:	ab02      	add	r3, sp, #8
 80024ec:	3300      	adds	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
    txBuffer[0] = 0x1A;  // Opcode
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	221a      	movs	r2, #26
 80024f4:	701a      	strb	r2, [r3, #0]
    txBuffer[1] = offset;               // Offset
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < length; i++) {
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002502:	e00e      	b.n	8002522 <_Z11WriteBufferhPhh+0xea>
        txBuffer[i + 2] = data[i];      // Nutzdaten
 8002504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	441a      	add	r2, r3
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002510:	3302      	adds	r3, #2
 8002512:	7811      	ldrb	r1, [r2, #0]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8002518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800251c:	3301      	adds	r3, #1
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002522:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002526:	7bbb      	ldrb	r3, [r7, #14]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3eb      	bcc.n	8002504 <_Z11WriteBufferhPhh+0xcc>
    HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, length + 2, HAL_MAX_DELAY);
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	b29b      	uxth	r3, r3
 8002530:	3302      	adds	r3, #2
 8002532:	b29b      	uxth	r3, r3
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002538:	9200      	str	r2, [sp, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	69f9      	ldr	r1, [r7, #28]
 800253e:	4819      	ldr	r0, [pc, #100]	@ (80025a4 <_Z11WriteBufferhPhh+0x16c>)
 8002540:	f002 fa6e 	bl	8004a20 <HAL_SPI_TransmitReceive>
    for (uint8_t i = 0; i < length + 2; i++) {
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800254a:	e015      	b.n	8002578 <_Z11WriteBufferhPhh+0x140>
        HAL_UART_Transmit(&huart2,(uint8_t*)&rxBuffer[i], 1, HAL_MAX_DELAY);
 800254c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	18d1      	adds	r1, r2, r3
 8002554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002558:	2201      	movs	r2, #1
 800255a:	4813      	ldr	r0, [pc, #76]	@ (80025a8 <_Z11WriteBufferhPhh+0x170>)
 800255c:	f003 fac5 	bl	8005aea <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)" ", 1, HAL_MAX_DELAY);
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002564:	2201      	movs	r2, #1
 8002566:	4911      	ldr	r1, [pc, #68]	@ (80025ac <_Z11WriteBufferhPhh+0x174>)
 8002568:	480f      	ldr	r0, [pc, #60]	@ (80025a8 <_Z11WriteBufferhPhh+0x170>)
 800256a:	f003 fabe 	bl	8005aea <HAL_UART_Transmit>
    for (uint8_t i = 0; i < length + 2; i++) {
 800256e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002572:	3301      	adds	r3, #1
 8002574:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002580:	429a      	cmp	r2, r3
 8002582:	dae3      	bge.n	800254c <_Z11WriteBufferhPhh+0x114>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n ", 4, HAL_MAX_DELAY);
 8002584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002588:	2204      	movs	r2, #4
 800258a:	4909      	ldr	r1, [pc, #36]	@ (80025b0 <_Z11WriteBufferhPhh+0x178>)
 800258c:	4806      	ldr	r0, [pc, #24]	@ (80025a8 <_Z11WriteBufferhPhh+0x170>)
 800258e:	f003 faac 	bl	8005aea <HAL_UART_Transmit>
	HAL_Delay(10);
 8002592:	200a      	movs	r0, #10
 8002594:	f000 fd52 	bl	800303c <HAL_Delay>
 8002598:	46b5      	mov	sp, r6
}
 800259a:	bf00      	nop
 800259c:	372c      	adds	r7, #44	@ 0x2c
 800259e:	46bd      	mov	sp, r7
 80025a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a4:	2000024c 	.word	0x2000024c
 80025a8:	200002ec 	.word	0x200002ec
 80025ac:	08008f60 	.word	0x08008f60
 80025b0:	08008f64 	.word	0x08008f64

080025b4 <_Z11SendPayloadhPhh>:

void SendPayload( uint8_t offset, uint8_t *data, uint8_t length) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71bb      	strb	r3, [r7, #6]
    WriteBuffer(offset, data, length);
 80025c4:	79ba      	ldrb	r2, [r7, #6]
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff34 	bl	8002438 <_Z11WriteBufferhPhh>
    DerTakt();
 80025d0:	f7ff ff0e 	bl	80023f0 <_Z7DerTaktv>
	setTx();
 80025d4:	f7ff fe76 	bl	80022c4 <_Z5setTxv>

}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_Z9PutPacketPh>:

// Die Funktion zum Einfügen eines Pakets
uint8_t PutPacket(uint8_t* in)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    //TickTime_t timeout = {RADIO_TICK_SIZE_1_US,0};  // Beispielwerte, anpassen
    uint8_t offset = 0x80;
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	72fb      	strb	r3, [r7, #11]
    // Fehlerbehandlung für NULL-Pointer
    if (in == NULL) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <_Z9PutPacketPh+0x16>
        return NULL_POINTER; // Eingabepuffer ist NULL
 80025f2:	2302      	movs	r3, #2
 80025f4:	e039      	b.n	800266a <_Z9PutPacketPh+0x8a>
    }

    // FIFO-Überlaufprüfung
    if (tx_length == FIFO_SIZE) {
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <_Z9PutPacketPh+0x94>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d101      	bne.n	8002602 <_Z9PutPacketPh+0x22>
        return FIFO_OVERFLOW; // FIFO ist voll
 80025fe:	2301      	movs	r3, #1
 8002600:	e033      	b.n	800266a <_Z9PutPacketPh+0x8a>
    }

    // Paket in FIFO einfügen
    for (int i = 0; i < PACKET_SIZE; i++) {
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e00b      	b.n	8002620 <_Z9PutPacketPh+0x40>
        *(tx_eprt + i) = *(in + i);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	441a      	add	r2, r3
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <_Z9PutPacketPh+0x98>)
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	440b      	add	r3, r1
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PACKET_SIZE; i++) {
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b07      	cmp	r3, #7
 8002624:	ddf0      	ble.n	8002608 <_Z9PutPacketPh+0x28>
    }

    // FIFO-Pointer zyklisch bewegen
    if (tx_eprt == &tx_fifo[FIFO_SIZE - 1][0]) {
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <_Z9PutPacketPh+0x98>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <_Z9PutPacketPh+0x9c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d103      	bne.n	8002638 <_Z9PutPacketPh+0x58>
        tx_eprt = tx_fifo[0];  // Zurück zum Anfang des FIFOs
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <_Z9PutPacketPh+0x98>)
 8002632:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <_Z9PutPacketPh+0xa0>)
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e004      	b.n	8002642 <_Z9PutPacketPh+0x62>
    } else {
        tx_eprt += PACKET_SIZE; // Nächstes Paket im FIFO
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <_Z9PutPacketPh+0x98>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3308      	adds	r3, #8
 800263e:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <_Z9PutPacketPh+0x98>)
 8002640:	6013      	str	r3, [r2, #0]
    }

    // FIFO-Länge erhöhen
    tx_length++;
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <_Z9PutPacketPh+0x94>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <_Z9PutPacketPh+0x94>)
 800264c:	701a      	strb	r2, [r3, #0]

    // Wenn der Transmitter noch nicht aktiviert ist, beginne mit der Übertragung
    if (tx_length == 1) {  // Erster Paket, Sendeanforderung
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <_Z9PutPacketPh+0x94>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <_Z9PutPacketPh+0x82>
        // SendPayload aufrufen, um das erste Paket zu übertragen
    	SendPayload(offset, tx_fifo[0], PACKET_SIZE);
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	2208      	movs	r2, #8
 800265a:	4909      	ldr	r1, [pc, #36]	@ (8002680 <_Z9PutPacketPh+0xa0>)
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ffa9 	bl	80025b4 <_Z11SendPayloadhPhh>
    }
	HAL_Delay(10);
 8002662:	200a      	movs	r0, #10
 8002664:	f000 fcea 	bl	800303c <HAL_Delay>

    return 0; // Erfolgreich eingefügt
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000248 	.word	0x20000248
 8002678:	20000000 	.word	0x20000000
 800267c:	20000240 	.word	0x20000240
 8002680:	200001f8 	.word	0x200001f8

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	//Erase_Flash();

    uint8_t data[PACKET_SIZE] = {1, 2, 3, 4, 5, 6, 7, 8};  // Beispiel-Daten
 800268a:	4a4f      	ldr	r2, [pc, #316]	@ (80027c8 <main+0x144>)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002692:	e883 0003 	stmia.w	r3, {r0, r1}
	int i=0;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269a:	f000 fc57 	bl	8002f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269e:	f000 f8a3 	bl	80027e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a2:	f000 fa1b 	bl	8002adc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80026a6:	f000 f9eb 	bl	8002a80 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 80026aa:	f000 f915 	bl	80028d8 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80026ae:	f000 f94f 	bl	8002950 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 80026b2:	4846      	ldr	r0, [pc, #280]	@ (80027cc <main+0x148>)
 80026b4:	f002 fd14 	bl	80050e0 <HAL_TIM_Base_Start>
	ResetChip(GPIOC, GPIO_PIN_7);
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	4845      	ldr	r0, [pc, #276]	@ (80027d0 <main+0x14c>)
 80026bc:	f7ff fb98 	bl	8001df0 <_Z9ResetChipP12GPIO_TypeDeft>
	HAL_Delay(5);
 80026c0:	2005      	movs	r0, #5
 80026c2:	f000 fcbb 	bl	800303c <HAL_Delay>
	/*=======================================================================*/
	//NSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSSNSS
	/*=======================================================================*/

	// NSS Test
	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	2140      	movs	r1, #64	@ 0x40
 80026ca:	4842      	ldr	r0, [pc, #264]	@ (80027d4 <main+0x150>)
 80026cc:	f7ff fbb5 	bl	8001e3a <_Z10SelectChipP12GPIO_TypeDeft13GPIO_PinState>
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 80026d0:	2140      	movs	r1, #64	@ 0x40
 80026d2:	4840      	ldr	r0, [pc, #256]	@ (80027d4 <main+0x150>)
 80026d4:	f000 ff54 	bl	8003580 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b3e      	ldr	r3, [pc, #248]	@ (80027d8 <main+0x154>)
 80026de:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5);
 80026e0:	2005      	movs	r0, #5
 80026e2:	f000 fcab 	bl	800303c <HAL_Delay>

	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2140      	movs	r1, #64	@ 0x40
 80026ea:	483a      	ldr	r0, [pc, #232]	@ (80027d4 <main+0x150>)
 80026ec:	f7ff fba5 	bl	8001e3a <_Z10SelectChipP12GPIO_TypeDeft13GPIO_PinState>
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 80026f0:	2140      	movs	r1, #64	@ 0x40
 80026f2:	4838      	ldr	r0, [pc, #224]	@ (80027d4 <main+0x150>)
 80026f4:	f000 ff44 	bl	8003580 <HAL_GPIO_ReadPin>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b36      	ldr	r3, [pc, #216]	@ (80027d8 <main+0x154>)
 80026fe:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5);
 8002700:	2005      	movs	r0, #5
 8002702:	f000 fc9b 	bl	800303c <HAL_Delay>

	SelectChip(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	2140      	movs	r1, #64	@ 0x40
 800270a:	4832      	ldr	r0, [pc, #200]	@ (80027d4 <main+0x150>)
 800270c:	f7ff fb95 	bl	8001e3a <_Z10SelectChipP12GPIO_TypeDeft13GPIO_PinState>
	nss = uint8_t(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6));
 8002710:	2140      	movs	r1, #64	@ 0x40
 8002712:	4830      	ldr	r0, [pc, #192]	@ (80027d4 <main+0x150>)
 8002714:	f000 ff34 	bl	8003580 <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	4b2e      	ldr	r3, [pc, #184]	@ (80027d8 <main+0x154>)
 800271e:	701a      	strb	r2, [r3, #0]
	//SPI_WaitUntilReady(&hspi1);

	SPI_WaitTransmit(&hspi1);
 8002720:	482e      	ldr	r0, [pc, #184]	@ (80027dc <main+0x158>)
 8002722:	f7ff fc13 	bl	8001f4c <_Z16SPI_WaitTransmitP19__SPI_HandleTypeDef>


	SetStandby();
 8002726:	f7ff fc89 	bl	800203c <_Z10SetStandbyv>
	HAL_Delay(5);
 800272a:	2005      	movs	r0, #5
 800272c:	f000 fc86 	bl	800303c <HAL_Delay>

	DerTakt();
 8002730:	f7ff fe5e 	bl	80023f0 <_Z7DerTaktv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		while(i!=3)
 8002734:	e040      	b.n	80027b8 <main+0x134>
		{
		GetStatus();
 8002736:	f7ff fc67 	bl	8002008 <_Z9GetStatusv>

		DerTakt();
 800273a:	f7ff fe59 	bl	80023f0 <_Z7DerTaktv>

		setLoRaMode();
 800273e:	f7ff fc93 	bl	8002068 <_Z11setLoRaModev>
		// LoRa Modus setzen
		DerTakt();
 8002742:	f7ff fe55 	bl	80023f0 <_Z7DerTaktv>

		getPacketType(&hspi1);
 8002746:	4825      	ldr	r0, [pc, #148]	@ (80027dc <main+0x158>)
 8002748:	f7ff fcae 	bl	80020a8 <_Z13getPacketTypeP19__SPI_HandleTypeDef>

		DerTakt();
 800274c:	f7ff fe50 	bl	80023f0 <_Z7DerTaktv>

		setTx();
 8002750:	f7ff fdb8 	bl	80022c4 <_Z5setTxv>

		DerTakt();
 8002754:	f7ff fe4c 	bl	80023f0 <_Z7DerTaktv>

		GetStatus();
 8002758:	f7ff fc56 	bl	8002008 <_Z9GetStatusv>

		DerTakt();
 800275c:	f7ff fe48 	bl	80023f0 <_Z7DerTaktv>

		setFrequency();
 8002760:	f7ff fd2c 	bl	80021bc <_Z12setFrequencyv>
		// Frequenz setzen
		DerTakt();
 8002764:	f7ff fe44 	bl	80023f0 <_Z7DerTaktv>


		setBufferBaseAddress(); // Basisadresse setzen
 8002768:	f7ff fd44 	bl	80021f4 <_Z20setBufferBaseAddressv>

		DerTakt();
 800276c:	f7ff fe40 	bl	80023f0 <_Z7DerTaktv>


		setModulationParams();  // Modulationsparameter setzen
 8002770:	f7ff fd68 	bl	8002244 <_Z19setModulationParamsv>

		DerTakt();
 8002774:	f7ff fe3c 	bl	80023f0 <_Z7DerTaktv>


		setPacketParams();
 8002778:	f7ff fd80 	bl	800227c <_Z15setPacketParamsv>

		DerTakt();
 800277c:	f7ff fe38 	bl	80023f0 <_Z7DerTaktv>
		//SPI_WaitTransmit(&hspi1);

	//	setTxParams();
	//	DerTakt();

		InterruptSetting();
 8002780:	f7ff fdba 	bl	80022f8 <_Z16InterruptSettingv>
		DerTakt();
 8002784:	f7ff fe34 	bl	80023f0 <_Z7DerTaktv>

		setDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
 8002788:	2300      	movs	r3, #0
 800278a:	2200      	movs	r2, #0
 800278c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002790:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002794:	f7ff fdd8 	bl	8002348 <_Z15setDioIrqParamstttt>

		DerTakt();
 8002798:	f7ff fe2a 	bl	80023f0 <_Z7DerTaktv>

		i++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n" ,4, HAL_MAX_DELAY);
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027a6:	2204      	movs	r2, #4
 80027a8:	490d      	ldr	r1, [pc, #52]	@ (80027e0 <main+0x15c>)
 80027aa:	480e      	ldr	r0, [pc, #56]	@ (80027e4 <main+0x160>)
 80027ac:	f003 f99d 	bl	8005aea <HAL_UART_Transmit>


	    HAL_Delay(500);
 80027b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027b4:	f000 fc42 	bl	800303c <HAL_Delay>
		while(i!=3)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d1bb      	bne.n	8002736 <main+0xb2>

		}


    	PutPacket(data);
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff0d 	bl	80025e0 <_Z9PutPacketPh>
		while(i!=3)
 80027c6:	e7f7      	b.n	80027b8 <main+0x134>
 80027c8:	08008f68 	.word	0x08008f68
 80027cc:	200002a4 	.word	0x200002a4
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020400 	.word	0x40020400
 80027d8:	200001f5 	.word	0x200001f5
 80027dc:	2000024c 	.word	0x2000024c
 80027e0:	08008e9c 	.word	0x08008e9c
 80027e4:	200002ec 	.word	0x200002ec

080027e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	@ 0x50
 80027ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2234      	movs	r2, #52	@ 0x34
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fb91 	bl	8006f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <_Z18SystemClock_Configv+0xe8>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	4a2e      	ldr	r2, [pc, #184]	@ (80028d0 <_Z18SystemClock_Configv+0xe8>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	@ 0x40
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <_Z18SystemClock_Configv+0xe8>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002828:	2300      	movs	r3, #0
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <_Z18SystemClock_Configv+0xec>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002834:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <_Z18SystemClock_Configv+0xec>)
 8002836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <_Z18SystemClock_Configv+0xec>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002848:	2302      	movs	r3, #2
 800284a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800284c:	2301      	movs	r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002850:	2310      	movs	r3, #16
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002854:	2302      	movs	r3, #2
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800285c:	2308      	movs	r3, #8
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002860:	2350      	movs	r3, #80	@ 0x50
 8002862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002864:	2302      	movs	r3, #2
 8002866:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002868:	2302      	movs	r3, #2
 800286a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800286c:	2302      	movs	r3, #2
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fa3b 	bl	8003cf0 <HAL_RCC_OscConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800288a:	f000 f9d9 	bl	8002c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288e:	230f      	movs	r3, #15
 8002890:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002892:	2302      	movs	r3, #2
 8002894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800289a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800289e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80028a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	2102      	movs	r1, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe9d 	bl	80035ec <HAL_RCC_ClockConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80028c2:	f000 f9bd 	bl	8002c40 <Error_Handler>
  }
}
 80028c6:	bf00      	nop
 80028c8:	3750      	adds	r7, #80	@ 0x50
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000

080028d8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028de:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <_ZL12MX_SPI1_Initv+0x74>)
 80028e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002902:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 8002904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 800290c:	2200      	movs	r2, #0
 800290e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 8002924:	220a      	movs	r2, #10
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002928:	4807      	ldr	r0, [pc, #28]	@ (8002948 <_ZL12MX_SPI1_Initv+0x70>)
 800292a:	f001 fd27 	bl	800437c <HAL_SPI_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800293e:	f000 f97f 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000024c 	.word	0x2000024c
 800294c:	40013000 	.word	0x40013000

08002950 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b092      	sub	sp, #72	@ 0x48
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002956:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2220      	movs	r2, #32
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f004 facf 	bl	8006f1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002980:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002982:	4a3e      	ldr	r2, [pc, #248]	@ (8002a7c <_ZL12MX_TIM1_Initv+0x12c>)
 8002984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002986:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002988:	2200      	movs	r2, #0
 800298a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002992:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002998:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299a:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029a0:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029ac:	4832      	ldr	r0, [pc, #200]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 80029ae:	f002 fc03 	bl	80051b8 <HAL_TIM_PWM_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80029c2:	f000 f93d 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029d2:	4619      	mov	r1, r3
 80029d4:	4828      	ldr	r0, [pc, #160]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 80029d6:	f002 ff65 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80029ea:	f000 f929 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ee:	2360      	movs	r3, #96	@ 0x60
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029fa:	2300      	movs	r3, #0
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0e:	2208      	movs	r2, #8
 8002a10:	4619      	mov	r1, r3
 8002a12:	4819      	ldr	r0, [pc, #100]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002a14:	f002 fc24 	bl	8005260 <HAL_TIM_PWM_ConfigChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002a28:	f000 f90a 	bl	8002c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480a      	ldr	r0, [pc, #40]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002a50:	f002 ffa4 	bl	800599c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8002a64:	f000 f8ec 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a68:	4803      	ldr	r0, [pc, #12]	@ (8002a78 <_ZL12MX_TIM1_Initv+0x128>)
 8002a6a:	f000 f981 	bl	8002d70 <HAL_TIM_MspPostInit>

}
 8002a6e:	bf00      	nop
 8002a70:	3748      	adds	r7, #72	@ 0x48
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200002a4 	.word	0x200002a4
 8002a7c:	40010000 	.word	0x40010000

08002a80 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a86:	4a14      	ldr	r2, [pc, #80]	@ (8002ad8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ab6:	4807      	ldr	r0, [pc, #28]	@ (8002ad4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ab8:	f002 ffc2 	bl	8005a40 <HAL_UART_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002acc:	f000 f8b8 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200002ec 	.word	0x200002ec
 8002ad8:	40004400 	.word	0x40004400

08002adc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a4d      	ldr	r2, [pc, #308]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a46      	ldr	r2, [pc, #280]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	4a3f      	ldr	r2, [pc, #252]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a38      	ldr	r2, [pc, #224]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <_ZL12MX_GPIO_Initv+0x154>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2102      	movs	r1, #2
 8002b66:	4833      	ldr	r0, [pc, #204]	@ (8002c34 <_ZL12MX_GPIO_Initv+0x158>)
 8002b68:	f000 fd27 	bl	80035ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	@ 0x80
 8002b70:	4831      	ldr	r0, [pc, #196]	@ (8002c38 <_ZL12MX_GPIO_Initv+0x15c>)
 8002b72:	f000 fd22 	bl	80035ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2140      	movs	r1, #64	@ 0x40
 8002b7a:	4830      	ldr	r0, [pc, #192]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x160>)
 8002b7c:	f000 fd1d 	bl	80035ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	4828      	ldr	r0, [pc, #160]	@ (8002c38 <_ZL12MX_GPIO_Initv+0x15c>)
 8002b98:	f000 fb5e 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8002b9c:	f240 2301 	movw	r3, #513	@ 0x201
 8002ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4820      	ldr	r0, [pc, #128]	@ (8002c34 <_ZL12MX_GPIO_Initv+0x158>)
 8002bb2:	f000 fb51 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4819      	ldr	r0, [pc, #100]	@ (8002c34 <_ZL12MX_GPIO_Initv+0x158>)
 8002bce:	f000 fb43 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4813      	ldr	r0, [pc, #76]	@ (8002c38 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bea:	f000 fb35 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <_ZL12MX_GPIO_Initv+0x158>)
 8002c06:	f000 fb27 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c0a:	2340      	movs	r3, #64	@ 0x40
 8002c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <_ZL12MX_GPIO_Initv+0x160>)
 8002c22:	f000 fb19 	bl	8003258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	@ 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020400 	.word	0x40020400

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <Error_Handler+0x8>

08002c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f000 fab0 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_SPI_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12b      	bne.n	8002d16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cf6:	23e0      	movs	r3, #224	@ 0xe0
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d06:	2305      	movs	r3, #5
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <HAL_SPI_MspInit+0x8c>)
 8002d12:	f000 faa1 	bl	8003258 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	@ 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40013000 	.word	0x40013000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000

08002d2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	@ (8002d68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10d      	bne.n	8002d5a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x40>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x40>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <HAL_TIM_PWM_MspInit+0x40>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <HAL_TIM_MspPostInit+0x68>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d11e      	bne.n	8002dd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_TIM_MspPostInit+0x6c>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <HAL_TIM_MspPostInit+0x6c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <HAL_TIM_MspPostInit+0x70>)
 8002dcc:	f000 fa44 	bl	8003258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020000 	.word	0x40020000

08002de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_UART_MspInit+0x84>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12b      	bne.n	8002e5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a10      	ldr	r2, [pc, #64]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_UART_MspInit+0x88>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e3e:	230c      	movs	r3, #12
 8002e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <HAL_UART_MspInit+0x8c>)
 8002e5a:	f000 f9fd 	bl	8003258 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40004400 	.word	0x40004400
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020000 	.word	0x40020000

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x4>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eca:	f000 f897 	bl	8002ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed8:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <SystemInit+0x20>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <SystemInit+0x20>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002efc:	f7ff ffea 	bl	8002ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f00:	480c      	ldr	r0, [pc, #48]	@ (8002f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f02:	490d      	ldr	r1, [pc, #52]	@ (8002f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f04:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f08:	e002      	b.n	8002f10 <LoopCopyDataInit>

08002f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0e:	3304      	adds	r3, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f14:	d3f9      	bcc.n	8002f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f18:	4c0a      	ldr	r4, [pc, #40]	@ (8002f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f1c:	e001      	b.n	8002f22 <LoopFillZerobss>

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f20:	3204      	adds	r2, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f26:	f004 f8a1 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2a:	f7ff fbab 	bl	8002684 <main>
  bx  lr    
 8002f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f38:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f3c:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8002f40:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f44:	20000488 	.word	0x20000488

08002f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f48:	e7fe      	b.n	8002f48 <ADC_IRQHandler>
	...

08002f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f50:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <HAL_Init+0x40>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_Init+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <HAL_Init+0x40>)
 8002f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f68:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <HAL_Init+0x40>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <HAL_Init+0x40>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f74:	2003      	movs	r0, #3
 8002f76:	f000 f93b 	bl	80031f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f808 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f80:	f7ff fe64 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00

08002f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f98:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_InitTick+0x60>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_InitTick+0x64>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f945 	bl	800323e <HAL_SYSTICK_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e00e      	b.n	8002fe6 <HAL_InitTick+0x56>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d80a      	bhi.n	8002fe4 <HAL_InitTick+0x54>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fd6:	f000 f916 	bl	8003206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fda:	4a07      	ldr	r2, [pc, #28]	@ (8002ff8 <HAL_InitTick+0x68>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_InitTick+0x56>
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	20000008 	.word	0x20000008

08002ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_IncTick+0x20>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_IncTick+0x24>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4413      	add	r3, r2
 800300c:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <HAL_IncTick+0x24>)
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000334 	.word	0x20000334

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <HAL_GetTick+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000334 	.word	0x20000334

0800303c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff ffee 	bl	8003024 <HAL_GetTick>
 8003048:	4603      	mov	r3, r0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003056:	d005      	beq.n	8003064 <HAL_Delay+0x28>
  {
    wait += (uint32_t)(uwTickFreq);
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <HAL_Delay+0x50>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003064:	bf00      	nop
 8003066:	f7ff ffdd 	bl	8003024 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	bf8c      	ite	hi
 8003076:	2301      	movhi	r3, #1
 8003078:	2300      	movls	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_Delay+0x2a>
  {
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000000c 	.word	0x2000000c

08003090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c2:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <__NVIC_GetPriorityGrouping+0x18>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0307 	and.w	r3, r3, #7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	@ (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	@ (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	@ 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	2201      	movs	r2, #1
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	401a      	ands	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318e:	2101      	movs	r1, #1
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
         );
 800319c:	4313      	orrs	r3, r2
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	@ 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031bc:	d301      	bcc.n	80031c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <SysTick_Config+0x40>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ca:	210f      	movs	r1, #15
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031d0:	f7ff ff90 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <SysTick_Config+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <SysTick_Config+0x40>)
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff49 	bl	8003090 <__NVIC_SetPriorityGrouping>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff5e 	bl	80030d8 <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff90 	bl	8003148 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5f 	bl	80030f4 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffb0 	bl	80031ac <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	@ 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e165      	b.n	8003540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003274:	2201      	movs	r2, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	f040 8154 	bne.w	800353a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d005      	beq.n	80032aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d130      	bne.n	800330c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 0201 	and.w	r2, r3, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b03      	cmp	r3, #3
 8003316:	d017      	beq.n	8003348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d123      	bne.n	800339c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	69b9      	ldr	r1, [r7, #24]
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80ae 	beq.w	800353a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003558 <HAL_GPIO_Init+0x300>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003558 <HAL_GPIO_Init+0x300>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003558 <HAL_GPIO_Init+0x300>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fa:	4a58      	ldr	r2, [pc, #352]	@ (800355c <HAL_GPIO_Init+0x304>)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	3302      	adds	r3, #2
 8003402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	220f      	movs	r2, #15
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a4f      	ldr	r2, [pc, #316]	@ (8003560 <HAL_GPIO_Init+0x308>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d025      	beq.n	8003472 <HAL_GPIO_Init+0x21a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a4e      	ldr	r2, [pc, #312]	@ (8003564 <HAL_GPIO_Init+0x30c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <HAL_GPIO_Init+0x216>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4d      	ldr	r2, [pc, #308]	@ (8003568 <HAL_GPIO_Init+0x310>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d019      	beq.n	800346a <HAL_GPIO_Init+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4c      	ldr	r2, [pc, #304]	@ (800356c <HAL_GPIO_Init+0x314>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4b      	ldr	r2, [pc, #300]	@ (8003570 <HAL_GPIO_Init+0x318>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x20a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4a      	ldr	r2, [pc, #296]	@ (8003574 <HAL_GPIO_Init+0x31c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x206>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a49      	ldr	r2, [pc, #292]	@ (8003578 <HAL_GPIO_Init+0x320>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x202>
 8003456:	2306      	movs	r3, #6
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800345a:	2307      	movs	r3, #7
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x21c>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	@ (800355c <HAL_GPIO_Init+0x304>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_GPIO_Init+0x324>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a31      	ldr	r2, [pc, #196]	@ (800357c <HAL_GPIO_Init+0x324>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b2f      	ldr	r3, [pc, #188]	@ (800357c <HAL_GPIO_Init+0x324>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a26      	ldr	r2, [pc, #152]	@ (800357c <HAL_GPIO_Init+0x324>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e6:	4b25      	ldr	r3, [pc, #148]	@ (800357c <HAL_GPIO_Init+0x324>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350a:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <HAL_GPIO_Init+0x324>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <HAL_GPIO_Init+0x324>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003534:	4a11      	ldr	r2, [pc, #68]	@ (800357c <HAL_GPIO_Init+0x324>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae96 	bls.w	8003274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	@ 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_GPIO_ReadPin+0x28>
  {
    bitstatus = GPIO_PIN_SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e001      	b.n	80035ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	807b      	strh	r3, [r7, #2]
 80035c6:	4613      	mov	r3, r2
 80035c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ca:	787b      	ldrb	r3, [r7, #1]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d6:	e003      	b.n	80035e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	041a      	lsls	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0fa      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b7f      	ldr	r3, [pc, #508]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf8c      	ite	hi
 800360e:	2301      	movhi	r3, #1
 8003610:	2300      	movls	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <HAL_RCC_ClockConfig+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4b79      	ldr	r3, [pc, #484]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x50>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0dc      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_ClockConfig+0x9e>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x74>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003654:	4b6b      	ldr	r3, [pc, #428]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a6a      	ldr	r2, [pc, #424]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800365a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800365e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x8c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800366c:	4b65      	ldr	r3, [pc, #404]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a64      	ldr	r2, [pc, #400]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 8003672:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b62      	ldr	r3, [pc, #392]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	495f      	ldr	r1, [pc, #380]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d05e      	beq.n	8003754 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09e      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xdc>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xf6>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00e      	beq.n	80036fc <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e089      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e2:	4b48      	ldr	r3, [pc, #288]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x110>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e07c      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fc:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 0203 	bic.w	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	493e      	ldr	r1, [pc, #248]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370e:	f7ff fc89 	bl	8003024 <HAL_GetTick>
 8003712:	4603      	mov	r3, r0
 8003714:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00f      	b.n	8003738 <HAL_RCC_ClockConfig+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7ff fc84 	bl	8003024 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	bf8c      	ite	hi
 800372a:	2301      	movhi	r3, #1
 800372c:	2300      	movls	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x14c>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e05e      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003738:	4b32      	ldr	r3, [pc, #200]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 020c 	and.w	r2, r3, #12
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	429a      	cmp	r2, r3
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e1      	bne.n	8003718 <HAL_RCC_ClockConfig+0x12c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	bf34      	ite	cc
 8003762:	2301      	movcc	r3, #1
 8003764:	2300      	movcs	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <HAL_RCC_ClockConfig+0x1a4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376c:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003774:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_RCC_ClockConfig+0x214>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x1a4>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x20a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x1c2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f855 	bl	800387c <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x218>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x21c>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x220>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x224>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fbce 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	08008f70 	.word	0x08008f70
 800380c:	20000004 	.word	0x20000004
 8003810:	20000008 	.word	0x20000008

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <HAL_RCC_GetHCLKFreq+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff0 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	08008f80 	.word	0x08008f80

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffdc 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	08008f80 	.word	0x08008f80

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003880:	b0ae      	sub	sp, #184	@ 0xb8
 8003882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a2:	4bd0      	ldr	r3, [pc, #832]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	f200 8210 	bhi.w	8003cd0 <HAL_RCC_GetSysClockFreq+0x454>
 80038b0:	a201      	add	r2, pc, #4	@ (adr r2, 80038b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	08003cd1 	.word	0x08003cd1
 80038c0:	08003cd1 	.word	0x08003cd1
 80038c4:	08003cd1 	.word	0x08003cd1
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	08003cd1 	.word	0x08003cd1
 80038d0:	08003cd1 	.word	0x08003cd1
 80038d4:	08003cd1 	.word	0x08003cd1
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003cd1 	.word	0x08003cd1
 80038e0:	08003cd1 	.word	0x08003cd1
 80038e4:	08003cd1 	.word	0x08003cd1
 80038e8:	08003af7 	.word	0x08003af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4bbe      	ldr	r3, [pc, #760]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x36c>)
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038f2:	e1f1      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f4:	4bbd      	ldr	r3, [pc, #756]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x370>)
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038fa:	e1ed      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4bb9      	ldr	r3, [pc, #740]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003908:	4bb6      	ldr	r3, [pc, #728]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d071      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x186>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4bb1      	ldr	r3, [pc, #708]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800392a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800392e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003940:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003944:	4622      	mov	r2, r4
 8003946:	462b      	mov	r3, r5
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	0159      	lsls	r1, r3, #5
 8003952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003956:	0150      	lsls	r0, r2, #5
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4621      	mov	r1, r4
 800395e:	1a51      	subs	r1, r2, r1
 8003960:	6439      	str	r1, [r7, #64]	@ 0x40
 8003962:	4629      	mov	r1, r5
 8003964:	eb63 0301 	sbc.w	r3, r3, r1
 8003968:	647b      	str	r3, [r7, #68]	@ 0x44
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003976:	4649      	mov	r1, r9
 8003978:	018b      	lsls	r3, r1, #6
 800397a:	4641      	mov	r1, r8
 800397c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003980:	4641      	mov	r1, r8
 8003982:	018a      	lsls	r2, r1, #6
 8003984:	4641      	mov	r1, r8
 8003986:	1a51      	subs	r1, r2, r1
 8003988:	63b9      	str	r1, [r7, #56]	@ 0x38
 800398a:	4649      	mov	r1, r9
 800398c:	eb63 0301 	sbc.w	r3, r3, r1
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800399e:	4649      	mov	r1, r9
 80039a0:	00cb      	lsls	r3, r1, #3
 80039a2:	4641      	mov	r1, r8
 80039a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a8:	4641      	mov	r1, r8
 80039aa:	00ca      	lsls	r2, r1, #3
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	4603      	mov	r3, r0
 80039b2:	4622      	mov	r2, r4
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80039b8:	462b      	mov	r3, r5
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ce:	4629      	mov	r1, r5
 80039d0:	024b      	lsls	r3, r1, #9
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039d8:	4621      	mov	r1, r4
 80039da:	024a      	lsls	r2, r1, #9
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039ea:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80039f2:	f7fd f8f9 	bl	8000be8 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4613      	mov	r3, r2
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a00:	e067      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x256>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b78      	ldr	r3, [pc, #480]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a0e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a20:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a24:	4622      	mov	r2, r4
 8003a26:	462b      	mov	r3, r5
 8003a28:	f04f 0000 	mov.w	r0, #0
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	0159      	lsls	r1, r3, #5
 8003a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a36:	0150      	lsls	r0, r2, #5
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	1a51      	subs	r1, r2, r1
 8003a40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a42:	4629      	mov	r1, r5
 8003a44:	eb63 0301 	sbc.w	r3, r3, r1
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a56:	4649      	mov	r1, r9
 8003a58:	018b      	lsls	r3, r1, #6
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a60:	4641      	mov	r1, r8
 8003a62:	018a      	lsls	r2, r1, #6
 8003a64:	4641      	mov	r1, r8
 8003a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a84:	4692      	mov	sl, r2
 8003a86:	469b      	mov	fp, r3
 8003a88:	4623      	mov	r3, r4
 8003a8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	462b      	mov	r3, r5
 8003a92:	eb4b 0303 	adc.w	r3, fp, r3
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	028b      	lsls	r3, r1, #10
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aae:	4621      	mov	r1, r4
 8003ab0:	028a      	lsls	r2, r1, #10
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aba:	2200      	movs	r2, #0
 8003abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ac0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ac4:	f7fd f890 	bl	8000be8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ad2:	4b44      	ldr	r3, [pc, #272]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	3301      	adds	r3, #1
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003ae4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003af4:	e0f0      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af6:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b02:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d06b      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x374>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b18:	4b32      	ldr	r3, [pc, #200]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x368>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	2200      	movs	r2, #0
 8003b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b34:	4622      	mov	r2, r4
 8003b36:	462b      	mov	r3, r5
 8003b38:	f04f 0000 	mov.w	r0, #0
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	0159      	lsls	r1, r3, #5
 8003b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b46:	0150      	lsls	r0, r2, #5
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	1a51      	subs	r1, r2, r1
 8003b50:	61b9      	str	r1, [r7, #24]
 8003b52:	4629      	mov	r1, r5
 8003b54:	eb63 0301 	sbc.w	r3, r3, r1
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b66:	4659      	mov	r1, fp
 8003b68:	018b      	lsls	r3, r1, #6
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b70:	4651      	mov	r1, sl
 8003b72:	018a      	lsls	r2, r1, #6
 8003b74:	4651      	mov	r1, sl
 8003b76:	ebb2 0801 	subs.w	r8, r2, r1
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b94:	4690      	mov	r8, r2
 8003b96:	4699      	mov	r9, r3
 8003b98:	4623      	mov	r3, r4
 8003b9a:	eb18 0303 	adds.w	r3, r8, r3
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	eb49 0303 	adc.w	r3, r9, r3
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	024b      	lsls	r3, r1, #9
 8003bb8:	4621      	mov	r1, r4
 8003bba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	024a      	lsls	r2, r1, #9
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bca:	2200      	movs	r2, #0
 8003bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bd4:	f7fd f808 	bl	8000be8 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003be2:	e065      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x434>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x46c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c02:	2300      	movs	r3, #0
 8003c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4641      	mov	r1, r8
 8003c24:	1a51      	subs	r1, r2, r1
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4649      	mov	r1, r9
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	018b      	lsls	r3, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c46:	4651      	mov	r1, sl
 8003c48:	018a      	lsls	r2, r1, #6
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	1a54      	subs	r4, r2, r1
 8003c4e:	4659      	mov	r1, fp
 8003c50:	eb63 0501 	sbc.w	r5, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	00eb      	lsls	r3, r5, #3
 8003c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c62:	00e2      	lsls	r2, r4, #3
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	18e3      	adds	r3, r4, r3
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	464b      	mov	r3, r9
 8003c70:	eb45 0303 	adc.w	r3, r5, r3
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c82:	4629      	mov	r1, r5
 8003c84:	028b      	lsls	r3, r1, #10
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	028a      	lsls	r2, r1, #10
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c98:	2200      	movs	r2, #0
 8003c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ca2:	f7fc ffa1 	bl	8000be8 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4613      	mov	r3, r2
 8003cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x46c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0f1b      	lsrs	r3, r3, #28
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x45c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x470>)
 8003cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	37b8      	adds	r7, #184	@ 0xb8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e334      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a1 	beq.w	8003e52 <HAL_RCC_OscConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d10:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCC_OscConfig+0x60>
 8003d1c:	4b93      	ldr	r3, [pc, #588]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d28:	4b90      	ldr	r3, [pc, #576]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4b8d      	ldr	r3, [pc, #564]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_OscConfig+0x64>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b8a      	ldr	r3, [pc, #552]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_OscConfig+0x64>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x66>
 8003d54:	2300      	movs	r3, #0
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5a:	4b84      	ldr	r3, [pc, #528]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_RCC_OscConfig+0x82>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x82>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x84>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d06c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e2f7      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0xa4>
 8003d86:	4b79      	ldr	r3, [pc, #484]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a78      	ldr	r2, [pc, #480]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e01d      	b.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0xc8>
 8003d9e:	4b73      	ldr	r3, [pc, #460]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a72      	ldr	r2, [pc, #456]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6f      	ldr	r2, [pc, #444]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
 8003db8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b69      	ldr	r3, [pc, #420]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a68      	ldr	r2, [pc, #416]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01e      	beq.n	8003e16 <HAL_RCC_OscConfig+0x126>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7ff f924 	bl	8003024 <HAL_GetTick>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de0:	e00d      	b.n	8003dfe <HAL_RCC_OscConfig+0x10e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de2:	f7ff f91f 	bl	8003024 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	@ 0x64
 8003dee:	bf8c      	ite	hi
 8003df0:	2301      	movhi	r3, #1
 8003df2:	2300      	movls	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e2b6      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e6      	bne.n	8003de2 <HAL_RCC_OscConfig+0xf2>
 8003e14:	e01d      	b.n	8003e52 <HAL_RCC_OscConfig+0x162>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7ff f905 	bl	8003024 <HAL_GetTick>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e00d      	b.n	8003e3c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7ff f900 	bl	8003024 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	bf8c      	ite	hi
 8003e2e:	2301      	movhi	r3, #1
 8003e30:	2300      	movls	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e297      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e6      	bne.n	8003e20 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8095 	beq.w	8003f8a <HAL_RCC_OscConfig+0x29a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e60:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d017      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1ac>
 8003e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x194>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e78:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1ac>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e84:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x1b0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x1b0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1b2>
 8003ea0:	2300      	movs	r3, #0
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01b      	beq.n	8003ede <HAL_RCC_OscConfig+0x1ee>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1ce>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1ce>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1d0>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1d8>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e251      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec8:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4925      	ldr	r1, [pc, #148]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e055      	b.n	8003f8a <HAL_RCC_OscConfig+0x29a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x24e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee6:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7ff f89a 	bl	8003024 <HAL_GetTick>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	e00d      	b.n	8003f12 <HAL_RCC_OscConfig+0x222>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7ff f895 	bl	8003024 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	bf8c      	ite	hi
 8003f04:	2301      	movhi	r3, #1
 8003f06:	2300      	movls	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e22c      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e6      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x206>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	490d      	ldr	r1, [pc, #52]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e025      	b.n	8003f8a <HAL_RCC_OscConfig+0x29a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <HAL_RCC_OscConfig+0x280>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7ff f86e 	bl	8003024 <HAL_GetTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4c:	e012      	b.n	8003f74 <HAL_RCC_OscConfig+0x284>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7ff f869 	bl	8003024 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	bf8c      	ite	hi
 8003f5c:	2301      	movhi	r3, #1
 8003f5e:	2300      	movls	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e200      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	42470000 	.word	0x42470000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f74:	4b86      	ldr	r3, [pc, #536]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e1      	bne.n	8003f4e <HAL_RCC_OscConfig+0x25e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d046      	beq.n	8004024 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d021      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004194 <HAL_RCC_OscConfig+0x4a4>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7ff f83e 	bl	8003024 <HAL_GetTick>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fac:	e00d      	b.n	8003fca <HAL_RCC_OscConfig+0x2da>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fae:	f7ff f839 	bl	8003024 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	bf8c      	ite	hi
 8003fbc:	2301      	movhi	r3, #1
 8003fbe:	2300      	movls	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1d0      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b71      	ldr	r3, [pc, #452]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e6      	bne.n	8003fae <HAL_RCC_OscConfig+0x2be>
 8003fe0:	e020      	b.n	8004024 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8004194 <HAL_RCC_OscConfig+0x4a4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7ff f81c 	bl	8003024 <HAL_GetTick>
 8003fec:	4603      	mov	r3, r0
 8003fee:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	e00d      	b.n	800400e <HAL_RCC_OscConfig+0x31e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7ff f817 	bl	8003024 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	bf8c      	ite	hi
 8004000:	2301      	movhi	r3, #1
 8004002:	2300      	movls	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x31e>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1ae      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400e:	4b60      	ldr	r3, [pc, #384]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80c9 	beq.w	80041c4 <HAL_RCC_OscConfig+0x4d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004036:	4b56      	ldr	r3, [pc, #344]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <HAL_RCC_OscConfig+0x37c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	4b4f      	ldr	r3, [pc, #316]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	4a4e      	ldr	r2, [pc, #312]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405a:	6413      	str	r3, [r2, #64]	@ 0x40
 800405c:	4b4c      	ldr	r3, [pc, #304]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	4b4a      	ldr	r3, [pc, #296]	@ (8004198 <HAL_RCC_OscConfig+0x4a8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d023      	beq.n	80040ca <HAL_RCC_OscConfig+0x3da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b45      	ldr	r3, [pc, #276]	@ (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a44      	ldr	r2, [pc, #272]	@ (8004198 <HAL_RCC_OscConfig+0x4a8>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fe ffc9 	bl	8003024 <HAL_GetTick>
 8004092:	4603      	mov	r3, r0
 8004094:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	e00d      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fe ffc4 	bl	8003024 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	bf8c      	ite	hi
 80040a6:	2301      	movhi	r3, #1
 80040a8:	2300      	movls	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e15b      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <HAL_RCC_OscConfig+0x4a8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e6      	bne.n	8004098 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x3f0>
 80040d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040de:	e01c      	b.n	800411a <HAL_RCC_OscConfig+0x42a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0x412>
 80040e8:	4b29      	ldr	r3, [pc, #164]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a28      	ldr	r2, [pc, #160]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a25      	ldr	r2, [pc, #148]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x42a>
 8004102:	4b23      	ldr	r3, [pc, #140]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004106:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6713      	str	r3, [r2, #112]	@ 0x70
 800410e:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	4a1f      	ldr	r2, [pc, #124]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004122:	f7fe ff7f 	bl	8003024 <HAL_GetTick>
 8004126:	4603      	mov	r3, r0
 8004128:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	e00f      	b.n	800414c <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412c:	f7fe ff7a 	bl	8003024 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	bf8c      	ite	hi
 800413e:	2301      	movhi	r3, #1
 8004140:	2300      	movls	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e10f      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCC_OscConfig+0x4a0>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e4      	bne.n	800412c <HAL_RCC_OscConfig+0x43c>
 8004162:	e026      	b.n	80041b2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fe ff5e 	bl	8003024 <HAL_GetTick>
 8004168:	4603      	mov	r3, r0
 800416a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416c:	e016      	b.n	800419c <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe ff59 	bl	8003024 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	bf8c      	ite	hi
 8004180:	2301      	movhi	r3, #1
 8004182:	2300      	movls	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0ee      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	42470e80 	.word	0x42470e80
 8004198:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	4b75      	ldr	r3, [pc, #468]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1dd      	bne.n	800416e <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80ce 	beq.w	800436a <HAL_RCC_OscConfig+0x67a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b69      	ldr	r3, [pc, #420]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8082 	beq.w	80042ea <HAL_RCC_OscConfig+0x5fa>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d15b      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5b6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b62      	ldr	r3, [pc, #392]	@ (8004378 <HAL_RCC_OscConfig+0x688>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe ff16 	bl	8003024 <HAL_GetTick>
 80041f8:	4603      	mov	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fc:	e00d      	b.n	800421a <HAL_RCC_OscConfig+0x52a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fe ff11 	bl	8003024 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	bf8c      	ite	hi
 800420c:	2301      	movhi	r3, #1
 800420e:	2300      	movls	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0a8      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b56      	ldr	r3, [pc, #344]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <HAL_RCC_OscConfig+0x50e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	019b      	lsls	r3, r3, #6
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	3b01      	subs	r3, #1
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	071b      	lsls	r3, r3, #28
 800425c:	4945      	ldr	r1, [pc, #276]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004262:	4b45      	ldr	r3, [pc, #276]	@ (8004378 <HAL_RCC_OscConfig+0x688>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fedc 	bl	8003024 <HAL_GetTick>
 800426c:	4603      	mov	r3, r0
 800426e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004270:	e00d      	b.n	800428e <HAL_RCC_OscConfig+0x59e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fe fed7 	bl	8003024 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	bf8c      	ite	hi
 8004280:	2301      	movhi	r3, #1
 8004282:	2300      	movls	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e06e      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <HAL_RCC_OscConfig+0x582>
 80042a4:	e061      	b.n	800436a <HAL_RCC_OscConfig+0x67a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b34      	ldr	r3, [pc, #208]	@ (8004378 <HAL_RCC_OscConfig+0x688>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe feba 	bl	8003024 <HAL_GetTick>
 80042b0:	4603      	mov	r3, r0
 80042b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b4:	e00d      	b.n	80042d2 <HAL_RCC_OscConfig+0x5e2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe feb5 	bl	8003024 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	bf8c      	ite	hi
 80042c4:	2301      	movhi	r3, #1
 80042c6:	2300      	movls	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x5e2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04c      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf14      	ite	ne
 80042de:	2301      	movne	r3, #1
 80042e0:	2300      	moveq	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <HAL_RCC_OscConfig+0x5c6>
 80042e8:	e03f      	b.n	800436a <HAL_RCC_OscConfig+0x67a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x606>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e03a      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <HAL_RCC_OscConfig+0x684>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d030      	beq.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d129      	bne.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d122      	bne.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432e:	4293      	cmp	r3, r2
 8004330:	d119      	bne.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	3b01      	subs	r3, #1
 8004340:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_OscConfig+0x676>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x67a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	42470060 	.word	0x42470060

0800437c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e080      	b.n	8004490 <HAL_SPI_Init+0x114>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800439e:	d009      	beq.n	80043b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <HAL_SPI_Init+0x62>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fe fc5f 	bl	8002c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004442:	ea42 0103 	orr.w	r1, r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	f003 0104 	and.w	r1, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	f003 0210 	and.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a8:	f7fe fdbc 	bl	8003024 <HAL_GetTick>
 80044ac:	4603      	mov	r3, r0
 80044ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e157      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Transmit+0x42>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e14f      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_SPI_Transmit+0x54>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e148      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2203      	movs	r2, #3
 80044f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d10f      	bne.n	800455c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800455a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b40      	cmp	r3, #64	@ 0x40
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458c:	d161      	bne.n	8004652 <HAL_SPI_Transmit+0x1ba>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Transmit+0x104>
 8004596:	8b7b      	ldrh	r3, [r7, #26]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d14f      	bne.n	800463c <HAL_SPI_Transmit+0x1a4>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	881a      	ldrh	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	1c9a      	adds	r2, r3, #2
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045c0:	e03c      	b.n	800463c <HAL_SPI_Transmit+0x1a4>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045fe:	e01d      	b.n	800463c <HAL_SPI_Transmit+0x1a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004600:	f7fe fd10 	bl	8003024 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_Transmit+0x180>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004616:	d102      	bne.n	800461e <HAL_SPI_Transmit+0x186>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Transmit+0x18a>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_SPI_Transmit+0x18c>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_SPI_Transmit+0x1a4>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e0a0      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
    while (hspi->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1b8      	bne.n	80045c2 <HAL_SPI_Transmit+0x12a>
 8004650:	e062      	b.n	8004718 <HAL_SPI_Transmit+0x280>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Transmit+0x1c8>
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d151      	bne.n	8004704 <HAL_SPI_Transmit+0x26c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	7812      	ldrb	r2, [r2, #0]
 800466c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004686:	e03d      	b.n	8004704 <HAL_SPI_Transmit+0x26c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_SPI_Transmit+0x230>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046c6:	e01d      	b.n	8004704 <HAL_SPI_Transmit+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c8:	f7fe fcac 	bl	8003024 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d803      	bhi.n	80046e0 <HAL_SPI_Transmit+0x248>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046de:	d102      	bne.n	80046e6 <HAL_SPI_Transmit+0x24e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Transmit+0x252>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_SPI_Transmit+0x254>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_SPI_Transmit+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e03c      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
    while (hspi->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1b7      	bne.n	8004688 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fc71 	bl	8005004 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_Transmit+0x2a0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <HAL_SPI_Transmit+0x2be>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_SPI_Transmit+0x2e4>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_SPI_Transmit+0x2e6>
  }
  else
  {
    return HAL_OK;
 800477c:	2300      	movs	r3, #0
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af02      	add	r7, sp, #8
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_SPI_Receive+0x2a>
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
 80047ae:	e133      	b.n	8004a18 <HAL_SPI_Receive+0x292>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b8:	d112      	bne.n	80047e0 <HAL_SPI_Receive+0x5a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2204      	movs	r2, #4
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f922 	bl	8004a20 <HAL_SPI_TransmitReceive>
 80047dc:	4603      	mov	r3, r0
 80047de:	e11b      	b.n	8004a18 <HAL_SPI_Receive+0x292>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e0:	f7fe fc20 	bl	8003024 <HAL_GetTick>
 80047e4:	4603      	mov	r3, r0
 80047e6:	617b      	str	r3, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_SPI_Receive+0x6e>
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_SPI_Receive+0x72>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e10f      	b.n	8004a18 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_SPI_Receive+0x80>
 8004802:	2302      	movs	r3, #2
 8004804:	e108      	b.n	8004a18 <HAL_SPI_Receive+0x292>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2204      	movs	r2, #4
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004854:	d10f      	bne.n	8004876 <HAL_SPI_Receive+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004864:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_SPI_Receive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800489c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 808a 	bne.w	80049bc <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048a8:	e03f      	b.n	800492a <HAL_SPI_Receive+0x1a4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d015      	beq.n	80048ee <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f103 020c 	add.w	r2, r3, #12
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048ec:	e01d      	b.n	800492a <HAL_SPI_Receive+0x1a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ee:	f7fe fb99 	bl	8003024 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d803      	bhi.n	8004906 <HAL_SPI_Receive+0x180>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004904:	d102      	bne.n	800490c <HAL_SPI_Receive+0x186>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_SPI_Receive+0x18a>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_SPI_Receive+0x18c>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_SPI_Receive+0x1a4>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e076      	b.n	8004a18 <HAL_SPI_Receive+0x292>
    while (hspi->RxXferCount > 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1b5      	bne.n	80048aa <HAL_SPI_Receive+0x124>
 800493e:	e047      	b.n	80049d0 <HAL_SPI_Receive+0x24a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_SPI_Receive+0x1fa>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	b292      	uxth	r2, r2
 8004964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800497e:	e01d      	b.n	80049bc <HAL_SPI_Receive+0x236>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004980:	f7fe fb50 	bl	8003024 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_Receive+0x212>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004996:	d102      	bne.n	800499e <HAL_SPI_Receive+0x218>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_SPI_Receive+0x21c>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_SPI_Receive+0x21e>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <HAL_SPI_Receive+0x236>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e02d      	b.n	8004a18 <HAL_SPI_Receive+0x292>
    while (hspi->RxXferCount > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1b7      	bne.n	8004940 <HAL_SPI_Receive+0x1ba>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 faa1 	bl	8004f1c <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_SPI_Receive+0x290>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_SPI_Receive+0x292>
  }
  else
  {
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	@ 0x28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a32:	f7fe faf7 	bl	8003024 <HAL_GetTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d00c      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x4c>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a58:	d106      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x48>
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d001      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x4c>
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e1bd      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x5e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x5e>
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x62>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1b2      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x70>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e1ab      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0x96>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2205      	movs	r2, #5
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	887a      	ldrh	r2, [r7, #2]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b40      	cmp	r3, #64	@ 0x40
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b1c:	f040 8093 	bne.w	8004c46 <HAL_SPI_TransmitReceive+0x226>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x10e>
 8004b28:	8afb      	ldrh	r3, [r7, #22]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d17b      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x206>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	881a      	ldrh	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	1c9a      	adds	r2, r3, #2
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b52:	e068      	b.n	8004c26 <HAL_SPI_TransmitReceive+0x206>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d109      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x156>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x156>
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x156>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x158>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x184>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d106      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x1a0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x1a0>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_SPI_TransmitReceive+0x1a2>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d014      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bec:	2301      	movs	r3, #1
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bf0:	f7fe fa18 	bl	8003024 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d805      	bhi.n	8004c0c <HAL_SPI_TransmitReceive+0x1ec>
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c06:	d001      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x1ec>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x1ee>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x206>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0e0      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x21a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x21e>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <HAL_SPI_TransmitReceive+0x220>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d187      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x134>
 8004c44:	e097      	b.n	8004d76 <HAL_SPI_TransmitReceive+0x356>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x236>
 8004c4e:	8afb      	ldrh	r3, [r7, #22]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 8081 	bne.w	8004d58 <HAL_SPI_TransmitReceive+0x338>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7c:	e06c      	b.n	8004d58 <HAL_SPI_TransmitReceive+0x338>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d109      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x280>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x280>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x280>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x282>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d014      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x2b0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d106      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x2cc>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x2cc>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_SPI_TransmitReceive+0x2ce>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d014      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x2fc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d1c:	f7fe f982 	bl	8003024 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_TransmitReceive+0x314>
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x31a>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x31e>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_SPI_TransmitReceive+0x320>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x338>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e047      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x34c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x350>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x352>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d183      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x25e>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f942 	bl	8005004 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x382>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e022      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x3c6>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x3c8>
  }
  else
  {
    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	@ 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e00:	f7fe f910 	bl	8003024 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e10:	f7fe f908 	bl	8003024 <HAL_GetTick>
 8004e14:	4603      	mov	r3, r0
 8004e16:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e18:	4b3f      	ldr	r3, [pc, #252]	@ (8004f18 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x128>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	015b      	lsls	r3, r3, #5
 8004e1e:	0d1b      	lsrs	r3, r3, #20
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e28:	e05e      	b.n	8004ee8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xf8>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e30:	d05a      	beq.n	8004ee8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xf8>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e32:	f7fe f8f7 	bl	8003024 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d902      	bls.n	8004e48 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x58>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x5c>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x5e>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d03d      	beq.n	8004ece <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xde>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6a:	d111      	bne.n	8004e90 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xa0>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e74:	d004      	beq.n	8004e80 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x90>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d107      	bne.n	8004e90 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xa0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e98:	d10f      	bne.n	8004eba <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xca>
        {
          SPI_RESET_CRC(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e020      	b.n	8004f10 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0xf2>
      {
        tmp_timeout = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d101      	bne.n	8004efc <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x10c>
 8004ef8:	2201      	movs	r2, #1
 8004efa:	e000      	b.n	8004efe <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x10e>
 8004efc:	2200      	movs	r2, #0
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d18d      	bne.n	8004e2a <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm+0x3a>
    }
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000004 	.word	0x20000004

08004f1c <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f30:	d111      	bne.n	8004f56 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0x3a>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3a:	d004      	beq.n	8004f46 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f44:	d107      	bne.n	8004f56 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5e:	d134      	bne.n	8004fca <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xae>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d017      	beq.n	8004f9a <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2180      	movs	r1, #128	@ 0x80
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff ff3b 	bl	8004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d037      	beq.n	8004ffa <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xde>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e030      	b.n	8004ffc <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xe0>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff ff23 	bl	8004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01f      	beq.n	8004ffa <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xde>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e018      	b.n	8004ffc <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xe0>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff ff0b 	bl	8004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xde>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e000      	b.n	8004ffc <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefmm+0xe0>
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2201      	movs	r2, #1
 8005018:	2102      	movs	r1, #2
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fee8 	bl	8004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e046      	b.n	80050ce <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xca>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005040:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xd4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a25      	ldr	r2, [pc, #148]	@ (80050dc <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xd8>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0d5b      	lsrs	r3, r3, #21
 800504c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505e:	d117      	bne.n	8005090 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0x8c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	2180      	movs	r1, #128	@ 0x80
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff fec0 	bl	8004df0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusmm>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d025      	beq.n	80050cc <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xc8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e01e      	b.n	80050ce <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xca>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d114      	bne.n	80050ca <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xc6>
      {
        break;
      }
      count--;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b0:	2b80      	cmp	r3, #128	@ 0x80
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e3      	bne.n	8005090 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0x8c>
 80050c8:	e000      	b.n	80050cc <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefmm+0xc8>
        break;
 80050ca:	bf00      	nop
  }

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000004 	.word	0x20000004
 80050dc:	165e9f81 	.word	0x165e9f81

080050e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_TIM_Base_Start+0x22>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e046      	b.n	8005190 <HAL_TIM_Base_Start+0xb0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a23      	ldr	r2, [pc, #140]	@ (800519c <HAL_TIM_Base_Start+0xbc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d01d      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1f      	ldr	r2, [pc, #124]	@ (80051a0 <HAL_TIM_Base_Start+0xc0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d018      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <HAL_TIM_Base_Start+0xc4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <HAL_TIM_Base_Start+0xc8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1a      	ldr	r2, [pc, #104]	@ (80051ac <HAL_TIM_Base_Start+0xcc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a19      	ldr	r2, [pc, #100]	@ (80051b0 <HAL_TIM_Base_Start+0xd0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_TIM_Base_Start+0x7a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <HAL_TIM_Base_Start+0xd4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d111      	bne.n	800517e <HAL_TIM_Base_Start+0x9e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d010      	beq.n	800518e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	e007      	b.n	800518e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40010000 	.word	0x40010000
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40010400 	.word	0x40010400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40001800 	.word	0x40001800

080051b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e046      	b.n	8005258 <HAL_TIM_PWM_Init+0xa0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <HAL_TIM_PWM_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fd fd9f 	bl	8002d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f000 f8ef 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800527a:	2302      	movs	r3, #2
 800527c:	e0ae      	b.n	80053dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	f200 809f 	bhi.w	80053cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080053cd 	.word	0x080053cd
 800529c:	080053cd 	.word	0x080053cd
 80052a0:	080053cd 	.word	0x080053cd
 80052a4:	08005309 	.word	0x08005309
 80052a8:	080053cd 	.word	0x080053cd
 80052ac:	080053cd 	.word	0x080053cd
 80052b0:	080053cd 	.word	0x080053cd
 80052b4:	0800534b 	.word	0x0800534b
 80052b8:	080053cd 	.word	0x080053cd
 80052bc:	080053cd 	.word	0x080053cd
 80052c0:	080053cd 	.word	0x080053cd
 80052c4:	0800538b 	.word	0x0800538b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f938 	bl	8005544 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0208 	orr.w	r2, r2, #8
 80052e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0204 	bic.w	r2, r2, #4
 80052f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6999      	ldr	r1, [r3, #24]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	619a      	str	r2, [r3, #24]
      break;
 8005306:	e064      	b.n	80053d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f988 	bl	8005624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6999      	ldr	r1, [r3, #24]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	021a      	lsls	r2, r3, #8
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
      break;
 8005348:	e043      	b.n	80053d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f9dd 	bl	8005710 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0208 	orr.w	r2, r2, #8
 8005364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0204 	bic.w	r2, r2, #4
 8005374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69d9      	ldr	r1, [r3, #28]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	61da      	str	r2, [r3, #28]
      break;
 8005388:	e023      	b.n	80053d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fa31 	bl	80057f8 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69d9      	ldr	r1, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	61da      	str	r2, [r3, #28]
      break;
 80053ca:	e002      	b.n	80053d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	75fb      	strb	r3, [r7, #23]
      break;
 80053d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a48      	ldr	r2, [pc, #288]	@ (8005518 <TIM_Base_SetConfig+0x134>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005402:	d00f      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a45      	ldr	r2, [pc, #276]	@ (800551c <TIM_Base_SetConfig+0x138>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a44      	ldr	r2, [pc, #272]	@ (8005520 <TIM_Base_SetConfig+0x13c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a43      	ldr	r2, [pc, #268]	@ (8005524 <TIM_Base_SetConfig+0x140>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a42      	ldr	r2, [pc, #264]	@ (8005528 <TIM_Base_SetConfig+0x144>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d108      	bne.n	8005436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a37      	ldr	r2, [pc, #220]	@ (8005518 <TIM_Base_SetConfig+0x134>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005444:	d027      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a34      	ldr	r2, [pc, #208]	@ (800551c <TIM_Base_SetConfig+0x138>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d023      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a33      	ldr	r2, [pc, #204]	@ (8005520 <TIM_Base_SetConfig+0x13c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01f      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a32      	ldr	r2, [pc, #200]	@ (8005524 <TIM_Base_SetConfig+0x140>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a31      	ldr	r2, [pc, #196]	@ (8005528 <TIM_Base_SetConfig+0x144>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a30      	ldr	r2, [pc, #192]	@ (800552c <TIM_Base_SetConfig+0x148>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	@ (8005530 <TIM_Base_SetConfig+0x14c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <TIM_Base_SetConfig+0x150>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <TIM_Base_SetConfig+0x154>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	@ (800553c <TIM_Base_SetConfig+0x158>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	@ (8005540 <TIM_Base_SetConfig+0x15c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <TIM_Base_SetConfig+0x134>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0xf8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a14      	ldr	r2, [pc, #80]	@ (8005528 <TIM_Base_SetConfig+0x144>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d103      	bne.n	80054e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <TIM_Base_SetConfig+0x128>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f023 0201 	bic.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	611a      	str	r2, [r3, #16]
  }
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800
 8005538:	40001800 	.word	0x40001800
 800553c:	40001c00 	.word	0x40001c00
 8005540:	40002000 	.word	0x40002000

08005544 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f023 0201 	bic.w	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a20      	ldr	r2, [pc, #128]	@ (800561c <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xd8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x64>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xdc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10c      	bne.n	80055c2 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0308 	bic.w	r3, r3, #8
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0304 	bic.w	r3, r3, #4
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	@ (800561c <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x8e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a14      	ldr	r2, [pc, #80]	@ (8005620 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xdc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40010000 	.word	0x40010000
 8005620:	40010400 	.word	0x40010400

08005624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0210 	bic.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <TIM_OC2_SetConfig+0xe4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_OC2_SetConfig+0x68>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a21      	ldr	r2, [pc, #132]	@ (800570c <TIM_OC2_SetConfig+0xe8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10d      	bne.n	80056a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <TIM_OC2_SetConfig+0xe4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC2_SetConfig+0x94>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a16      	ldr	r2, [pc, #88]	@ (800570c <TIM_OC2_SetConfig+0xe8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d113      	bne.n	80056e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a21      	ldr	r2, [pc, #132]	@ (80057f0 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x66>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a20      	ldr	r2, [pc, #128]	@ (80057f4 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10d      	bne.n	8005792 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800577c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x92>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xe4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d113      	bne.n	80057ca <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400

080057f8 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a12      	ldr	r2, [pc, #72]	@ (800589c <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xa4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x68>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0xa8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d109      	bne.n	8005874 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefPK18TIM_OC_InitTypeDef+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e05a      	b.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d01d      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1d      	ldr	r2, [pc, #116]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1b      	ldr	r2, [pc, #108]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1a      	ldr	r2, [pc, #104]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a18      	ldr	r2, [pc, #96]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10c      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40001800 	.word	0x40001800

0800599c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e03d      	b.n	8005a34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e047      	b.n	8005ae2 <HAL_UART_Init+0xa2>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <HAL_UART_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fd f9b7 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2224      	movs	r2, #36	@ 0x24
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9b4 	bl	8005dfc <_ZL14UART_SetConfigP20__UART_HandleTypeDef>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aa2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ab2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b08a      	sub	sp, #40	@ 0x28
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8086 	beq.w	8005c22 <HAL_UART_Transmit+0x138>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UART_Transmit+0x38>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07e      	b.n	8005c24 <HAL_UART_Transmit+0x13a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2221      	movs	r2, #33	@ 0x21
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b34:	f7fd fa76 	bl	8003024 <HAL_GetTick>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b50:	d108      	bne.n	8005b64 <HAL_UART_Transmit+0x7a>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <HAL_UART_Transmit+0x7a>
    {
      pdata8bits  = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e003      	b.n	8005b6c <HAL_UART_Transmit+0x82>
    }
    else
    {
      pdata8bits  = pData;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b6c:	e033      	b.n	8005bd6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f857 	bl	8005c2c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_Transmit+0xb0>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e044      	b.n	8005c24 <HAL_UART_Transmit+0x13a>
      }
      if (pdata8bits == NULL)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e007      	b.n	8005bc8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1c1      	bne.n	8005b6e <HAL_UART_Transmit+0x84>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	@ 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f819 	bl	8005c2c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e006      	b.n	8005c24 <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3c:	e04f      	b.n	8005cde <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c44:	d04b      	beq.n	8005cde <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fd f9ed 	bl	8003024 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	6a3a      	ldr	r2, [r7, #32]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x30>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x34>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x36>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x3e>
      {

        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e04d      	b.n	8005d06 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xda>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b80      	cmp	r3, #128	@ 0x80
 8005c7c:	d004      	beq.n	8005c88 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b40      	cmp	r3, #64	@ 0x40
 8005c82:	d001      	beq.n	8005c88 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5c>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x5e>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d027      	beq.n	8005cde <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xb2>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f821 	bl	8005d0e <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2208      	movs	r2, #8
 8005cd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e013      	b.n	8005d06 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xda>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d101      	bne.n	8005cf2 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xc6>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	e000      	b.n	8005cf4 <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0xc8>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d19c      	bne.n	8005c3e <_ZL27UART_WaitOnFlagUntilTimeoutP20__UART_HandleTypeDefm10FlagStatusmm+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b095      	sub	sp, #84	@ 0x54
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e0      	bne.n	8005d16 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e0      	bne.n	8005d54 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x46>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01e      	beq.n	8005de2 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0xd4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc4:	61ba      	str	r2, [r7, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e0      	bne.n	8005da4 <_ZL18UART_EndRxTransferP20__UART_HandleTypeDef+0x96>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df0:	bf00      	nop
 8005df2:	3754      	adds	r7, #84	@ 0x54
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <_ZL14UART_SetConfigP20__UART_HandleTypeDef>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e00:	b0c0      	sub	sp, #256	@ 0x100
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	68d9      	ldr	r1, [r3, #12]
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	ea40 0301 	orr.w	r3, r0, r1
 8005e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e54:	f021 010c 	bic.w	r1, r1, #12
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e62:	430b      	orrs	r3, r1
 8005e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	6999      	ldr	r1, [r3, #24]
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	ea40 0301 	orr.w	r3, r0, r1
 8005e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b90      	ldr	r3, [pc, #576]	@ (80060cc <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d0>)
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d005      	beq.n	8005e9c <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xa0>
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b8e      	ldr	r3, [pc, #568]	@ (80060d0 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d4>)
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d105      	bne.n	8005ea8 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xac>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e9c:	f7fd fcda 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ea6:	e004      	b.n	8005eb2 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fd fcc0 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	f040 810c 	bne.w	80060d8 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2dc>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eda:	415b      	adcs	r3, r3
 8005edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	eb12 0801 	adds.w	r8, r2, r1
 8005ee8:	4629      	mov	r1, r5
 8005eea:	eb43 0901 	adc.w	r9, r3, r1
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f02:	4690      	mov	r8, r2
 8005f04:	4699      	mov	r9, r3
 8005f06:	4623      	mov	r3, r4
 8005f08:	eb18 0303 	adds.w	r3, r8, r3
 8005f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f10:	462b      	mov	r3, r5
 8005f12:	eb49 0303 	adc.w	r3, r9, r3
 8005f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f2e:	460b      	mov	r3, r1
 8005f30:	18db      	adds	r3, r3, r3
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f34:	4613      	mov	r3, r2
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f44:	f7fa fe50 	bl	8000be8 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b61      	ldr	r3, [pc, #388]	@ (80060d4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011c      	lsls	r4, r3, #4
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f70:	415b      	adcs	r3, r3
 8005f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f78:	4641      	mov	r1, r8
 8005f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f7e:	4649      	mov	r1, r9
 8005f80:	eb43 0b01 	adc.w	fp, r3, r1
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f98:	4692      	mov	sl, r2
 8005f9a:	469b      	mov	fp, r3
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	18db      	adds	r3, r3, r3
 8005fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fca:	4613      	mov	r3, r2
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fda:	f7fa fe05 	bl	8000be8 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80060d4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2264      	movs	r2, #100	@ 0x64
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	1acb      	subs	r3, r1, r3
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ffa:	4b36      	ldr	r3, [pc, #216]	@ (80060d4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 8005ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006008:	441c      	add	r4, r3
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006024:	415b      	adcs	r3, r3
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6339      	str	r1, [r7, #48]	@ 0x30
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800607c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006080:	460b      	mov	r3, r1
 8006082:	18db      	adds	r3, r3, r3
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006086:	4613      	mov	r3, r2
 8006088:	eb42 0303 	adc.w	r3, r2, r3
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006096:	f7fa fda7 	bl	8000be8 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	@ 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3332      	adds	r3, #50	@ 0x32
 80060b2:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x2d8>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4422      	add	r2, r4
 80060c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060c8:	e106      	b.n	80062d8 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4dc>
 80060ca:	bf00      	nop
 80060cc:	40011000 	.word	0x40011000
 80060d0:	40011400 	.word	0x40011400
 80060d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ea:	4642      	mov	r2, r8
 80060ec:	464b      	mov	r3, r9
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	6239      	str	r1, [r7, #32]
 80060f2:	415b      	adcs	r3, r3
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060fa:	4641      	mov	r1, r8
 80060fc:	1854      	adds	r4, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb43 0501 	adc.w	r5, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	00eb      	lsls	r3, r5, #3
 800610e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006112:	00e2      	lsls	r2, r4, #3
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	4643      	mov	r3, r8
 800611a:	18e3      	adds	r3, r4, r3
 800611c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006120:	464b      	mov	r3, r9
 8006122:	eb45 0303 	adc.w	r3, r5, r3
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006146:	4629      	mov	r1, r5
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	4621      	mov	r1, r4
 800614c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006150:	4621      	mov	r1, r4
 8006152:	008a      	lsls	r2, r1, #2
 8006154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006158:	f7fa fd46 	bl	8000be8 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4b60      	ldr	r3, [pc, #384]	@ (80062e4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8006162:	fba3 2302 	umull	r2, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	011c      	lsls	r4, r3, #4
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	1891      	adds	r1, r2, r2
 8006182:	61b9      	str	r1, [r7, #24]
 8006184:	415b      	adcs	r3, r3
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618c:	4641      	mov	r1, r8
 800618e:	1851      	adds	r1, r2, r1
 8006190:	6139      	str	r1, [r7, #16]
 8006192:	4649      	mov	r1, r9
 8006194:	414b      	adcs	r3, r1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061a4:	4659      	mov	r1, fp
 80061a6:	00cb      	lsls	r3, r1, #3
 80061a8:	4651      	mov	r1, sl
 80061aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ae:	4651      	mov	r1, sl
 80061b0:	00ca      	lsls	r2, r1, #3
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	4642      	mov	r2, r8
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061c0:	464b      	mov	r3, r9
 80061c2:	460a      	mov	r2, r1
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061e4:	4649      	mov	r1, r9
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	4641      	mov	r1, r8
 80061ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ee:	4641      	mov	r1, r8
 80061f0:	008a      	lsls	r2, r1, #2
 80061f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061f6:	f7fa fcf7 	bl	8000be8 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	@ 0x32
 8006214:	4a33      	ldr	r2, [pc, #204]	@ (80062e4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006220:	441c      	add	r4, r3
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	673b      	str	r3, [r7, #112]	@ 0x70
 800622a:	677a      	str	r2, [r7, #116]	@ 0x74
 800622c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	415b      	adcs	r3, r3
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006240:	4641      	mov	r1, r8
 8006242:	1851      	adds	r1, r2, r1
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	4649      	mov	r1, r9
 8006248:	414b      	adcs	r3, r1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006258:	4659      	mov	r1, fp
 800625a:	00cb      	lsls	r3, r1, #3
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006262:	4651      	mov	r1, sl
 8006264:	00ca      	lsls	r2, r1, #3
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	4603      	mov	r3, r0
 800626c:	4642      	mov	r2, r8
 800626e:	189b      	adds	r3, r3, r2
 8006270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006272:	464b      	mov	r3, r9
 8006274:	460a      	mov	r2, r1
 8006276:	eb42 0303 	adc.w	r3, r2, r3
 800627a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	663b      	str	r3, [r7, #96]	@ 0x60
 8006286:	667a      	str	r2, [r7, #100]	@ 0x64
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062a6:	f7fa fc9f 	bl	8000be8 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	@ 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	@ 0x32
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <_ZL14UART_SetConfigP20__UART_HandleTypeDef+0x4e8>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4422      	add	r2, r4
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e4:	51eb851f 	.word	0x51eb851f

080062e8 <abort>:
 80062e8:	b508      	push	{r3, lr}
 80062ea:	2006      	movs	r0, #6
 80062ec:	f000 fe48 	bl	8006f80 <raise>
 80062f0:	2001      	movs	r0, #1
 80062f2:	f002 fcc1 	bl	8008c78 <_exit>
	...

080062f8 <malloc>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <malloc+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f000 b825 	b.w	800634c <_malloc_r>
 8006302:	bf00      	nop
 8006304:	2000001c 	.word	0x2000001c

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0f      	ldr	r6, [pc, #60]	@ (8006348 <sbrk_aligned+0x40>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f000 fe88 	bl	8007028 <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fe83 	bl	8007028 <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d103      	bne.n	800632e <sbrk_aligned+0x26>
 8006326:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800632a:	4620      	mov	r0, r4
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	1cc4      	adds	r4, r0, #3
 8006330:	f024 0403 	bic.w	r4, r4, #3
 8006334:	42a0      	cmp	r0, r4
 8006336:	d0f8      	beq.n	800632a <sbrk_aligned+0x22>
 8006338:	1a21      	subs	r1, r4, r0
 800633a:	4628      	mov	r0, r5
 800633c:	f000 fe74 	bl	8007028 <_sbrk_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d1f2      	bne.n	800632a <sbrk_aligned+0x22>
 8006344:	e7ef      	b.n	8006326 <sbrk_aligned+0x1e>
 8006346:	bf00      	nop
 8006348:	20000338 	.word	0x20000338

0800634c <_malloc_r>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	1ccd      	adds	r5, r1, #3
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	2d00      	cmp	r5, #0
 8006360:	4606      	mov	r6, r0
 8006362:	db01      	blt.n	8006368 <_malloc_r+0x1c>
 8006364:	42a9      	cmp	r1, r5
 8006366:	d904      	bls.n	8006372 <_malloc_r+0x26>
 8006368:	230c      	movs	r3, #12
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	2000      	movs	r0, #0
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006448 <_malloc_r+0xfc>
 8006376:	f000 f869 	bl	800644c <__malloc_lock>
 800637a:	f8d8 3000 	ldr.w	r3, [r8]
 800637e:	461c      	mov	r4, r3
 8006380:	bb44      	cbnz	r4, 80063d4 <_malloc_r+0x88>
 8006382:	4629      	mov	r1, r5
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff ffbf 	bl	8006308 <sbrk_aligned>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	4604      	mov	r4, r0
 800638e:	d158      	bne.n	8006442 <_malloc_r+0xf6>
 8006390:	f8d8 4000 	ldr.w	r4, [r8]
 8006394:	4627      	mov	r7, r4
 8006396:	2f00      	cmp	r7, #0
 8006398:	d143      	bne.n	8006422 <_malloc_r+0xd6>
 800639a:	2c00      	cmp	r4, #0
 800639c:	d04b      	beq.n	8006436 <_malloc_r+0xea>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	4639      	mov	r1, r7
 80063a2:	4630      	mov	r0, r6
 80063a4:	eb04 0903 	add.w	r9, r4, r3
 80063a8:	f000 fe3e 	bl	8007028 <_sbrk_r>
 80063ac:	4581      	cmp	r9, r0
 80063ae:	d142      	bne.n	8006436 <_malloc_r+0xea>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	1a6d      	subs	r5, r5, r1
 80063b4:	4629      	mov	r1, r5
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ffa6 	bl	8006308 <sbrk_aligned>
 80063bc:	3001      	adds	r0, #1
 80063be:	d03a      	beq.n	8006436 <_malloc_r+0xea>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	442b      	add	r3, r5
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	bb62      	cbnz	r2, 8006428 <_malloc_r+0xdc>
 80063ce:	f8c8 7000 	str.w	r7, [r8]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xa8>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d420      	bmi.n	800641c <_malloc_r+0xd0>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xc2>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4630      	mov	r0, r6
 80063f6:	f000 f82f 	bl	8006458 <__malloc_unlock>
 80063fa:	f104 000b 	add.w	r0, r4, #11
 80063fe:	1d23      	adds	r3, r4, #4
 8006400:	f020 0007 	bic.w	r0, r0, #7
 8006404:	1ac2      	subs	r2, r0, r3
 8006406:	bf1c      	itt	ne
 8006408:	1a1b      	subne	r3, r3, r0
 800640a:	50a3      	strne	r3, [r4, r2]
 800640c:	e7af      	b.n	800636e <_malloc_r+0x22>
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	42a3      	cmp	r3, r4
 8006412:	bf0c      	ite	eq
 8006414:	f8c8 2000 	streq.w	r2, [r8]
 8006418:	605a      	strne	r2, [r3, #4]
 800641a:	e7eb      	b.n	80063f4 <_malloc_r+0xa8>
 800641c:	4623      	mov	r3, r4
 800641e:	6864      	ldr	r4, [r4, #4]
 8006420:	e7ae      	b.n	8006380 <_malloc_r+0x34>
 8006422:	463c      	mov	r4, r7
 8006424:	687f      	ldr	r7, [r7, #4]
 8006426:	e7b6      	b.n	8006396 <_malloc_r+0x4a>
 8006428:	461a      	mov	r2, r3
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	d1fb      	bne.n	8006428 <_malloc_r+0xdc>
 8006430:	2300      	movs	r3, #0
 8006432:	6053      	str	r3, [r2, #4]
 8006434:	e7de      	b.n	80063f4 <_malloc_r+0xa8>
 8006436:	230c      	movs	r3, #12
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f80c 	bl	8006458 <__malloc_unlock>
 8006440:	e794      	b.n	800636c <_malloc_r+0x20>
 8006442:	6005      	str	r5, [r0, #0]
 8006444:	e7d6      	b.n	80063f4 <_malloc_r+0xa8>
 8006446:	bf00      	nop
 8006448:	2000033c 	.word	0x2000033c

0800644c <__malloc_lock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_lock+0x8>)
 800644e:	f000 be32 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20000480 	.word	0x20000480

08006458 <__malloc_unlock>:
 8006458:	4801      	ldr	r0, [pc, #4]	@ (8006460 <__malloc_unlock+0x8>)
 800645a:	f000 be2d 	b.w	80070b8 <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20000480 	.word	0x20000480

08006464 <__cvt>:
 8006464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	ec57 6b10 	vmov	r6, r7, d0
 800646c:	2f00      	cmp	r7, #0
 800646e:	460c      	mov	r4, r1
 8006470:	4619      	mov	r1, r3
 8006472:	463b      	mov	r3, r7
 8006474:	bfbb      	ittet	lt
 8006476:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800647a:	461f      	movlt	r7, r3
 800647c:	2300      	movge	r3, #0
 800647e:	232d      	movlt	r3, #45	@ 0x2d
 8006480:	700b      	strb	r3, [r1, #0]
 8006482:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006484:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006488:	4691      	mov	r9, r2
 800648a:	f023 0820 	bic.w	r8, r3, #32
 800648e:	bfbc      	itt	lt
 8006490:	4632      	movlt	r2, r6
 8006492:	4616      	movlt	r6, r2
 8006494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006498:	d005      	beq.n	80064a6 <__cvt+0x42>
 800649a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800649e:	d100      	bne.n	80064a2 <__cvt+0x3e>
 80064a0:	3401      	adds	r4, #1
 80064a2:	2102      	movs	r1, #2
 80064a4:	e000      	b.n	80064a8 <__cvt+0x44>
 80064a6:	2103      	movs	r1, #3
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	ab02      	add	r3, sp, #8
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	ec47 6b10 	vmov	d0, r6, r7
 80064b4:	4653      	mov	r3, sl
 80064b6:	4622      	mov	r2, r4
 80064b8:	f000 fe96 	bl	80071e8 <_dtoa_r>
 80064bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064c0:	4605      	mov	r5, r0
 80064c2:	d119      	bne.n	80064f8 <__cvt+0x94>
 80064c4:	f019 0f01 	tst.w	r9, #1
 80064c8:	d00e      	beq.n	80064e8 <__cvt+0x84>
 80064ca:	eb00 0904 	add.w	r9, r0, r4
 80064ce:	2200      	movs	r2, #0
 80064d0:	2300      	movs	r3, #0
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7fa fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80064da:	b108      	cbz	r0, 80064e0 <__cvt+0x7c>
 80064dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80064e0:	2230      	movs	r2, #48	@ 0x30
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	454b      	cmp	r3, r9
 80064e6:	d31e      	bcc.n	8006526 <__cvt+0xc2>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ec:	1b5b      	subs	r3, r3, r5
 80064ee:	4628      	mov	r0, r5
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	b004      	add	sp, #16
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064fc:	eb00 0904 	add.w	r9, r0, r4
 8006500:	d1e5      	bne.n	80064ce <__cvt+0x6a>
 8006502:	7803      	ldrb	r3, [r0, #0]
 8006504:	2b30      	cmp	r3, #48	@ 0x30
 8006506:	d10a      	bne.n	800651e <__cvt+0xba>
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7fa fafa 	bl	8000b08 <__aeabi_dcmpeq>
 8006514:	b918      	cbnz	r0, 800651e <__cvt+0xba>
 8006516:	f1c4 0401 	rsb	r4, r4, #1
 800651a:	f8ca 4000 	str.w	r4, [sl]
 800651e:	f8da 3000 	ldr.w	r3, [sl]
 8006522:	4499      	add	r9, r3
 8006524:	e7d3      	b.n	80064ce <__cvt+0x6a>
 8006526:	1c59      	adds	r1, r3, #1
 8006528:	9103      	str	r1, [sp, #12]
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e7d9      	b.n	80064e2 <__cvt+0x7e>

0800652e <__exponent>:
 800652e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006530:	2900      	cmp	r1, #0
 8006532:	bfba      	itte	lt
 8006534:	4249      	neglt	r1, r1
 8006536:	232d      	movlt	r3, #45	@ 0x2d
 8006538:	232b      	movge	r3, #43	@ 0x2b
 800653a:	2909      	cmp	r1, #9
 800653c:	7002      	strb	r2, [r0, #0]
 800653e:	7043      	strb	r3, [r0, #1]
 8006540:	dd29      	ble.n	8006596 <__exponent+0x68>
 8006542:	f10d 0307 	add.w	r3, sp, #7
 8006546:	461d      	mov	r5, r3
 8006548:	270a      	movs	r7, #10
 800654a:	461a      	mov	r2, r3
 800654c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006550:	fb07 1416 	mls	r4, r7, r6, r1
 8006554:	3430      	adds	r4, #48	@ 0x30
 8006556:	f802 4c01 	strb.w	r4, [r2, #-1]
 800655a:	460c      	mov	r4, r1
 800655c:	2c63      	cmp	r4, #99	@ 0x63
 800655e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006562:	4631      	mov	r1, r6
 8006564:	dcf1      	bgt.n	800654a <__exponent+0x1c>
 8006566:	3130      	adds	r1, #48	@ 0x30
 8006568:	1e94      	subs	r4, r2, #2
 800656a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800656e:	1c41      	adds	r1, r0, #1
 8006570:	4623      	mov	r3, r4
 8006572:	42ab      	cmp	r3, r5
 8006574:	d30a      	bcc.n	800658c <__exponent+0x5e>
 8006576:	f10d 0309 	add.w	r3, sp, #9
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	42ac      	cmp	r4, r5
 800657e:	bf88      	it	hi
 8006580:	2300      	movhi	r3, #0
 8006582:	3302      	adds	r3, #2
 8006584:	4403      	add	r3, r0
 8006586:	1a18      	subs	r0, r3, r0
 8006588:	b003      	add	sp, #12
 800658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006590:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006594:	e7ed      	b.n	8006572 <__exponent+0x44>
 8006596:	2330      	movs	r3, #48	@ 0x30
 8006598:	3130      	adds	r1, #48	@ 0x30
 800659a:	7083      	strb	r3, [r0, #2]
 800659c:	70c1      	strb	r1, [r0, #3]
 800659e:	1d03      	adds	r3, r0, #4
 80065a0:	e7f1      	b.n	8006586 <__exponent+0x58>
	...

080065a4 <_printf_float>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	b08d      	sub	sp, #52	@ 0x34
 80065aa:	460c      	mov	r4, r1
 80065ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065b0:	4616      	mov	r6, r2
 80065b2:	461f      	mov	r7, r3
 80065b4:	4605      	mov	r5, r0
 80065b6:	f000 fceb 	bl	8006f90 <_localeconv_r>
 80065ba:	6803      	ldr	r3, [r0, #0]
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 fe76 	bl	80002b0 <strlen>
 80065c4:	2300      	movs	r3, #0
 80065c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c8:	f8d8 3000 	ldr.w	r3, [r8]
 80065cc:	9005      	str	r0, [sp, #20]
 80065ce:	3307      	adds	r3, #7
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	f103 0208 	add.w	r2, r3, #8
 80065d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065dc:	f8d4 b000 	ldr.w	fp, [r4]
 80065e0:	f8c8 2000 	str.w	r2, [r8]
 80065e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80065f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fa:	4b9c      	ldr	r3, [pc, #624]	@ (800686c <_printf_float+0x2c8>)
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006600:	f7fa fab4 	bl	8000b6c <__aeabi_dcmpun>
 8006604:	bb70      	cbnz	r0, 8006664 <_printf_float+0xc0>
 8006606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660a:	4b98      	ldr	r3, [pc, #608]	@ (800686c <_printf_float+0x2c8>)
 800660c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006610:	f7fa fa8e 	bl	8000b30 <__aeabi_dcmple>
 8006614:	bb30      	cbnz	r0, 8006664 <_printf_float+0xc0>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7fa fa7d 	bl	8000b1c <__aeabi_dcmplt>
 8006622:	b110      	cbz	r0, 800662a <_printf_float+0x86>
 8006624:	232d      	movs	r3, #45	@ 0x2d
 8006626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662a:	4a91      	ldr	r2, [pc, #580]	@ (8006870 <_printf_float+0x2cc>)
 800662c:	4b91      	ldr	r3, [pc, #580]	@ (8006874 <_printf_float+0x2d0>)
 800662e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006632:	bf94      	ite	ls
 8006634:	4690      	movls	r8, r2
 8006636:	4698      	movhi	r8, r3
 8006638:	2303      	movs	r3, #3
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	f02b 0304 	bic.w	r3, fp, #4
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	9700      	str	r7, [sp, #0]
 8006648:	4633      	mov	r3, r6
 800664a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800664c:	4621      	mov	r1, r4
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f9d2 	bl	80069f8 <_printf_common>
 8006654:	3001      	adds	r0, #1
 8006656:	f040 808d 	bne.w	8006774 <_printf_float+0x1d0>
 800665a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800665e:	b00d      	add	sp, #52	@ 0x34
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7fa fa7e 	bl	8000b6c <__aeabi_dcmpun>
 8006670:	b140      	cbz	r0, 8006684 <_printf_float+0xe0>
 8006672:	464b      	mov	r3, r9
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfbc      	itt	lt
 8006678:	232d      	movlt	r3, #45	@ 0x2d
 800667a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800667e:	4a7e      	ldr	r2, [pc, #504]	@ (8006878 <_printf_float+0x2d4>)
 8006680:	4b7e      	ldr	r3, [pc, #504]	@ (800687c <_printf_float+0x2d8>)
 8006682:	e7d4      	b.n	800662e <_printf_float+0x8a>
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800668a:	9206      	str	r2, [sp, #24]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	d13b      	bne.n	8006708 <_printf_float+0x164>
 8006690:	2306      	movs	r3, #6
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006698:	2300      	movs	r3, #0
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	ab0a      	add	r3, sp, #40	@ 0x28
 80066a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066a4:	ab09      	add	r3, sp, #36	@ 0x24
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	6861      	ldr	r1, [r4, #4]
 80066aa:	ec49 8b10 	vmov	d0, r8, r9
 80066ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7ff fed6 	bl	8006464 <__cvt>
 80066b8:	9b06      	ldr	r3, [sp, #24]
 80066ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066bc:	2b47      	cmp	r3, #71	@ 0x47
 80066be:	4680      	mov	r8, r0
 80066c0:	d129      	bne.n	8006716 <_printf_float+0x172>
 80066c2:	1cc8      	adds	r0, r1, #3
 80066c4:	db02      	blt.n	80066cc <_printf_float+0x128>
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	4299      	cmp	r1, r3
 80066ca:	dd41      	ble.n	8006750 <_printf_float+0x1ac>
 80066cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80066d0:	fa5f fa8a 	uxtb.w	sl, sl
 80066d4:	3901      	subs	r1, #1
 80066d6:	4652      	mov	r2, sl
 80066d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80066de:	f7ff ff26 	bl	800652e <__exponent>
 80066e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066e4:	1813      	adds	r3, r2, r0
 80066e6:	2a01      	cmp	r2, #1
 80066e8:	4681      	mov	r9, r0
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	dc02      	bgt.n	80066f4 <_printf_float+0x150>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d2      	lsls	r2, r2, #31
 80066f2:	d501      	bpl.n	80066f8 <_printf_float+0x154>
 80066f4:	3301      	adds	r3, #1
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0a2      	beq.n	8006646 <_printf_float+0xa2>
 8006700:	232d      	movs	r3, #45	@ 0x2d
 8006702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006706:	e79e      	b.n	8006646 <_printf_float+0xa2>
 8006708:	9a06      	ldr	r2, [sp, #24]
 800670a:	2a47      	cmp	r2, #71	@ 0x47
 800670c:	d1c2      	bne.n	8006694 <_printf_float+0xf0>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c0      	bne.n	8006694 <_printf_float+0xf0>
 8006712:	2301      	movs	r3, #1
 8006714:	e7bd      	b.n	8006692 <_printf_float+0xee>
 8006716:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800671a:	d9db      	bls.n	80066d4 <_printf_float+0x130>
 800671c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006720:	d118      	bne.n	8006754 <_printf_float+0x1b0>
 8006722:	2900      	cmp	r1, #0
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	dd0b      	ble.n	8006740 <_printf_float+0x19c>
 8006728:	6121      	str	r1, [r4, #16]
 800672a:	b913      	cbnz	r3, 8006732 <_printf_float+0x18e>
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	07d0      	lsls	r0, r2, #31
 8006730:	d502      	bpl.n	8006738 <_printf_float+0x194>
 8006732:	3301      	adds	r3, #1
 8006734:	440b      	add	r3, r1
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	65a1      	str	r1, [r4, #88]	@ 0x58
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	e7db      	b.n	80066f8 <_printf_float+0x154>
 8006740:	b913      	cbnz	r3, 8006748 <_printf_float+0x1a4>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	07d2      	lsls	r2, r2, #31
 8006746:	d501      	bpl.n	800674c <_printf_float+0x1a8>
 8006748:	3302      	adds	r3, #2
 800674a:	e7f4      	b.n	8006736 <_printf_float+0x192>
 800674c:	2301      	movs	r3, #1
 800674e:	e7f2      	b.n	8006736 <_printf_float+0x192>
 8006750:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006756:	4299      	cmp	r1, r3
 8006758:	db05      	blt.n	8006766 <_printf_float+0x1c2>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	6121      	str	r1, [r4, #16]
 800675e:	07d8      	lsls	r0, r3, #31
 8006760:	d5ea      	bpl.n	8006738 <_printf_float+0x194>
 8006762:	1c4b      	adds	r3, r1, #1
 8006764:	e7e7      	b.n	8006736 <_printf_float+0x192>
 8006766:	2900      	cmp	r1, #0
 8006768:	bfd4      	ite	le
 800676a:	f1c1 0202 	rsble	r2, r1, #2
 800676e:	2201      	movgt	r2, #1
 8006770:	4413      	add	r3, r2
 8006772:	e7e0      	b.n	8006736 <_printf_float+0x192>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	055a      	lsls	r2, r3, #21
 8006778:	d407      	bmi.n	800678a <_printf_float+0x1e6>
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	4642      	mov	r2, r8
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	d12b      	bne.n	80067e0 <_printf_float+0x23c>
 8006788:	e767      	b.n	800665a <_printf_float+0xb6>
 800678a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800678e:	f240 80dd 	bls.w	800694c <_printf_float+0x3a8>
 8006792:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	f7fa f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d033      	beq.n	800680a <_printf_float+0x266>
 80067a2:	4a37      	ldr	r2, [pc, #220]	@ (8006880 <_printf_float+0x2dc>)
 80067a4:	2301      	movs	r3, #1
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f af54 	beq.w	800665a <_printf_float+0xb6>
 80067b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067b6:	4543      	cmp	r3, r8
 80067b8:	db02      	blt.n	80067c0 <_printf_float+0x21c>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	07d8      	lsls	r0, r3, #31
 80067be:	d50f      	bpl.n	80067e0 <_printf_float+0x23c>
 80067c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f af45 	beq.w	800665a <_printf_float+0xb6>
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80067d8:	f104 0a1a 	add.w	sl, r4, #26
 80067dc:	45c8      	cmp	r8, r9
 80067de:	dc09      	bgt.n	80067f4 <_printf_float+0x250>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	079b      	lsls	r3, r3, #30
 80067e4:	f100 8103 	bmi.w	80069ee <_printf_float+0x44a>
 80067e8:	68e0      	ldr	r0, [r4, #12]
 80067ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ec:	4298      	cmp	r0, r3
 80067ee:	bfb8      	it	lt
 80067f0:	4618      	movlt	r0, r3
 80067f2:	e734      	b.n	800665e <_printf_float+0xba>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4652      	mov	r2, sl
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af2b 	beq.w	800665a <_printf_float+0xb6>
 8006804:	f109 0901 	add.w	r9, r9, #1
 8006808:	e7e8      	b.n	80067dc <_printf_float+0x238>
 800680a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc39      	bgt.n	8006884 <_printf_float+0x2e0>
 8006810:	4a1b      	ldr	r2, [pc, #108]	@ (8006880 <_printf_float+0x2dc>)
 8006812:	2301      	movs	r3, #1
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	f43f af1d 	beq.w	800665a <_printf_float+0xb6>
 8006820:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006824:	ea59 0303 	orrs.w	r3, r9, r3
 8006828:	d102      	bne.n	8006830 <_printf_float+0x28c>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	07d9      	lsls	r1, r3, #31
 800682e:	d5d7      	bpl.n	80067e0 <_printf_float+0x23c>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af0d 	beq.w	800665a <_printf_float+0xb6>
 8006840:	f04f 0a00 	mov.w	sl, #0
 8006844:	f104 0b1a 	add.w	fp, r4, #26
 8006848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684a:	425b      	negs	r3, r3
 800684c:	4553      	cmp	r3, sl
 800684e:	dc01      	bgt.n	8006854 <_printf_float+0x2b0>
 8006850:	464b      	mov	r3, r9
 8006852:	e793      	b.n	800677c <_printf_float+0x1d8>
 8006854:	2301      	movs	r3, #1
 8006856:	465a      	mov	r2, fp
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f aefb 	beq.w	800665a <_printf_float+0xb6>
 8006864:	f10a 0a01 	add.w	sl, sl, #1
 8006868:	e7ee      	b.n	8006848 <_printf_float+0x2a4>
 800686a:	bf00      	nop
 800686c:	7fefffff 	.word	0x7fefffff
 8006870:	08008f88 	.word	0x08008f88
 8006874:	08008f8c 	.word	0x08008f8c
 8006878:	08008f90 	.word	0x08008f90
 800687c:	08008f94 	.word	0x08008f94
 8006880:	08008f98 	.word	0x08008f98
 8006884:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006886:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800688a:	4553      	cmp	r3, sl
 800688c:	bfa8      	it	ge
 800688e:	4653      	movge	r3, sl
 8006890:	2b00      	cmp	r3, #0
 8006892:	4699      	mov	r9, r3
 8006894:	dc36      	bgt.n	8006904 <_printf_float+0x360>
 8006896:	f04f 0b00 	mov.w	fp, #0
 800689a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689e:	f104 021a 	add.w	r2, r4, #26
 80068a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068a4:	9306      	str	r3, [sp, #24]
 80068a6:	eba3 0309 	sub.w	r3, r3, r9
 80068aa:	455b      	cmp	r3, fp
 80068ac:	dc31      	bgt.n	8006912 <_printf_float+0x36e>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	459a      	cmp	sl, r3
 80068b2:	dc3a      	bgt.n	800692a <_printf_float+0x386>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07da      	lsls	r2, r3, #31
 80068b8:	d437      	bmi.n	800692a <_printf_float+0x386>
 80068ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068bc:	ebaa 0903 	sub.w	r9, sl, r3
 80068c0:	9b06      	ldr	r3, [sp, #24]
 80068c2:	ebaa 0303 	sub.w	r3, sl, r3
 80068c6:	4599      	cmp	r9, r3
 80068c8:	bfa8      	it	ge
 80068ca:	4699      	movge	r9, r3
 80068cc:	f1b9 0f00 	cmp.w	r9, #0
 80068d0:	dc33      	bgt.n	800693a <_printf_float+0x396>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068da:	f104 0b1a 	add.w	fp, r4, #26
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	ebaa 0303 	sub.w	r3, sl, r3
 80068e4:	eba3 0309 	sub.w	r3, r3, r9
 80068e8:	4543      	cmp	r3, r8
 80068ea:	f77f af79 	ble.w	80067e0 <_printf_float+0x23c>
 80068ee:	2301      	movs	r3, #1
 80068f0:	465a      	mov	r2, fp
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f aeae 	beq.w	800665a <_printf_float+0xb6>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	e7ec      	b.n	80068de <_printf_float+0x33a>
 8006904:	4642      	mov	r2, r8
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	d1c2      	bne.n	8006896 <_printf_float+0x2f2>
 8006910:	e6a3      	b.n	800665a <_printf_float+0xb6>
 8006912:	2301      	movs	r3, #1
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	9206      	str	r2, [sp, #24]
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae9c 	beq.w	800665a <_printf_float+0xb6>
 8006922:	9a06      	ldr	r2, [sp, #24]
 8006924:	f10b 0b01 	add.w	fp, fp, #1
 8006928:	e7bb      	b.n	80068a2 <_printf_float+0x2fe>
 800692a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d1c0      	bne.n	80068ba <_printf_float+0x316>
 8006938:	e68f      	b.n	800665a <_printf_float+0xb6>
 800693a:	9a06      	ldr	r2, [sp, #24]
 800693c:	464b      	mov	r3, r9
 800693e:	4442      	add	r2, r8
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	d1c3      	bne.n	80068d2 <_printf_float+0x32e>
 800694a:	e686      	b.n	800665a <_printf_float+0xb6>
 800694c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006950:	f1ba 0f01 	cmp.w	sl, #1
 8006954:	dc01      	bgt.n	800695a <_printf_float+0x3b6>
 8006956:	07db      	lsls	r3, r3, #31
 8006958:	d536      	bpl.n	80069c8 <_printf_float+0x424>
 800695a:	2301      	movs	r3, #1
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae78 	beq.w	800665a <_printf_float+0xb6>
 800696a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae70 	beq.w	800665a <_printf_float+0xb6>
 800697a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800697e:	2200      	movs	r2, #0
 8006980:	2300      	movs	r3, #0
 8006982:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006986:	f7fa f8bf 	bl	8000b08 <__aeabi_dcmpeq>
 800698a:	b9c0      	cbnz	r0, 80069be <_printf_float+0x41a>
 800698c:	4653      	mov	r3, sl
 800698e:	f108 0201 	add.w	r2, r8, #1
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d10c      	bne.n	80069b6 <_printf_float+0x412>
 800699c:	e65d      	b.n	800665a <_printf_float+0xb6>
 800699e:	2301      	movs	r3, #1
 80069a0:	465a      	mov	r2, fp
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae56 	beq.w	800665a <_printf_float+0xb6>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	45d0      	cmp	r8, sl
 80069b4:	dbf3      	blt.n	800699e <_printf_float+0x3fa>
 80069b6:	464b      	mov	r3, r9
 80069b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069bc:	e6df      	b.n	800677e <_printf_float+0x1da>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	f104 0b1a 	add.w	fp, r4, #26
 80069c6:	e7f4      	b.n	80069b2 <_printf_float+0x40e>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4642      	mov	r2, r8
 80069cc:	e7e1      	b.n	8006992 <_printf_float+0x3ee>
 80069ce:	2301      	movs	r3, #1
 80069d0:	464a      	mov	r2, r9
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae3e 	beq.w	800665a <_printf_float+0xb6>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	4543      	cmp	r3, r8
 80069ea:	dcf0      	bgt.n	80069ce <_printf_float+0x42a>
 80069ec:	e6fc      	b.n	80067e8 <_printf_float+0x244>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 0919 	add.w	r9, r4, #25
 80069f6:	e7f4      	b.n	80069e2 <_printf_float+0x43e>

080069f8 <_printf_common>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	4616      	mov	r6, r2
 80069fe:	4698      	mov	r8, r3
 8006a00:	688a      	ldr	r2, [r1, #8]
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	bfb8      	it	lt
 8006a0c:	4613      	movlt	r3, r2
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b10a      	cbz	r2, 8006a1e <_printf_common+0x26>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	0699      	lsls	r1, r3, #26
 8006a22:	bf42      	ittt	mi
 8006a24:	6833      	ldrmi	r3, [r6, #0]
 8006a26:	3302      	addmi	r3, #2
 8006a28:	6033      	strmi	r3, [r6, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	f015 0506 	ands.w	r5, r5, #6
 8006a30:	d106      	bne.n	8006a40 <_printf_common+0x48>
 8006a32:	f104 0a19 	add.w	sl, r4, #25
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	6832      	ldr	r2, [r6, #0]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dc26      	bgt.n	8006a8e <_printf_common+0x96>
 8006a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	3b00      	subs	r3, #0
 8006a48:	bf18      	it	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	0692      	lsls	r2, r2, #26
 8006a4e:	d42b      	bmi.n	8006aa8 <_printf_common+0xb0>
 8006a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a54:	4641      	mov	r1, r8
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c8      	blx	r9
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d01e      	beq.n	8006a9c <_printf_common+0xa4>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	f003 0306 	and.w	r3, r3, #6
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf02      	ittt	eq
 8006a6a:	68e5      	ldreq	r5, [r4, #12]
 8006a6c:	6833      	ldreq	r3, [r6, #0]
 8006a6e:	1aed      	subeq	r5, r5, r3
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	bf0c      	ite	eq
 8006a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a78:	2500      	movne	r5, #0
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bfc4      	itt	gt
 8006a7e:	1a9b      	subgt	r3, r3, r2
 8006a80:	18ed      	addgt	r5, r5, r3
 8006a82:	2600      	movs	r6, #0
 8006a84:	341a      	adds	r4, #26
 8006a86:	42b5      	cmp	r5, r6
 8006a88:	d11a      	bne.n	8006ac0 <_printf_common+0xc8>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e008      	b.n	8006aa0 <_printf_common+0xa8>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4641      	mov	r1, r8
 8006a94:	4638      	mov	r0, r7
 8006a96:	47c8      	blx	r9
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d103      	bne.n	8006aa4 <_printf_common+0xac>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	e7c6      	b.n	8006a36 <_printf_common+0x3e>
 8006aa8:	18e1      	adds	r1, r4, r3
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	2030      	movs	r0, #48	@ 0x30
 8006aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ab2:	4422      	add	r2, r4
 8006ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006abc:	3302      	adds	r3, #2
 8006abe:	e7c7      	b.n	8006a50 <_printf_common+0x58>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c8      	blx	r9
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa4>
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7d9      	b.n	8006a86 <_printf_common+0x8e>
	...

08006ad4 <_printf_i>:
 8006ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	7e0f      	ldrb	r7, [r1, #24]
 8006ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006adc:	2f78      	cmp	r7, #120	@ 0x78
 8006ade:	4691      	mov	r9, r2
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aea:	d807      	bhi.n	8006afc <_printf_i+0x28>
 8006aec:	2f62      	cmp	r7, #98	@ 0x62
 8006aee:	d80a      	bhi.n	8006b06 <_printf_i+0x32>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f000 80d2 	beq.w	8006c9a <_printf_i+0x1c6>
 8006af6:	2f58      	cmp	r7, #88	@ 0x58
 8006af8:	f000 80b9 	beq.w	8006c6e <_printf_i+0x19a>
 8006afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b04:	e03a      	b.n	8006b7c <_printf_i+0xa8>
 8006b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b0a:	2b15      	cmp	r3, #21
 8006b0c:	d8f6      	bhi.n	8006afc <_printf_i+0x28>
 8006b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b14 <_printf_i+0x40>)
 8006b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006afd 	.word	0x08006afd
 8006b20:	08006afd 	.word	0x08006afd
 8006b24:	08006afd 	.word	0x08006afd
 8006b28:	08006afd 	.word	0x08006afd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006afd 	.word	0x08006afd
 8006b34:	08006afd 	.word	0x08006afd
 8006b38:	08006afd 	.word	0x08006afd
 8006b3c:	08006afd 	.word	0x08006afd
 8006b40:	08006c81 	.word	0x08006c81
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006c3b 	.word	0x08006c3b
 8006b4c:	08006afd 	.word	0x08006afd
 8006b50:	08006afd 	.word	0x08006afd
 8006b54:	08006ca3 	.word	0x08006ca3
 8006b58:	08006afd 	.word	0x08006afd
 8006b5c:	08006bab 	.word	0x08006bab
 8006b60:	08006afd 	.word	0x08006afd
 8006b64:	08006afd 	.word	0x08006afd
 8006b68:	08006c43 	.word	0x08006c43
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e09d      	b.n	8006cbc <_printf_i+0x1e8>
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	0606      	lsls	r6, r0, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xbc>
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	e003      	b.n	8006b98 <_printf_i+0xc4>
 8006b90:	0645      	lsls	r5, r0, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xb8>
 8006b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	da03      	bge.n	8006ba4 <_printf_i+0xd0>
 8006b9c:	232d      	movs	r3, #45	@ 0x2d
 8006b9e:	426d      	negs	r5, r5
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ba4:	4859      	ldr	r0, [pc, #356]	@ (8006d0c <_printf_i+0x238>)
 8006ba6:	230a      	movs	r3, #10
 8006ba8:	e011      	b.n	8006bce <_printf_i+0xfa>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	0608      	lsls	r0, r1, #24
 8006bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb4:	d402      	bmi.n	8006bbc <_printf_i+0xe8>
 8006bb6:	0649      	lsls	r1, r1, #25
 8006bb8:	bf48      	it	mi
 8006bba:	b2ad      	uxthmi	r5, r5
 8006bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bbe:	4853      	ldr	r0, [pc, #332]	@ (8006d0c <_printf_i+0x238>)
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	bf14      	ite	ne
 8006bc4:	230a      	movne	r3, #10
 8006bc6:	2308      	moveq	r3, #8
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bce:	6866      	ldr	r6, [r4, #4]
 8006bd0:	60a6      	str	r6, [r4, #8]
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	bfa2      	ittt	ge
 8006bd6:	6821      	ldrge	r1, [r4, #0]
 8006bd8:	f021 0104 	bicge.w	r1, r1, #4
 8006bdc:	6021      	strge	r1, [r4, #0]
 8006bde:	b90d      	cbnz	r5, 8006be4 <_printf_i+0x110>
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	d04b      	beq.n	8006c7c <_printf_i+0x1a8>
 8006be4:	4616      	mov	r6, r2
 8006be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bea:	fb03 5711 	mls	r7, r3, r1, r5
 8006bee:	5dc7      	ldrb	r7, [r0, r7]
 8006bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf4:	462f      	mov	r7, r5
 8006bf6:	42bb      	cmp	r3, r7
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	d9f4      	bls.n	8006be6 <_printf_i+0x112>
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d10b      	bne.n	8006c18 <_printf_i+0x144>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	07df      	lsls	r7, r3, #31
 8006c04:	d508      	bpl.n	8006c18 <_printf_i+0x144>
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	6861      	ldr	r1, [r4, #4]
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	bfde      	ittt	le
 8006c0e:	2330      	movle	r3, #48	@ 0x30
 8006c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c18:	1b92      	subs	r2, r2, r6
 8006c1a:	6122      	str	r2, [r4, #16]
 8006c1c:	f8cd a000 	str.w	sl, [sp]
 8006c20:	464b      	mov	r3, r9
 8006c22:	aa03      	add	r2, sp, #12
 8006c24:	4621      	mov	r1, r4
 8006c26:	4640      	mov	r0, r8
 8006c28:	f7ff fee6 	bl	80069f8 <_printf_common>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d14a      	bne.n	8006cc6 <_printf_i+0x1f2>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c34:	b004      	add	sp, #16
 8006c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	4833      	ldr	r0, [pc, #204]	@ (8006d10 <_printf_i+0x23c>)
 8006c44:	2778      	movs	r7, #120	@ 0x78
 8006c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	6831      	ldr	r1, [r6, #0]
 8006c4e:	061f      	lsls	r7, r3, #24
 8006c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c54:	d402      	bmi.n	8006c5c <_printf_i+0x188>
 8006c56:	065f      	lsls	r7, r3, #25
 8006c58:	bf48      	it	mi
 8006c5a:	b2ad      	uxthmi	r5, r5
 8006c5c:	6031      	str	r1, [r6, #0]
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	bf44      	itt	mi
 8006c62:	f043 0320 	orrmi.w	r3, r3, #32
 8006c66:	6023      	strmi	r3, [r4, #0]
 8006c68:	b11d      	cbz	r5, 8006c72 <_printf_i+0x19e>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	e7ac      	b.n	8006bc8 <_printf_i+0xf4>
 8006c6e:	4827      	ldr	r0, [pc, #156]	@ (8006d0c <_printf_i+0x238>)
 8006c70:	e7e9      	b.n	8006c46 <_printf_i+0x172>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f023 0320 	bic.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	e7f6      	b.n	8006c6a <_printf_i+0x196>
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	e7bd      	b.n	8006bfc <_printf_i+0x128>
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	6825      	ldr	r5, [r4, #0]
 8006c84:	6961      	ldr	r1, [r4, #20]
 8006c86:	1d18      	adds	r0, r3, #4
 8006c88:	6030      	str	r0, [r6, #0]
 8006c8a:	062e      	lsls	r6, r5, #24
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0x1c0>
 8006c90:	6019      	str	r1, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0x1c6>
 8006c94:	0668      	lsls	r0, r5, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0x1bc>
 8006c98:	8019      	strh	r1, [r3, #0]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	4616      	mov	r6, r2
 8006ca0:	e7bc      	b.n	8006c1c <_printf_i+0x148>
 8006ca2:	6833      	ldr	r3, [r6, #0]
 8006ca4:	1d1a      	adds	r2, r3, #4
 8006ca6:	6032      	str	r2, [r6, #0]
 8006ca8:	681e      	ldr	r6, [r3, #0]
 8006caa:	6862      	ldr	r2, [r4, #4]
 8006cac:	2100      	movs	r1, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7f9 faae 	bl	8000210 <memchr>
 8006cb4:	b108      	cbz	r0, 8006cba <_printf_i+0x1e6>
 8006cb6:	1b80      	subs	r0, r0, r6
 8006cb8:	6060      	str	r0, [r4, #4]
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc4:	e7aa      	b.n	8006c1c <_printf_i+0x148>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4640      	mov	r0, r8
 8006cce:	47d0      	blx	sl
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d0ad      	beq.n	8006c30 <_printf_i+0x15c>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	079b      	lsls	r3, r3, #30
 8006cd8:	d413      	bmi.n	8006d02 <_printf_i+0x22e>
 8006cda:	68e0      	ldr	r0, [r4, #12]
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	4298      	cmp	r0, r3
 8006ce0:	bfb8      	it	lt
 8006ce2:	4618      	movlt	r0, r3
 8006ce4:	e7a6      	b.n	8006c34 <_printf_i+0x160>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	47d0      	blx	sl
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d09d      	beq.n	8006c30 <_printf_i+0x15c>
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	9903      	ldr	r1, [sp, #12]
 8006cfa:	1a5b      	subs	r3, r3, r1
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dcf2      	bgt.n	8006ce6 <_printf_i+0x212>
 8006d00:	e7eb      	b.n	8006cda <_printf_i+0x206>
 8006d02:	2500      	movs	r5, #0
 8006d04:	f104 0619 	add.w	r6, r4, #25
 8006d08:	e7f5      	b.n	8006cf6 <_printf_i+0x222>
 8006d0a:	bf00      	nop
 8006d0c:	08008f9a 	.word	0x08008f9a
 8006d10:	08008fab 	.word	0x08008fab

08006d14 <std>:
 8006d14:	2300      	movs	r3, #0
 8006d16:	b510      	push	{r4, lr}
 8006d18:	4604      	mov	r4, r0
 8006d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d22:	6083      	str	r3, [r0, #8]
 8006d24:	8181      	strh	r1, [r0, #12]
 8006d26:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d28:	81c2      	strh	r2, [r0, #14]
 8006d2a:	6183      	str	r3, [r0, #24]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	2208      	movs	r2, #8
 8006d30:	305c      	adds	r0, #92	@ 0x5c
 8006d32:	f000 f8f4 	bl	8006f1e <memset>
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x58>)
 8006d38:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x5c>)
 8006d3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x60>)
 8006d40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <std+0x64>)
 8006d44:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d46:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <std+0x68>)
 8006d48:	6224      	str	r4, [r4, #32]
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	d006      	beq.n	8006d5c <std+0x48>
 8006d4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d52:	4294      	cmp	r4, r2
 8006d54:	d002      	beq.n	8006d5c <std+0x48>
 8006d56:	33d0      	adds	r3, #208	@ 0xd0
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	d105      	bne.n	8006d68 <std+0x54>
 8006d5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d64:	f000 b9a6 	b.w	80070b4 <__retarget_lock_init_recursive>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08006e99 	.word	0x08006e99
 8006d70:	08006ebb 	.word	0x08006ebb
 8006d74:	08006ef3 	.word	0x08006ef3
 8006d78:	08006f17 	.word	0x08006f17
 8006d7c:	20000340 	.word	0x20000340

08006d80 <stdio_exit_handler>:
 8006d80:	4a02      	ldr	r2, [pc, #8]	@ (8006d8c <stdio_exit_handler+0xc>)
 8006d82:	4903      	ldr	r1, [pc, #12]	@ (8006d90 <stdio_exit_handler+0x10>)
 8006d84:	4803      	ldr	r0, [pc, #12]	@ (8006d94 <stdio_exit_handler+0x14>)
 8006d86:	f000 b869 	b.w	8006e5c <_fwalk_sglue>
 8006d8a:	bf00      	nop
 8006d8c:	20000010 	.word	0x20000010
 8006d90:	08008611 	.word	0x08008611
 8006d94:	20000020 	.word	0x20000020

08006d98 <cleanup_stdio>:
 8006d98:	6841      	ldr	r1, [r0, #4]
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <cleanup_stdio+0x34>)
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	4604      	mov	r4, r0
 8006da2:	d001      	beq.n	8006da8 <cleanup_stdio+0x10>
 8006da4:	f001 fc34 	bl	8008610 <_fflush_r>
 8006da8:	68a1      	ldr	r1, [r4, #8]
 8006daa:	4b09      	ldr	r3, [pc, #36]	@ (8006dd0 <cleanup_stdio+0x38>)
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <cleanup_stdio+0x1e>
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fc2d 	bl	8008610 <_fflush_r>
 8006db6:	68e1      	ldr	r1, [r4, #12]
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <cleanup_stdio+0x3c>)
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	d004      	beq.n	8006dc8 <cleanup_stdio+0x30>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f001 bc24 	b.w	8008610 <_fflush_r>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000340 	.word	0x20000340
 8006dd0:	200003a8 	.word	0x200003a8
 8006dd4:	20000410 	.word	0x20000410

08006dd8 <global_stdio_init.part.0>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <global_stdio_init.part.0+0x30>)
 8006ddc:	4c0b      	ldr	r4, [pc, #44]	@ (8006e0c <global_stdio_init.part.0+0x34>)
 8006dde:	4a0c      	ldr	r2, [pc, #48]	@ (8006e10 <global_stdio_init.part.0+0x38>)
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	4620      	mov	r0, r4
 8006de4:	2200      	movs	r2, #0
 8006de6:	2104      	movs	r1, #4
 8006de8:	f7ff ff94 	bl	8006d14 <std>
 8006dec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006df0:	2201      	movs	r2, #1
 8006df2:	2109      	movs	r1, #9
 8006df4:	f7ff ff8e 	bl	8006d14 <std>
 8006df8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e02:	2112      	movs	r1, #18
 8006e04:	f7ff bf86 	b.w	8006d14 <std>
 8006e08:	20000478 	.word	0x20000478
 8006e0c:	20000340 	.word	0x20000340
 8006e10:	08006d81 	.word	0x08006d81

08006e14 <__sfp_lock_acquire>:
 8006e14:	4801      	ldr	r0, [pc, #4]	@ (8006e1c <__sfp_lock_acquire+0x8>)
 8006e16:	f000 b94e 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20000481 	.word	0x20000481

08006e20 <__sfp_lock_release>:
 8006e20:	4801      	ldr	r0, [pc, #4]	@ (8006e28 <__sfp_lock_release+0x8>)
 8006e22:	f000 b949 	b.w	80070b8 <__retarget_lock_release_recursive>
 8006e26:	bf00      	nop
 8006e28:	20000481 	.word	0x20000481

08006e2c <__sinit>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	4604      	mov	r4, r0
 8006e30:	f7ff fff0 	bl	8006e14 <__sfp_lock_acquire>
 8006e34:	6a23      	ldr	r3, [r4, #32]
 8006e36:	b11b      	cbz	r3, 8006e40 <__sinit+0x14>
 8006e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3c:	f7ff bff0 	b.w	8006e20 <__sfp_lock_release>
 8006e40:	4b04      	ldr	r3, [pc, #16]	@ (8006e54 <__sinit+0x28>)
 8006e42:	6223      	str	r3, [r4, #32]
 8006e44:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <__sinit+0x2c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f5      	bne.n	8006e38 <__sinit+0xc>
 8006e4c:	f7ff ffc4 	bl	8006dd8 <global_stdio_init.part.0>
 8006e50:	e7f2      	b.n	8006e38 <__sinit+0xc>
 8006e52:	bf00      	nop
 8006e54:	08006d99 	.word	0x08006d99
 8006e58:	20000478 	.word	0x20000478

08006e5c <_fwalk_sglue>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4607      	mov	r7, r0
 8006e62:	4688      	mov	r8, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	2600      	movs	r6, #0
 8006e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e70:	d505      	bpl.n	8006e7e <_fwalk_sglue+0x22>
 8006e72:	6824      	ldr	r4, [r4, #0]
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	d1f7      	bne.n	8006e68 <_fwalk_sglue+0xc>
 8006e78:	4630      	mov	r0, r6
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d907      	bls.n	8006e94 <_fwalk_sglue+0x38>
 8006e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	d003      	beq.n	8006e94 <_fwalk_sglue+0x38>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4638      	mov	r0, r7
 8006e90:	47c0      	blx	r8
 8006e92:	4306      	orrs	r6, r0
 8006e94:	3568      	adds	r5, #104	@ 0x68
 8006e96:	e7e9      	b.n	8006e6c <_fwalk_sglue+0x10>

08006e98 <__sread>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	f000 f89c 	bl	8006fdc <_read_r>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	bfab      	itete	ge
 8006ea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8006eac:	181b      	addge	r3, r3, r0
 8006eae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006eb2:	bfac      	ite	ge
 8006eb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006eb6:	81a3      	strhlt	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__swrite>:
 8006eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	898b      	ldrh	r3, [r1, #12]
 8006ec2:	05db      	lsls	r3, r3, #23
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	4616      	mov	r6, r2
 8006eca:	d505      	bpl.n	8006ed8 <__swrite+0x1e>
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f000 f870 	bl	8006fb8 <_lseek_r>
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	4628      	mov	r0, r5
 8006eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	f000 b8ab 	b.w	8007048 <_write_r>

08006ef2 <__sseek>:
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efa:	f000 f85d 	bl	8006fb8 <_lseek_r>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	bf15      	itete	ne
 8006f04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f0e:	81a3      	strheq	r3, [r4, #12]
 8006f10:	bf18      	it	ne
 8006f12:	81a3      	strhne	r3, [r4, #12]
 8006f14:	bd10      	pop	{r4, pc}

08006f16 <__sclose>:
 8006f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1a:	f000 b83d 	b.w	8006f98 <_close_r>

08006f1e <memset>:
 8006f1e:	4402      	add	r2, r0
 8006f20:	4603      	mov	r3, r0
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d100      	bne.n	8006f28 <memset+0xa>
 8006f26:	4770      	bx	lr
 8006f28:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2c:	e7f9      	b.n	8006f22 <memset+0x4>

08006f2e <_raise_r>:
 8006f2e:	291f      	cmp	r1, #31
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4605      	mov	r5, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	d904      	bls.n	8006f42 <_raise_r+0x14>
 8006f38:	2316      	movs	r3, #22
 8006f3a:	6003      	str	r3, [r0, #0]
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f44:	b112      	cbz	r2, 8006f4c <_raise_r+0x1e>
 8006f46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f4a:	b94b      	cbnz	r3, 8006f60 <_raise_r+0x32>
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f869 	bl	8007024 <_getpid_r>
 8006f52:	4622      	mov	r2, r4
 8006f54:	4601      	mov	r1, r0
 8006f56:	4628      	mov	r0, r5
 8006f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f5c:	f000 b850 	b.w	8007000 <_kill_r>
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d00a      	beq.n	8006f7a <_raise_r+0x4c>
 8006f64:	1c59      	adds	r1, r3, #1
 8006f66:	d103      	bne.n	8006f70 <_raise_r+0x42>
 8006f68:	2316      	movs	r3, #22
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	e7e7      	b.n	8006f40 <_raise_r+0x12>
 8006f70:	2100      	movs	r1, #0
 8006f72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f76:	4620      	mov	r0, r4
 8006f78:	4798      	blx	r3
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e7e0      	b.n	8006f40 <_raise_r+0x12>
	...

08006f80 <raise>:
 8006f80:	4b02      	ldr	r3, [pc, #8]	@ (8006f8c <raise+0xc>)
 8006f82:	4601      	mov	r1, r0
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	f7ff bfd2 	b.w	8006f2e <_raise_r>
 8006f8a:	bf00      	nop
 8006f8c:	2000001c 	.word	0x2000001c

08006f90 <_localeconv_r>:
 8006f90:	4800      	ldr	r0, [pc, #0]	@ (8006f94 <_localeconv_r+0x4>)
 8006f92:	4770      	bx	lr
 8006f94:	2000015c 	.word	0x2000015c

08006f98 <_close_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d06      	ldr	r5, [pc, #24]	@ (8006fb4 <_close_r+0x1c>)
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f001 fe1a 	bl	8008bdc <_close>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_close_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_close_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	2000047c 	.word	0x2000047c

08006fb8 <_lseek_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	@ (8006fd8 <_lseek_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f001 fe30 	bl	8008c2c <_lseek>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_lseek_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_lseek_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	2000047c 	.word	0x2000047c

08006fdc <_read_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	@ (8006ffc <_read_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f001 fe26 	bl	8008c3c <_read>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_read_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_read_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2000047c 	.word	0x2000047c

08007000 <_kill_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	@ (8007020 <_kill_r+0x20>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	4611      	mov	r1, r2
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	f001 fe05 	bl	8008c1c <_kill>
 8007012:	1c43      	adds	r3, r0, #1
 8007014:	d102      	bne.n	800701c <_kill_r+0x1c>
 8007016:	682b      	ldr	r3, [r5, #0]
 8007018:	b103      	cbz	r3, 800701c <_kill_r+0x1c>
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	bd38      	pop	{r3, r4, r5, pc}
 800701e:	bf00      	nop
 8007020:	2000047c 	.word	0x2000047c

08007024 <_getpid_r>:
 8007024:	f001 bdea 	b.w	8008bfc <_getpid>

08007028 <_sbrk_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	@ (8007044 <_sbrk_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f001 fe0a 	bl	8008c4c <_sbrk>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_sbrk_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_sbrk_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	2000047c 	.word	0x2000047c

08007048 <_write_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	@ (8007068 <_write_r+0x20>)
 800704c:	4604      	mov	r4, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f001 fe06 	bl	8008c68 <_write>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_write_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_write_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	2000047c 	.word	0x2000047c

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	@ (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	@ (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	@ (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	@ (80070b0 <__libc_init_array+0x44>)
 8007080:	f001 fdfc 	bl	8008c7c <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	08009798 	.word	0x08009798
 80070a8:	08009798 	.word	0x08009798
 80070ac:	08009798 	.word	0x08009798
 80070b0:	0800979c 	.word	0x0800979c

080070b4 <__retarget_lock_init_recursive>:
 80070b4:	4770      	bx	lr

080070b6 <__retarget_lock_acquire_recursive>:
 80070b6:	4770      	bx	lr

080070b8 <__retarget_lock_release_recursive>:
 80070b8:	4770      	bx	lr

080070ba <memcpy>:
 80070ba:	440a      	add	r2, r1
 80070bc:	4291      	cmp	r1, r2
 80070be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80070c2:	d100      	bne.n	80070c6 <memcpy+0xc>
 80070c4:	4770      	bx	lr
 80070c6:	b510      	push	{r4, lr}
 80070c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d0:	4291      	cmp	r1, r2
 80070d2:	d1f9      	bne.n	80070c8 <memcpy+0xe>
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <quorem>:
 80070d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	6903      	ldr	r3, [r0, #16]
 80070dc:	690c      	ldr	r4, [r1, #16]
 80070de:	42a3      	cmp	r3, r4
 80070e0:	4607      	mov	r7, r0
 80070e2:	db7e      	blt.n	80071e2 <quorem+0x10c>
 80070e4:	3c01      	subs	r4, #1
 80070e6:	f101 0814 	add.w	r8, r1, #20
 80070ea:	00a3      	lsls	r3, r4, #2
 80070ec:	f100 0514 	add.w	r5, r0, #20
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007100:	3301      	adds	r3, #1
 8007102:	429a      	cmp	r2, r3
 8007104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007108:	fbb2 f6f3 	udiv	r6, r2, r3
 800710c:	d32e      	bcc.n	800716c <quorem+0x96>
 800710e:	f04f 0a00 	mov.w	sl, #0
 8007112:	46c4      	mov	ip, r8
 8007114:	46ae      	mov	lr, r5
 8007116:	46d3      	mov	fp, sl
 8007118:	f85c 3b04 	ldr.w	r3, [ip], #4
 800711c:	b298      	uxth	r0, r3
 800711e:	fb06 a000 	mla	r0, r6, r0, sl
 8007122:	0c02      	lsrs	r2, r0, #16
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	fb06 2303 	mla	r3, r6, r3, r2
 800712a:	f8de 2000 	ldr.w	r2, [lr]
 800712e:	b280      	uxth	r0, r0
 8007130:	b292      	uxth	r2, r2
 8007132:	1a12      	subs	r2, r2, r0
 8007134:	445a      	add	r2, fp
 8007136:	f8de 0000 	ldr.w	r0, [lr]
 800713a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800713e:	b29b      	uxth	r3, r3
 8007140:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007144:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007148:	b292      	uxth	r2, r2
 800714a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800714e:	45e1      	cmp	r9, ip
 8007150:	f84e 2b04 	str.w	r2, [lr], #4
 8007154:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007158:	d2de      	bcs.n	8007118 <quorem+0x42>
 800715a:	9b00      	ldr	r3, [sp, #0]
 800715c:	58eb      	ldr	r3, [r5, r3]
 800715e:	b92b      	cbnz	r3, 800716c <quorem+0x96>
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	3b04      	subs	r3, #4
 8007164:	429d      	cmp	r5, r3
 8007166:	461a      	mov	r2, r3
 8007168:	d32f      	bcc.n	80071ca <quorem+0xf4>
 800716a:	613c      	str	r4, [r7, #16]
 800716c:	4638      	mov	r0, r7
 800716e:	f001 f8c3 	bl	80082f8 <__mcmp>
 8007172:	2800      	cmp	r0, #0
 8007174:	db25      	blt.n	80071c2 <quorem+0xec>
 8007176:	4629      	mov	r1, r5
 8007178:	2000      	movs	r0, #0
 800717a:	f858 2b04 	ldr.w	r2, [r8], #4
 800717e:	f8d1 c000 	ldr.w	ip, [r1]
 8007182:	fa1f fe82 	uxth.w	lr, r2
 8007186:	fa1f f38c 	uxth.w	r3, ip
 800718a:	eba3 030e 	sub.w	r3, r3, lr
 800718e:	4403      	add	r3, r0
 8007190:	0c12      	lsrs	r2, r2, #16
 8007192:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007196:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a0:	45c1      	cmp	r9, r8
 80071a2:	f841 3b04 	str.w	r3, [r1], #4
 80071a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071aa:	d2e6      	bcs.n	800717a <quorem+0xa4>
 80071ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b4:	b922      	cbnz	r2, 80071c0 <quorem+0xea>
 80071b6:	3b04      	subs	r3, #4
 80071b8:	429d      	cmp	r5, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	d30b      	bcc.n	80071d6 <quorem+0x100>
 80071be:	613c      	str	r4, [r7, #16]
 80071c0:	3601      	adds	r6, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	b003      	add	sp, #12
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	3b04      	subs	r3, #4
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	d1cb      	bne.n	800716a <quorem+0x94>
 80071d2:	3c01      	subs	r4, #1
 80071d4:	e7c6      	b.n	8007164 <quorem+0x8e>
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	3b04      	subs	r3, #4
 80071da:	2a00      	cmp	r2, #0
 80071dc:	d1ef      	bne.n	80071be <quorem+0xe8>
 80071de:	3c01      	subs	r4, #1
 80071e0:	e7ea      	b.n	80071b8 <quorem+0xe2>
 80071e2:	2000      	movs	r0, #0
 80071e4:	e7ee      	b.n	80071c4 <quorem+0xee>
	...

080071e8 <_dtoa_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	69c7      	ldr	r7, [r0, #28]
 80071ee:	b099      	sub	sp, #100	@ 0x64
 80071f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071f4:	ec55 4b10 	vmov	r4, r5, d0
 80071f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80071fc:	4683      	mov	fp, r0
 80071fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007202:	b97f      	cbnz	r7, 8007224 <_dtoa_r+0x3c>
 8007204:	2010      	movs	r0, #16
 8007206:	f7ff f877 	bl	80062f8 <malloc>
 800720a:	4602      	mov	r2, r0
 800720c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007210:	b920      	cbnz	r0, 800721c <_dtoa_r+0x34>
 8007212:	4ba7      	ldr	r3, [pc, #668]	@ (80074b0 <_dtoa_r+0x2c8>)
 8007214:	21ef      	movs	r1, #239	@ 0xef
 8007216:	48a7      	ldr	r0, [pc, #668]	@ (80074b4 <_dtoa_r+0x2cc>)
 8007218:	f001 fa22 	bl	8008660 <__assert_func>
 800721c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007220:	6007      	str	r7, [r0, #0]
 8007222:	60c7      	str	r7, [r0, #12]
 8007224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	b159      	cbz	r1, 8007244 <_dtoa_r+0x5c>
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	604a      	str	r2, [r1, #4]
 8007230:	2301      	movs	r3, #1
 8007232:	4093      	lsls	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
 8007236:	4658      	mov	r0, fp
 8007238:	f000 fe24 	bl	8007e84 <_Bfree>
 800723c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	1e2b      	subs	r3, r5, #0
 8007246:	bfb9      	ittee	lt
 8007248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800724c:	9303      	strlt	r3, [sp, #12]
 800724e:	2300      	movge	r3, #0
 8007250:	6033      	strge	r3, [r6, #0]
 8007252:	9f03      	ldr	r7, [sp, #12]
 8007254:	4b98      	ldr	r3, [pc, #608]	@ (80074b8 <_dtoa_r+0x2d0>)
 8007256:	bfbc      	itt	lt
 8007258:	2201      	movlt	r2, #1
 800725a:	6032      	strlt	r2, [r6, #0]
 800725c:	43bb      	bics	r3, r7
 800725e:	d112      	bne.n	8007286 <_dtoa_r+0x9e>
 8007260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800726c:	4323      	orrs	r3, r4
 800726e:	f000 854d 	beq.w	8007d0c <_dtoa_r+0xb24>
 8007272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074cc <_dtoa_r+0x2e4>
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 854f 	beq.w	8007d1c <_dtoa_r+0xb34>
 800727e:	f10a 0303 	add.w	r3, sl, #3
 8007282:	f000 bd49 	b.w	8007d18 <_dtoa_r+0xb30>
 8007286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	ec51 0b17 	vmov	r0, r1, d7
 8007290:	2300      	movs	r3, #0
 8007292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007296:	f7f9 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800729a:	4680      	mov	r8, r0
 800729c:	b158      	cbz	r0, 80072b6 <_dtoa_r+0xce>
 800729e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072a0:	2301      	movs	r3, #1
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072a6:	b113      	cbz	r3, 80072ae <_dtoa_r+0xc6>
 80072a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072aa:	4b84      	ldr	r3, [pc, #528]	@ (80074bc <_dtoa_r+0x2d4>)
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074d0 <_dtoa_r+0x2e8>
 80072b2:	f000 bd33 	b.w	8007d1c <_dtoa_r+0xb34>
 80072b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ba:	aa16      	add	r2, sp, #88	@ 0x58
 80072bc:	a917      	add	r1, sp, #92	@ 0x5c
 80072be:	4658      	mov	r0, fp
 80072c0:	f001 f8ca 	bl	8008458 <__d2b>
 80072c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072c8:	4681      	mov	r9, r0
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d077      	beq.n	80073be <_dtoa_r+0x1d6>
 80072ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072e8:	4619      	mov	r1, r3
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b74      	ldr	r3, [pc, #464]	@ (80074c0 <_dtoa_r+0x2d8>)
 80072ee:	f7f8 ffeb 	bl	80002c8 <__aeabi_dsub>
 80072f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007498 <_dtoa_r+0x2b0>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f9 f99e 	bl	8000638 <__aeabi_dmul>
 80072fc:	a368      	add	r3, pc, #416	@ (adr r3, 80074a0 <_dtoa_r+0x2b8>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f7f8 ffe3 	bl	80002cc <__adddf3>
 8007306:	4604      	mov	r4, r0
 8007308:	4630      	mov	r0, r6
 800730a:	460d      	mov	r5, r1
 800730c:	f7f9 f92a 	bl	8000564 <__aeabi_i2d>
 8007310:	a365      	add	r3, pc, #404	@ (adr r3, 80074a8 <_dtoa_r+0x2c0>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f9 f98f 	bl	8000638 <__aeabi_dmul>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f8 ffd3 	bl	80002cc <__adddf3>
 8007326:	4604      	mov	r4, r0
 8007328:	460d      	mov	r5, r1
 800732a:	f7f9 fc35 	bl	8000b98 <__aeabi_d2iz>
 800732e:	2200      	movs	r2, #0
 8007330:	4607      	mov	r7, r0
 8007332:	2300      	movs	r3, #0
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f9 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800733c:	b140      	cbz	r0, 8007350 <_dtoa_r+0x168>
 800733e:	4638      	mov	r0, r7
 8007340:	f7f9 f910 	bl	8000564 <__aeabi_i2d>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f9 fbde 	bl	8000b08 <__aeabi_dcmpeq>
 800734c:	b900      	cbnz	r0, 8007350 <_dtoa_r+0x168>
 800734e:	3f01      	subs	r7, #1
 8007350:	2f16      	cmp	r7, #22
 8007352:	d851      	bhi.n	80073f8 <_dtoa_r+0x210>
 8007354:	4b5b      	ldr	r3, [pc, #364]	@ (80074c4 <_dtoa_r+0x2dc>)
 8007356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007362:	f7f9 fbdb 	bl	8000b1c <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d048      	beq.n	80073fc <_dtoa_r+0x214>
 800736a:	3f01      	subs	r7, #1
 800736c:	2300      	movs	r3, #0
 800736e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	bf44      	itt	mi
 8007378:	f1c3 0801 	rsbmi	r8, r3, #1
 800737c:	2300      	movmi	r3, #0
 800737e:	9208      	str	r2, [sp, #32]
 8007380:	bf54      	ite	pl
 8007382:	f04f 0800 	movpl.w	r8, #0
 8007386:	9308      	strmi	r3, [sp, #32]
 8007388:	2f00      	cmp	r7, #0
 800738a:	db39      	blt.n	8007400 <_dtoa_r+0x218>
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007390:	443b      	add	r3, r7
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2300      	movs	r3, #0
 8007396:	930a      	str	r3, [sp, #40]	@ 0x28
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	2b09      	cmp	r3, #9
 800739c:	d864      	bhi.n	8007468 <_dtoa_r+0x280>
 800739e:	2b05      	cmp	r3, #5
 80073a0:	bfc4      	itt	gt
 80073a2:	3b04      	subgt	r3, #4
 80073a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a8:	f1a3 0302 	sub.w	r3, r3, #2
 80073ac:	bfcc      	ite	gt
 80073ae:	2400      	movgt	r4, #0
 80073b0:	2401      	movle	r4, #1
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d863      	bhi.n	800747e <_dtoa_r+0x296>
 80073b6:	e8df f003 	tbb	[pc, r3]
 80073ba:	372a      	.short	0x372a
 80073bc:	5535      	.short	0x5535
 80073be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073c2:	441e      	add	r6, r3
 80073c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	bfc1      	itttt	gt
 80073cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073d0:	409f      	lslgt	r7, r3
 80073d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073da:	bfd6      	itet	le
 80073dc:	f1c3 0320 	rsble	r3, r3, #32
 80073e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073e4:	fa04 f003 	lslle.w	r0, r4, r3
 80073e8:	f7f9 f8ac 	bl	8000544 <__aeabi_ui2d>
 80073ec:	2201      	movs	r2, #1
 80073ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073f2:	3e01      	subs	r6, #1
 80073f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80073f6:	e777      	b.n	80072e8 <_dtoa_r+0x100>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e7b8      	b.n	800736e <_dtoa_r+0x186>
 80073fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80073fe:	e7b7      	b.n	8007370 <_dtoa_r+0x188>
 8007400:	427b      	negs	r3, r7
 8007402:	930a      	str	r3, [sp, #40]	@ 0x28
 8007404:	2300      	movs	r3, #0
 8007406:	eba8 0807 	sub.w	r8, r8, r7
 800740a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800740c:	e7c4      	b.n	8007398 <_dtoa_r+0x1b0>
 800740e:	2300      	movs	r3, #0
 8007410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	dc35      	bgt.n	8007484 <_dtoa_r+0x29c>
 8007418:	2301      	movs	r3, #1
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	9307      	str	r3, [sp, #28]
 800741e:	461a      	mov	r2, r3
 8007420:	920e      	str	r2, [sp, #56]	@ 0x38
 8007422:	e00b      	b.n	800743c <_dtoa_r+0x254>
 8007424:	2301      	movs	r3, #1
 8007426:	e7f3      	b.n	8007410 <_dtoa_r+0x228>
 8007428:	2300      	movs	r3, #0
 800742a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800742c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	9307      	str	r3, [sp, #28]
 8007438:	bfb8      	it	lt
 800743a:	2301      	movlt	r3, #1
 800743c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007440:	2100      	movs	r1, #0
 8007442:	2204      	movs	r2, #4
 8007444:	f102 0514 	add.w	r5, r2, #20
 8007448:	429d      	cmp	r5, r3
 800744a:	d91f      	bls.n	800748c <_dtoa_r+0x2a4>
 800744c:	6041      	str	r1, [r0, #4]
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fcd8 	bl	8007e04 <_Balloc>
 8007454:	4682      	mov	sl, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d13c      	bne.n	80074d4 <_dtoa_r+0x2ec>
 800745a:	4b1b      	ldr	r3, [pc, #108]	@ (80074c8 <_dtoa_r+0x2e0>)
 800745c:	4602      	mov	r2, r0
 800745e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007462:	e6d8      	b.n	8007216 <_dtoa_r+0x2e>
 8007464:	2301      	movs	r3, #1
 8007466:	e7e0      	b.n	800742a <_dtoa_r+0x242>
 8007468:	2401      	movs	r4, #1
 800746a:	2300      	movs	r3, #0
 800746c:	9309      	str	r3, [sp, #36]	@ 0x24
 800746e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	2200      	movs	r2, #0
 800747a:	2312      	movs	r3, #18
 800747c:	e7d0      	b.n	8007420 <_dtoa_r+0x238>
 800747e:	2301      	movs	r3, #1
 8007480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007482:	e7f5      	b.n	8007470 <_dtoa_r+0x288>
 8007484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	e7d7      	b.n	800743c <_dtoa_r+0x254>
 800748c:	3101      	adds	r1, #1
 800748e:	0052      	lsls	r2, r2, #1
 8007490:	e7d8      	b.n	8007444 <_dtoa_r+0x25c>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	636f4361 	.word	0x636f4361
 800749c:	3fd287a7 	.word	0x3fd287a7
 80074a0:	8b60c8b3 	.word	0x8b60c8b3
 80074a4:	3fc68a28 	.word	0x3fc68a28
 80074a8:	509f79fb 	.word	0x509f79fb
 80074ac:	3fd34413 	.word	0x3fd34413
 80074b0:	08008fc9 	.word	0x08008fc9
 80074b4:	08008fe0 	.word	0x08008fe0
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	08008f99 	.word	0x08008f99
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	080090d8 	.word	0x080090d8
 80074c8:	08009038 	.word	0x08009038
 80074cc:	08008fc5 	.word	0x08008fc5
 80074d0:	08008f98 	.word	0x08008f98
 80074d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074d8:	6018      	str	r0, [r3, #0]
 80074da:	9b07      	ldr	r3, [sp, #28]
 80074dc:	2b0e      	cmp	r3, #14
 80074de:	f200 80a4 	bhi.w	800762a <_dtoa_r+0x442>
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	f000 80a1 	beq.w	800762a <_dtoa_r+0x442>
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	dd33      	ble.n	8007554 <_dtoa_r+0x36c>
 80074ec:	4bad      	ldr	r3, [pc, #692]	@ (80077a4 <_dtoa_r+0x5bc>)
 80074ee:	f007 020f 	and.w	r2, r7, #15
 80074f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f6:	ed93 7b00 	vldr	d7, [r3]
 80074fa:	05f8      	lsls	r0, r7, #23
 80074fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007504:	d516      	bpl.n	8007534 <_dtoa_r+0x34c>
 8007506:	4ba8      	ldr	r3, [pc, #672]	@ (80077a8 <_dtoa_r+0x5c0>)
 8007508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800750c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007510:	f7f9 f9bc 	bl	800088c <__aeabi_ddiv>
 8007514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007518:	f004 040f 	and.w	r4, r4, #15
 800751c:	2603      	movs	r6, #3
 800751e:	4da2      	ldr	r5, [pc, #648]	@ (80077a8 <_dtoa_r+0x5c0>)
 8007520:	b954      	cbnz	r4, 8007538 <_dtoa_r+0x350>
 8007522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752a:	f7f9 f9af 	bl	800088c <__aeabi_ddiv>
 800752e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007532:	e028      	b.n	8007586 <_dtoa_r+0x39e>
 8007534:	2602      	movs	r6, #2
 8007536:	e7f2      	b.n	800751e <_dtoa_r+0x336>
 8007538:	07e1      	lsls	r1, r4, #31
 800753a:	d508      	bpl.n	800754e <_dtoa_r+0x366>
 800753c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007544:	f7f9 f878 	bl	8000638 <__aeabi_dmul>
 8007548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800754c:	3601      	adds	r6, #1
 800754e:	1064      	asrs	r4, r4, #1
 8007550:	3508      	adds	r5, #8
 8007552:	e7e5      	b.n	8007520 <_dtoa_r+0x338>
 8007554:	f000 80d2 	beq.w	80076fc <_dtoa_r+0x514>
 8007558:	427c      	negs	r4, r7
 800755a:	4b92      	ldr	r3, [pc, #584]	@ (80077a4 <_dtoa_r+0x5bc>)
 800755c:	4d92      	ldr	r5, [pc, #584]	@ (80077a8 <_dtoa_r+0x5c0>)
 800755e:	f004 020f 	and.w	r2, r4, #15
 8007562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756e:	f7f9 f863 	bl	8000638 <__aeabi_dmul>
 8007572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007576:	1124      	asrs	r4, r4, #4
 8007578:	2300      	movs	r3, #0
 800757a:	2602      	movs	r6, #2
 800757c:	2c00      	cmp	r4, #0
 800757e:	f040 80b2 	bne.w	80076e6 <_dtoa_r+0x4fe>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d3      	bne.n	800752e <_dtoa_r+0x346>
 8007586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80b7 	beq.w	8007700 <_dtoa_r+0x518>
 8007592:	4b86      	ldr	r3, [pc, #536]	@ (80077ac <_dtoa_r+0x5c4>)
 8007594:	2200      	movs	r2, #0
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f9 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	f000 80ae 	beq.w	8007700 <_dtoa_r+0x518>
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80aa 	beq.w	8007700 <_dtoa_r+0x518>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd37      	ble.n	8007622 <_dtoa_r+0x43a>
 80075b2:	1e7b      	subs	r3, r7, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	4620      	mov	r0, r4
 80075b8:	4b7d      	ldr	r3, [pc, #500]	@ (80077b0 <_dtoa_r+0x5c8>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	4629      	mov	r1, r5
 80075be:	f7f9 f83b 	bl	8000638 <__aeabi_dmul>
 80075c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c6:	9c00      	ldr	r4, [sp, #0]
 80075c8:	3601      	adds	r6, #1
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7f8 ffca 	bl	8000564 <__aeabi_i2d>
 80075d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d4:	f7f9 f830 	bl	8000638 <__aeabi_dmul>
 80075d8:	4b76      	ldr	r3, [pc, #472]	@ (80077b4 <_dtoa_r+0x5cc>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe76 	bl	80002cc <__adddf3>
 80075e0:	4605      	mov	r5, r0
 80075e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	f040 808d 	bne.w	8007706 <_dtoa_r+0x51e>
 80075ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f0:	4b71      	ldr	r3, [pc, #452]	@ (80077b8 <_dtoa_r+0x5d0>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	f7f8 fe68 	bl	80002c8 <__aeabi_dsub>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007600:	462a      	mov	r2, r5
 8007602:	4633      	mov	r3, r6
 8007604:	f7f9 faa8 	bl	8000b58 <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	f040 828b 	bne.w	8007b24 <_dtoa_r+0x93c>
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	462a      	mov	r2, r5
 8007614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007618:	f7f9 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 8128 	bne.w	8007872 <_dtoa_r+0x68a>
 8007622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800762a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f2c0 815a 	blt.w	80078e6 <_dtoa_r+0x6fe>
 8007632:	2f0e      	cmp	r7, #14
 8007634:	f300 8157 	bgt.w	80078e6 <_dtoa_r+0x6fe>
 8007638:	4b5a      	ldr	r3, [pc, #360]	@ (80077a4 <_dtoa_r+0x5bc>)
 800763a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800763e:	ed93 7b00 	vldr	d7, [r3]
 8007642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007644:	2b00      	cmp	r3, #0
 8007646:	ed8d 7b00 	vstr	d7, [sp]
 800764a:	da03      	bge.n	8007654 <_dtoa_r+0x46c>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f340 8101 	ble.w	8007856 <_dtoa_r+0x66e>
 8007654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007658:	4656      	mov	r6, sl
 800765a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f9 f913 	bl	800088c <__aeabi_ddiv>
 8007666:	f7f9 fa97 	bl	8000b98 <__aeabi_d2iz>
 800766a:	4680      	mov	r8, r0
 800766c:	f7f8 ff7a 	bl	8000564 <__aeabi_i2d>
 8007670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007674:	f7f8 ffe0 	bl	8000638 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007684:	f7f8 fe20 	bl	80002c8 <__aeabi_dsub>
 8007688:	f806 4b01 	strb.w	r4, [r6], #1
 800768c:	9d07      	ldr	r5, [sp, #28]
 800768e:	eba6 040a 	sub.w	r4, r6, sl
 8007692:	42a5      	cmp	r5, r4
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	f040 8117 	bne.w	80078ca <_dtoa_r+0x6e2>
 800769c:	f7f8 fe16 	bl	80002cc <__adddf3>
 80076a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a4:	4604      	mov	r4, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	f7f9 fa56 	bl	8000b58 <__aeabi_dcmpgt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 80f9 	bne.w	80078a4 <_dtoa_r+0x6bc>
 80076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 fa25 	bl	8000b08 <__aeabi_dcmpeq>
 80076be:	b118      	cbz	r0, 80076c8 <_dtoa_r+0x4e0>
 80076c0:	f018 0f01 	tst.w	r8, #1
 80076c4:	f040 80ee 	bne.w	80078a4 <_dtoa_r+0x6bc>
 80076c8:	4649      	mov	r1, r9
 80076ca:	4658      	mov	r0, fp
 80076cc:	f000 fbda 	bl	8007e84 <_Bfree>
 80076d0:	2300      	movs	r3, #0
 80076d2:	7033      	strb	r3, [r6, #0]
 80076d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076d6:	3701      	adds	r7, #1
 80076d8:	601f      	str	r7, [r3, #0]
 80076da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 831d 	beq.w	8007d1c <_dtoa_r+0xb34>
 80076e2:	601e      	str	r6, [r3, #0]
 80076e4:	e31a      	b.n	8007d1c <_dtoa_r+0xb34>
 80076e6:	07e2      	lsls	r2, r4, #31
 80076e8:	d505      	bpl.n	80076f6 <_dtoa_r+0x50e>
 80076ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ee:	f7f8 ffa3 	bl	8000638 <__aeabi_dmul>
 80076f2:	3601      	adds	r6, #1
 80076f4:	2301      	movs	r3, #1
 80076f6:	1064      	asrs	r4, r4, #1
 80076f8:	3508      	adds	r5, #8
 80076fa:	e73f      	b.n	800757c <_dtoa_r+0x394>
 80076fc:	2602      	movs	r6, #2
 80076fe:	e742      	b.n	8007586 <_dtoa_r+0x39e>
 8007700:	9c07      	ldr	r4, [sp, #28]
 8007702:	9704      	str	r7, [sp, #16]
 8007704:	e761      	b.n	80075ca <_dtoa_r+0x3e2>
 8007706:	4b27      	ldr	r3, [pc, #156]	@ (80077a4 <_dtoa_r+0x5bc>)
 8007708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800770a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800770e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007712:	4454      	add	r4, sl
 8007714:	2900      	cmp	r1, #0
 8007716:	d053      	beq.n	80077c0 <_dtoa_r+0x5d8>
 8007718:	4928      	ldr	r1, [pc, #160]	@ (80077bc <_dtoa_r+0x5d4>)
 800771a:	2000      	movs	r0, #0
 800771c:	f7f9 f8b6 	bl	800088c <__aeabi_ddiv>
 8007720:	4633      	mov	r3, r6
 8007722:	462a      	mov	r2, r5
 8007724:	f7f8 fdd0 	bl	80002c8 <__aeabi_dsub>
 8007728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800772c:	4656      	mov	r6, sl
 800772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007732:	f7f9 fa31 	bl	8000b98 <__aeabi_d2iz>
 8007736:	4605      	mov	r5, r0
 8007738:	f7f8 ff14 	bl	8000564 <__aeabi_i2d>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007744:	f7f8 fdc0 	bl	80002c8 <__aeabi_dsub>
 8007748:	3530      	adds	r5, #48	@ 0x30
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007752:	f806 5b01 	strb.w	r5, [r6], #1
 8007756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800775a:	f7f9 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	d171      	bne.n	8007846 <_dtoa_r+0x65e>
 8007762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007766:	4911      	ldr	r1, [pc, #68]	@ (80077ac <_dtoa_r+0x5c4>)
 8007768:	2000      	movs	r0, #0
 800776a:	f7f8 fdad 	bl	80002c8 <__aeabi_dsub>
 800776e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007772:	f7f9 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8007776:	2800      	cmp	r0, #0
 8007778:	f040 8095 	bne.w	80078a6 <_dtoa_r+0x6be>
 800777c:	42a6      	cmp	r6, r4
 800777e:	f43f af50 	beq.w	8007622 <_dtoa_r+0x43a>
 8007782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007786:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <_dtoa_r+0x5c8>)
 8007788:	2200      	movs	r2, #0
 800778a:	f7f8 ff55 	bl	8000638 <__aeabi_dmul>
 800778e:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <_dtoa_r+0x5c8>)
 8007790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007794:	2200      	movs	r2, #0
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f8 ff4d 	bl	8000638 <__aeabi_dmul>
 800779e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a2:	e7c4      	b.n	800772e <_dtoa_r+0x546>
 80077a4:	080090d8 	.word	0x080090d8
 80077a8:	080090b0 	.word	0x080090b0
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	40240000 	.word	0x40240000
 80077b4:	401c0000 	.word	0x401c0000
 80077b8:	40140000 	.word	0x40140000
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7f8 ff38 	bl	8000638 <__aeabi_dmul>
 80077c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80077ce:	4656      	mov	r6, sl
 80077d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d4:	f7f9 f9e0 	bl	8000b98 <__aeabi_d2iz>
 80077d8:	4605      	mov	r5, r0
 80077da:	f7f8 fec3 	bl	8000564 <__aeabi_i2d>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e6:	f7f8 fd6f 	bl	80002c8 <__aeabi_dsub>
 80077ea:	3530      	adds	r5, #48	@ 0x30
 80077ec:	f806 5b01 	strb.w	r5, [r6], #1
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	42a6      	cmp	r6, r4
 80077f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	d124      	bne.n	800784a <_dtoa_r+0x662>
 8007800:	4bac      	ldr	r3, [pc, #688]	@ (8007ab4 <_dtoa_r+0x8cc>)
 8007802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007806:	f7f8 fd61 	bl	80002cc <__adddf3>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007812:	f7f9 f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 8007816:	2800      	cmp	r0, #0
 8007818:	d145      	bne.n	80078a6 <_dtoa_r+0x6be>
 800781a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800781e:	49a5      	ldr	r1, [pc, #660]	@ (8007ab4 <_dtoa_r+0x8cc>)
 8007820:	2000      	movs	r0, #0
 8007822:	f7f8 fd51 	bl	80002c8 <__aeabi_dsub>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782e:	f7f9 f975 	bl	8000b1c <__aeabi_dcmplt>
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f aef5 	beq.w	8007622 <_dtoa_r+0x43a>
 8007838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800783a:	1e73      	subs	r3, r6, #1
 800783c:	9315      	str	r3, [sp, #84]	@ 0x54
 800783e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007842:	2b30      	cmp	r3, #48	@ 0x30
 8007844:	d0f8      	beq.n	8007838 <_dtoa_r+0x650>
 8007846:	9f04      	ldr	r7, [sp, #16]
 8007848:	e73e      	b.n	80076c8 <_dtoa_r+0x4e0>
 800784a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ab8 <_dtoa_r+0x8d0>)
 800784c:	f7f8 fef4 	bl	8000638 <__aeabi_dmul>
 8007850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007854:	e7bc      	b.n	80077d0 <_dtoa_r+0x5e8>
 8007856:	d10c      	bne.n	8007872 <_dtoa_r+0x68a>
 8007858:	4b98      	ldr	r3, [pc, #608]	@ (8007abc <_dtoa_r+0x8d4>)
 800785a:	2200      	movs	r2, #0
 800785c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007860:	f7f8 feea 	bl	8000638 <__aeabi_dmul>
 8007864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007868:	f7f9 f96c 	bl	8000b44 <__aeabi_dcmpge>
 800786c:	2800      	cmp	r0, #0
 800786e:	f000 8157 	beq.w	8007b20 <_dtoa_r+0x938>
 8007872:	2400      	movs	r4, #0
 8007874:	4625      	mov	r5, r4
 8007876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007878:	43db      	mvns	r3, r3
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	4656      	mov	r6, sl
 800787e:	2700      	movs	r7, #0
 8007880:	4621      	mov	r1, r4
 8007882:	4658      	mov	r0, fp
 8007884:	f000 fafe 	bl	8007e84 <_Bfree>
 8007888:	2d00      	cmp	r5, #0
 800788a:	d0dc      	beq.n	8007846 <_dtoa_r+0x65e>
 800788c:	b12f      	cbz	r7, 800789a <_dtoa_r+0x6b2>
 800788e:	42af      	cmp	r7, r5
 8007890:	d003      	beq.n	800789a <_dtoa_r+0x6b2>
 8007892:	4639      	mov	r1, r7
 8007894:	4658      	mov	r0, fp
 8007896:	f000 faf5 	bl	8007e84 <_Bfree>
 800789a:	4629      	mov	r1, r5
 800789c:	4658      	mov	r0, fp
 800789e:	f000 faf1 	bl	8007e84 <_Bfree>
 80078a2:	e7d0      	b.n	8007846 <_dtoa_r+0x65e>
 80078a4:	9704      	str	r7, [sp, #16]
 80078a6:	4633      	mov	r3, r6
 80078a8:	461e      	mov	r6, r3
 80078aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ae:	2a39      	cmp	r2, #57	@ 0x39
 80078b0:	d107      	bne.n	80078c2 <_dtoa_r+0x6da>
 80078b2:	459a      	cmp	sl, r3
 80078b4:	d1f8      	bne.n	80078a8 <_dtoa_r+0x6c0>
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	3201      	adds	r2, #1
 80078ba:	9204      	str	r2, [sp, #16]
 80078bc:	2230      	movs	r2, #48	@ 0x30
 80078be:	f88a 2000 	strb.w	r2, [sl]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	3201      	adds	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e7bd      	b.n	8007846 <_dtoa_r+0x65e>
 80078ca:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab8 <_dtoa_r+0x8d0>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	f7f8 feb3 	bl	8000638 <__aeabi_dmul>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	f7f9 f915 	bl	8000b08 <__aeabi_dcmpeq>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f aebb 	beq.w	800765a <_dtoa_r+0x472>
 80078e4:	e6f0      	b.n	80076c8 <_dtoa_r+0x4e0>
 80078e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	f000 80db 	beq.w	8007aa4 <_dtoa_r+0x8bc>
 80078ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f0:	2a01      	cmp	r2, #1
 80078f2:	f300 80bf 	bgt.w	8007a74 <_dtoa_r+0x88c>
 80078f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	f000 80b7 	beq.w	8007a6c <_dtoa_r+0x884>
 80078fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007904:	4646      	mov	r6, r8
 8007906:	9a08      	ldr	r2, [sp, #32]
 8007908:	2101      	movs	r1, #1
 800790a:	441a      	add	r2, r3
 800790c:	4658      	mov	r0, fp
 800790e:	4498      	add	r8, r3
 8007910:	9208      	str	r2, [sp, #32]
 8007912:	f000 fb6b 	bl	8007fec <__i2b>
 8007916:	4605      	mov	r5, r0
 8007918:	b15e      	cbz	r6, 8007932 <_dtoa_r+0x74a>
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd08      	ble.n	8007932 <_dtoa_r+0x74a>
 8007920:	42b3      	cmp	r3, r6
 8007922:	9a08      	ldr	r2, [sp, #32]
 8007924:	bfa8      	it	ge
 8007926:	4633      	movge	r3, r6
 8007928:	eba8 0803 	sub.w	r8, r8, r3
 800792c:	1af6      	subs	r6, r6, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007934:	b1f3      	cbz	r3, 8007974 <_dtoa_r+0x78c>
 8007936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80b7 	beq.w	8007aac <_dtoa_r+0x8c4>
 800793e:	b18c      	cbz	r4, 8007964 <_dtoa_r+0x77c>
 8007940:	4629      	mov	r1, r5
 8007942:	4622      	mov	r2, r4
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fc11 	bl	800816c <__pow5mult>
 800794a:	464a      	mov	r2, r9
 800794c:	4601      	mov	r1, r0
 800794e:	4605      	mov	r5, r0
 8007950:	4658      	mov	r0, fp
 8007952:	f000 fb61 	bl	8008018 <__multiply>
 8007956:	4649      	mov	r1, r9
 8007958:	9004      	str	r0, [sp, #16]
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fa92 	bl	8007e84 <_Bfree>
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	4699      	mov	r9, r3
 8007964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007966:	1b1a      	subs	r2, r3, r4
 8007968:	d004      	beq.n	8007974 <_dtoa_r+0x78c>
 800796a:	4649      	mov	r1, r9
 800796c:	4658      	mov	r0, fp
 800796e:	f000 fbfd 	bl	800816c <__pow5mult>
 8007972:	4681      	mov	r9, r0
 8007974:	2101      	movs	r1, #1
 8007976:	4658      	mov	r0, fp
 8007978:	f000 fb38 	bl	8007fec <__i2b>
 800797c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800797e:	4604      	mov	r4, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 81cf 	beq.w	8007d24 <_dtoa_r+0xb3c>
 8007986:	461a      	mov	r2, r3
 8007988:	4601      	mov	r1, r0
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fbee 	bl	800816c <__pow5mult>
 8007990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007992:	2b01      	cmp	r3, #1
 8007994:	4604      	mov	r4, r0
 8007996:	f300 8095 	bgt.w	8007ac4 <_dtoa_r+0x8dc>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 8087 	bne.w	8007ab0 <_dtoa_r+0x8c8>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8089 	bne.w	8007ac0 <_dtoa_r+0x8d8>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	0d1b      	lsrs	r3, r3, #20
 80079b6:	051b      	lsls	r3, r3, #20
 80079b8:	b12b      	cbz	r3, 80079c6 <_dtoa_r+0x7de>
 80079ba:	9b08      	ldr	r3, [sp, #32]
 80079bc:	3301      	adds	r3, #1
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	f108 0801 	add.w	r8, r8, #1
 80079c4:	2301      	movs	r3, #1
 80079c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 81b0 	beq.w	8007d30 <_dtoa_r+0xb48>
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079d6:	6918      	ldr	r0, [r3, #16]
 80079d8:	f000 fabc 	bl	8007f54 <__hi0bits>
 80079dc:	f1c0 0020 	rsb	r0, r0, #32
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	4418      	add	r0, r3
 80079e4:	f010 001f 	ands.w	r0, r0, #31
 80079e8:	d077      	beq.n	8007ada <_dtoa_r+0x8f2>
 80079ea:	f1c0 0320 	rsb	r3, r0, #32
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	dd6b      	ble.n	8007aca <_dtoa_r+0x8e2>
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	f1c0 001c 	rsb	r0, r0, #28
 80079f8:	4403      	add	r3, r0
 80079fa:	4480      	add	r8, r0
 80079fc:	4406      	add	r6, r0
 80079fe:	9308      	str	r3, [sp, #32]
 8007a00:	f1b8 0f00 	cmp.w	r8, #0
 8007a04:	dd05      	ble.n	8007a12 <_dtoa_r+0x82a>
 8007a06:	4649      	mov	r1, r9
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fc08 	bl	8008220 <__lshift>
 8007a10:	4681      	mov	r9, r0
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd05      	ble.n	8007a24 <_dtoa_r+0x83c>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4658      	mov	r0, fp
 8007a1e:	f000 fbff 	bl	8008220 <__lshift>
 8007a22:	4604      	mov	r4, r0
 8007a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d059      	beq.n	8007ade <_dtoa_r+0x8f6>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4648      	mov	r0, r9
 8007a2e:	f000 fc63 	bl	80082f8 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	da53      	bge.n	8007ade <_dtoa_r+0x8f6>
 8007a36:	1e7b      	subs	r3, r7, #1
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	220a      	movs	r2, #10
 8007a40:	4658      	mov	r0, fp
 8007a42:	f000 fa41 	bl	8007ec8 <__multadd>
 8007a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a48:	4681      	mov	r9, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8172 	beq.w	8007d34 <_dtoa_r+0xb4c>
 8007a50:	2300      	movs	r3, #0
 8007a52:	4629      	mov	r1, r5
 8007a54:	220a      	movs	r2, #10
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 fa36 	bl	8007ec8 <__multadd>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	4605      	mov	r5, r0
 8007a62:	dc67      	bgt.n	8007b34 <_dtoa_r+0x94c>
 8007a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	dc41      	bgt.n	8007aee <_dtoa_r+0x906>
 8007a6a:	e063      	b.n	8007b34 <_dtoa_r+0x94c>
 8007a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a72:	e746      	b.n	8007902 <_dtoa_r+0x71a>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	1e5c      	subs	r4, r3, #1
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	bfbf      	itttt	lt
 8007a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a84:	1ae3      	sublt	r3, r4, r3
 8007a86:	bfb4      	ite	lt
 8007a88:	18d2      	addlt	r2, r2, r3
 8007a8a:	1b1c      	subge	r4, r3, r4
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	bfbc      	itt	lt
 8007a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a92:	2400      	movlt	r4, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfb5      	itete	lt
 8007a98:	eba8 0603 	sublt.w	r6, r8, r3
 8007a9c:	9b07      	ldrge	r3, [sp, #28]
 8007a9e:	2300      	movlt	r3, #0
 8007aa0:	4646      	movge	r6, r8
 8007aa2:	e730      	b.n	8007906 <_dtoa_r+0x71e>
 8007aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007aa8:	4646      	mov	r6, r8
 8007aaa:	e735      	b.n	8007918 <_dtoa_r+0x730>
 8007aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007aae:	e75c      	b.n	800796a <_dtoa_r+0x782>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e788      	b.n	80079c6 <_dtoa_r+0x7de>
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	40240000 	.word	0x40240000
 8007abc:	40140000 	.word	0x40140000
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	e780      	b.n	80079c6 <_dtoa_r+0x7de>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ac8:	e782      	b.n	80079d0 <_dtoa_r+0x7e8>
 8007aca:	d099      	beq.n	8007a00 <_dtoa_r+0x818>
 8007acc:	9a08      	ldr	r2, [sp, #32]
 8007ace:	331c      	adds	r3, #28
 8007ad0:	441a      	add	r2, r3
 8007ad2:	4498      	add	r8, r3
 8007ad4:	441e      	add	r6, r3
 8007ad6:	9208      	str	r2, [sp, #32]
 8007ad8:	e792      	b.n	8007a00 <_dtoa_r+0x818>
 8007ada:	4603      	mov	r3, r0
 8007adc:	e7f6      	b.n	8007acc <_dtoa_r+0x8e4>
 8007ade:	9b07      	ldr	r3, [sp, #28]
 8007ae0:	9704      	str	r7, [sp, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dc20      	bgt.n	8007b28 <_dtoa_r+0x940>
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	dd1e      	ble.n	8007b2c <_dtoa_r+0x944>
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f aec0 	bne.w	8007876 <_dtoa_r+0x68e>
 8007af6:	4621      	mov	r1, r4
 8007af8:	2205      	movs	r2, #5
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 f9e4 	bl	8007ec8 <__multadd>
 8007b00:	4601      	mov	r1, r0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fbf7 	bl	80082f8 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	f77f aeb3 	ble.w	8007876 <_dtoa_r+0x68e>
 8007b10:	4656      	mov	r6, sl
 8007b12:	2331      	movs	r3, #49	@ 0x31
 8007b14:	f806 3b01 	strb.w	r3, [r6], #1
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	e6ae      	b.n	800787e <_dtoa_r+0x696>
 8007b20:	9c07      	ldr	r4, [sp, #28]
 8007b22:	9704      	str	r7, [sp, #16]
 8007b24:	4625      	mov	r5, r4
 8007b26:	e7f3      	b.n	8007b10 <_dtoa_r+0x928>
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8104 	beq.w	8007d3c <_dtoa_r+0xb54>
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	dd05      	ble.n	8007b44 <_dtoa_r+0x95c>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	f000 fb6f 	bl	8008220 <__lshift>
 8007b42:	4605      	mov	r5, r0
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d05a      	beq.n	8007c00 <_dtoa_r+0xa18>
 8007b4a:	6869      	ldr	r1, [r5, #4]
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 f959 	bl	8007e04 <_Balloc>
 8007b52:	4606      	mov	r6, r0
 8007b54:	b928      	cbnz	r0, 8007b62 <_dtoa_r+0x97a>
 8007b56:	4b84      	ldr	r3, [pc, #528]	@ (8007d68 <_dtoa_r+0xb80>)
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b5e:	f7ff bb5a 	b.w	8007216 <_dtoa_r+0x2e>
 8007b62:	692a      	ldr	r2, [r5, #16]
 8007b64:	3202      	adds	r2, #2
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	f105 010c 	add.w	r1, r5, #12
 8007b6c:	300c      	adds	r0, #12
 8007b6e:	f7ff faa4 	bl	80070ba <memcpy>
 8007b72:	2201      	movs	r2, #1
 8007b74:	4631      	mov	r1, r6
 8007b76:	4658      	mov	r0, fp
 8007b78:	f000 fb52 	bl	8008220 <__lshift>
 8007b7c:	f10a 0301 	add.w	r3, sl, #1
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	9b00      	ldr	r3, [sp, #0]
 8007b84:	4453      	add	r3, sl
 8007b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b88:	9b02      	ldr	r3, [sp, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	462f      	mov	r7, r5
 8007b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b92:	4605      	mov	r5, r0
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	4621      	mov	r1, r4
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	f7ff fa9a 	bl	80070d6 <quorem>
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	9002      	str	r0, [sp, #8]
 8007ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007baa:	4648      	mov	r0, r9
 8007bac:	f000 fba4 	bl	80082f8 <__mcmp>
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	9008      	str	r0, [sp, #32]
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	f000 fbba 	bl	8008330 <__mdiff>
 8007bbc:	68c2      	ldr	r2, [r0, #12]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	bb02      	cbnz	r2, 8007c04 <_dtoa_r+0xa1c>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 fb97 	bl	80082f8 <__mcmp>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4658      	mov	r0, fp
 8007bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bd2:	f000 f957 	bl	8007e84 <_Bfree>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bda:	9e07      	ldr	r6, [sp, #28]
 8007bdc:	ea43 0102 	orr.w	r1, r3, r2
 8007be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be2:	4319      	orrs	r1, r3
 8007be4:	d110      	bne.n	8007c08 <_dtoa_r+0xa20>
 8007be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bea:	d029      	beq.n	8007c40 <_dtoa_r+0xa58>
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dd02      	ble.n	8007bf8 <_dtoa_r+0xa10>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	f883 8000 	strb.w	r8, [r3]
 8007bfe:	e63f      	b.n	8007880 <_dtoa_r+0x698>
 8007c00:	4628      	mov	r0, r5
 8007c02:	e7bb      	b.n	8007b7c <_dtoa_r+0x994>
 8007c04:	2201      	movs	r2, #1
 8007c06:	e7e1      	b.n	8007bcc <_dtoa_r+0x9e4>
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	db04      	blt.n	8007c18 <_dtoa_r+0xa30>
 8007c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c10:	430b      	orrs	r3, r1
 8007c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c14:	430b      	orrs	r3, r1
 8007c16:	d120      	bne.n	8007c5a <_dtoa_r+0xa72>
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	dded      	ble.n	8007bf8 <_dtoa_r+0xa10>
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 fafd 	bl	8008220 <__lshift>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4681      	mov	r9, r0
 8007c2a:	f000 fb65 	bl	80082f8 <__mcmp>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	dc03      	bgt.n	8007c3a <_dtoa_r+0xa52>
 8007c32:	d1e1      	bne.n	8007bf8 <_dtoa_r+0xa10>
 8007c34:	f018 0f01 	tst.w	r8, #1
 8007c38:	d0de      	beq.n	8007bf8 <_dtoa_r+0xa10>
 8007c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c3e:	d1d8      	bne.n	8007bf2 <_dtoa_r+0xa0a>
 8007c40:	9a00      	ldr	r2, [sp, #0]
 8007c42:	2339      	movs	r3, #57	@ 0x39
 8007c44:	7013      	strb	r3, [r2, #0]
 8007c46:	4633      	mov	r3, r6
 8007c48:	461e      	mov	r6, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c50:	2a39      	cmp	r2, #57	@ 0x39
 8007c52:	d052      	beq.n	8007cfa <_dtoa_r+0xb12>
 8007c54:	3201      	adds	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e612      	b.n	8007880 <_dtoa_r+0x698>
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	dd07      	ble.n	8007c6e <_dtoa_r+0xa86>
 8007c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c62:	d0ed      	beq.n	8007c40 <_dtoa_r+0xa58>
 8007c64:	9a00      	ldr	r2, [sp, #0]
 8007c66:	f108 0301 	add.w	r3, r8, #1
 8007c6a:	7013      	strb	r3, [r2, #0]
 8007c6c:	e608      	b.n	8007880 <_dtoa_r+0x698>
 8007c6e:	9b07      	ldr	r3, [sp, #28]
 8007c70:	9a07      	ldr	r2, [sp, #28]
 8007c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d028      	beq.n	8007cce <_dtoa_r+0xae6>
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	2300      	movs	r3, #0
 8007c80:	220a      	movs	r2, #10
 8007c82:	4658      	mov	r0, fp
 8007c84:	f000 f920 	bl	8007ec8 <__multadd>
 8007c88:	42af      	cmp	r7, r5
 8007c8a:	4681      	mov	r9, r0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	f04f 020a 	mov.w	r2, #10
 8007c94:	4639      	mov	r1, r7
 8007c96:	4658      	mov	r0, fp
 8007c98:	d107      	bne.n	8007caa <_dtoa_r+0xac2>
 8007c9a:	f000 f915 	bl	8007ec8 <__multadd>
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	e774      	b.n	8007b94 <_dtoa_r+0x9ac>
 8007caa:	f000 f90d 	bl	8007ec8 <__multadd>
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	f000 f906 	bl	8007ec8 <__multadd>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	e7f0      	b.n	8007ca2 <_dtoa_r+0xaba>
 8007cc0:	9b00      	ldr	r3, [sp, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfcc      	ite	gt
 8007cc6:	461e      	movgt	r6, r3
 8007cc8:	2601      	movle	r6, #1
 8007cca:	4456      	add	r6, sl
 8007ccc:	2700      	movs	r7, #0
 8007cce:	4649      	mov	r1, r9
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 faa4 	bl	8008220 <__lshift>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4681      	mov	r9, r0
 8007cdc:	f000 fb0c 	bl	80082f8 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dcb0      	bgt.n	8007c46 <_dtoa_r+0xa5e>
 8007ce4:	d102      	bne.n	8007cec <_dtoa_r+0xb04>
 8007ce6:	f018 0f01 	tst.w	r8, #1
 8007cea:	d1ac      	bne.n	8007c46 <_dtoa_r+0xa5e>
 8007cec:	4633      	mov	r3, r6
 8007cee:	461e      	mov	r6, r3
 8007cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf4:	2a30      	cmp	r2, #48	@ 0x30
 8007cf6:	d0fa      	beq.n	8007cee <_dtoa_r+0xb06>
 8007cf8:	e5c2      	b.n	8007880 <_dtoa_r+0x698>
 8007cfa:	459a      	cmp	sl, r3
 8007cfc:	d1a4      	bne.n	8007c48 <_dtoa_r+0xa60>
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	3301      	adds	r3, #1
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	2331      	movs	r3, #49	@ 0x31
 8007d06:	f88a 3000 	strb.w	r3, [sl]
 8007d0a:	e5b9      	b.n	8007880 <_dtoa_r+0x698>
 8007d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d6c <_dtoa_r+0xb84>
 8007d12:	b11b      	cbz	r3, 8007d1c <_dtoa_r+0xb34>
 8007d14:	f10a 0308 	add.w	r3, sl, #8
 8007d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	b019      	add	sp, #100	@ 0x64
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	f77f ae37 	ble.w	800799a <_dtoa_r+0x7b2>
 8007d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d30:	2001      	movs	r0, #1
 8007d32:	e655      	b.n	80079e0 <_dtoa_r+0x7f8>
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f77f aed6 	ble.w	8007ae8 <_dtoa_r+0x900>
 8007d3c:	4656      	mov	r6, sl
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4648      	mov	r0, r9
 8007d42:	f7ff f9c8 	bl	80070d6 <quorem>
 8007d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	eba6 020a 	sub.w	r2, r6, sl
 8007d54:	4293      	cmp	r3, r2
 8007d56:	ddb3      	ble.n	8007cc0 <_dtoa_r+0xad8>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 f8b2 	bl	8007ec8 <__multadd>
 8007d64:	4681      	mov	r9, r0
 8007d66:	e7ea      	b.n	8007d3e <_dtoa_r+0xb56>
 8007d68:	08009038 	.word	0x08009038
 8007d6c:	08008fbc 	.word	0x08008fbc

08007d70 <_free_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d041      	beq.n	8007dfc <_free_r+0x8c>
 8007d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7c:	1f0c      	subs	r4, r1, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfb8      	it	lt
 8007d82:	18e4      	addlt	r4, r4, r3
 8007d84:	f7fe fb62 	bl	800644c <__malloc_lock>
 8007d88:	4a1d      	ldr	r2, [pc, #116]	@ (8007e00 <_free_r+0x90>)
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	b933      	cbnz	r3, 8007d9c <_free_r+0x2c>
 8007d8e:	6063      	str	r3, [r4, #4]
 8007d90:	6014      	str	r4, [r2, #0]
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d98:	f7fe bb5e 	b.w	8006458 <__malloc_unlock>
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d908      	bls.n	8007db2 <_free_r+0x42>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	1821      	adds	r1, r4, r0
 8007da4:	428b      	cmp	r3, r1
 8007da6:	bf01      	itttt	eq
 8007da8:	6819      	ldreq	r1, [r3, #0]
 8007daa:	685b      	ldreq	r3, [r3, #4]
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	e7ed      	b.n	8007d8e <_free_r+0x1e>
 8007db2:	461a      	mov	r2, r3
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b10b      	cbz	r3, 8007dbc <_free_r+0x4c>
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d9fa      	bls.n	8007db2 <_free_r+0x42>
 8007dbc:	6811      	ldr	r1, [r2, #0]
 8007dbe:	1850      	adds	r0, r2, r1
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d10b      	bne.n	8007ddc <_free_r+0x6c>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	4401      	add	r1, r0
 8007dc8:	1850      	adds	r0, r2, r1
 8007dca:	4283      	cmp	r3, r0
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	d1e0      	bne.n	8007d92 <_free_r+0x22>
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	4408      	add	r0, r1
 8007dd8:	6010      	str	r0, [r2, #0]
 8007dda:	e7da      	b.n	8007d92 <_free_r+0x22>
 8007ddc:	d902      	bls.n	8007de4 <_free_r+0x74>
 8007dde:	230c      	movs	r3, #12
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	e7d6      	b.n	8007d92 <_free_r+0x22>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	1821      	adds	r1, r4, r0
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf04      	itt	eq
 8007dec:	6819      	ldreq	r1, [r3, #0]
 8007dee:	685b      	ldreq	r3, [r3, #4]
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	bf04      	itt	eq
 8007df4:	1809      	addeq	r1, r1, r0
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	6054      	str	r4, [r2, #4]
 8007dfa:	e7ca      	b.n	8007d92 <_free_r+0x22>
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
 8007dfe:	bf00      	nop
 8007e00:	2000033c 	.word	0x2000033c

08007e04 <_Balloc>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	69c6      	ldr	r6, [r0, #28]
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	b976      	cbnz	r6, 8007e2c <_Balloc+0x28>
 8007e0e:	2010      	movs	r0, #16
 8007e10:	f7fe fa72 	bl	80062f8 <malloc>
 8007e14:	4602      	mov	r2, r0
 8007e16:	61e0      	str	r0, [r4, #28]
 8007e18:	b920      	cbnz	r0, 8007e24 <_Balloc+0x20>
 8007e1a:	4b18      	ldr	r3, [pc, #96]	@ (8007e7c <_Balloc+0x78>)
 8007e1c:	4818      	ldr	r0, [pc, #96]	@ (8007e80 <_Balloc+0x7c>)
 8007e1e:	216b      	movs	r1, #107	@ 0x6b
 8007e20:	f000 fc1e 	bl	8008660 <__assert_func>
 8007e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e28:	6006      	str	r6, [r0, #0]
 8007e2a:	60c6      	str	r6, [r0, #12]
 8007e2c:	69e6      	ldr	r6, [r4, #28]
 8007e2e:	68f3      	ldr	r3, [r6, #12]
 8007e30:	b183      	cbz	r3, 8007e54 <_Balloc+0x50>
 8007e32:	69e3      	ldr	r3, [r4, #28]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e3a:	b9b8      	cbnz	r0, 8007e6c <_Balloc+0x68>
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e42:	1d72      	adds	r2, r6, #5
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fc28 	bl	800869c <_calloc_r>
 8007e4c:	b160      	cbz	r0, 8007e68 <_Balloc+0x64>
 8007e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e52:	e00e      	b.n	8007e72 <_Balloc+0x6e>
 8007e54:	2221      	movs	r2, #33	@ 0x21
 8007e56:	2104      	movs	r1, #4
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fc1f 	bl	800869c <_calloc_r>
 8007e5e:	69e3      	ldr	r3, [r4, #28]
 8007e60:	60f0      	str	r0, [r6, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e4      	bne.n	8007e32 <_Balloc+0x2e>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	6802      	ldr	r2, [r0, #0]
 8007e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e72:	2300      	movs	r3, #0
 8007e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e78:	e7f7      	b.n	8007e6a <_Balloc+0x66>
 8007e7a:	bf00      	nop
 8007e7c:	08008fc9 	.word	0x08008fc9
 8007e80:	08009049 	.word	0x08009049

08007e84 <_Bfree>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	69c6      	ldr	r6, [r0, #28]
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	b976      	cbnz	r6, 8007eac <_Bfree+0x28>
 8007e8e:	2010      	movs	r0, #16
 8007e90:	f7fe fa32 	bl	80062f8 <malloc>
 8007e94:	4602      	mov	r2, r0
 8007e96:	61e8      	str	r0, [r5, #28]
 8007e98:	b920      	cbnz	r0, 8007ea4 <_Bfree+0x20>
 8007e9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ec0 <_Bfree+0x3c>)
 8007e9c:	4809      	ldr	r0, [pc, #36]	@ (8007ec4 <_Bfree+0x40>)
 8007e9e:	218f      	movs	r1, #143	@ 0x8f
 8007ea0:	f000 fbde 	bl	8008660 <__assert_func>
 8007ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ea8:	6006      	str	r6, [r0, #0]
 8007eaa:	60c6      	str	r6, [r0, #12]
 8007eac:	b13c      	cbz	r4, 8007ebe <_Bfree+0x3a>
 8007eae:	69eb      	ldr	r3, [r5, #28]
 8007eb0:	6862      	ldr	r2, [r4, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007eb8:	6021      	str	r1, [r4, #0]
 8007eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	08008fc9 	.word	0x08008fc9
 8007ec4:	08009049 	.word	0x08009049

08007ec8 <__multadd>:
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	690d      	ldr	r5, [r1, #16]
 8007ece:	4607      	mov	r7, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	461e      	mov	r6, r3
 8007ed4:	f101 0c14 	add.w	ip, r1, #20
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f8dc 3000 	ldr.w	r3, [ip]
 8007ede:	b299      	uxth	r1, r3
 8007ee0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ee4:	0c1e      	lsrs	r6, r3, #16
 8007ee6:	0c0b      	lsrs	r3, r1, #16
 8007ee8:	fb02 3306 	mla	r3, r2, r6, r3
 8007eec:	b289      	uxth	r1, r1
 8007eee:	3001      	adds	r0, #1
 8007ef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ef4:	4285      	cmp	r5, r0
 8007ef6:	f84c 1b04 	str.w	r1, [ip], #4
 8007efa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007efe:	dcec      	bgt.n	8007eda <__multadd+0x12>
 8007f00:	b30e      	cbz	r6, 8007f46 <__multadd+0x7e>
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	42ab      	cmp	r3, r5
 8007f06:	dc19      	bgt.n	8007f3c <__multadd+0x74>
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	f7ff ff79 	bl	8007e04 <_Balloc>
 8007f12:	4680      	mov	r8, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <__multadd+0x5a>
 8007f16:	4602      	mov	r2, r0
 8007f18:	4b0c      	ldr	r3, [pc, #48]	@ (8007f4c <__multadd+0x84>)
 8007f1a:	480d      	ldr	r0, [pc, #52]	@ (8007f50 <__multadd+0x88>)
 8007f1c:	21ba      	movs	r1, #186	@ 0xba
 8007f1e:	f000 fb9f 	bl	8008660 <__assert_func>
 8007f22:	6922      	ldr	r2, [r4, #16]
 8007f24:	3202      	adds	r2, #2
 8007f26:	f104 010c 	add.w	r1, r4, #12
 8007f2a:	0092      	lsls	r2, r2, #2
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	f7ff f8c4 	bl	80070ba <memcpy>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff ffa5 	bl	8007e84 <_Bfree>
 8007f3a:	4644      	mov	r4, r8
 8007f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f40:	3501      	adds	r5, #1
 8007f42:	615e      	str	r6, [r3, #20]
 8007f44:	6125      	str	r5, [r4, #16]
 8007f46:	4620      	mov	r0, r4
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	08009038 	.word	0x08009038
 8007f50:	08009049 	.word	0x08009049

08007f54 <__hi0bits>:
 8007f54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f58:	4603      	mov	r3, r0
 8007f5a:	bf36      	itet	cc
 8007f5c:	0403      	lslcc	r3, r0, #16
 8007f5e:	2000      	movcs	r0, #0
 8007f60:	2010      	movcc	r0, #16
 8007f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f66:	bf3c      	itt	cc
 8007f68:	021b      	lslcc	r3, r3, #8
 8007f6a:	3008      	addcc	r0, #8
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f70:	bf3c      	itt	cc
 8007f72:	011b      	lslcc	r3, r3, #4
 8007f74:	3004      	addcc	r0, #4
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7a:	bf3c      	itt	cc
 8007f7c:	009b      	lslcc	r3, r3, #2
 8007f7e:	3002      	addcc	r0, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db05      	blt.n	8007f90 <__hi0bits+0x3c>
 8007f84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f88:	f100 0001 	add.w	r0, r0, #1
 8007f8c:	bf08      	it	eq
 8007f8e:	2020      	moveq	r0, #32
 8007f90:	4770      	bx	lr

08007f92 <__lo0bits>:
 8007f92:	6803      	ldr	r3, [r0, #0]
 8007f94:	4602      	mov	r2, r0
 8007f96:	f013 0007 	ands.w	r0, r3, #7
 8007f9a:	d00b      	beq.n	8007fb4 <__lo0bits+0x22>
 8007f9c:	07d9      	lsls	r1, r3, #31
 8007f9e:	d421      	bmi.n	8007fe4 <__lo0bits+0x52>
 8007fa0:	0798      	lsls	r0, r3, #30
 8007fa2:	bf49      	itett	mi
 8007fa4:	085b      	lsrmi	r3, r3, #1
 8007fa6:	089b      	lsrpl	r3, r3, #2
 8007fa8:	2001      	movmi	r0, #1
 8007faa:	6013      	strmi	r3, [r2, #0]
 8007fac:	bf5c      	itt	pl
 8007fae:	6013      	strpl	r3, [r2, #0]
 8007fb0:	2002      	movpl	r0, #2
 8007fb2:	4770      	bx	lr
 8007fb4:	b299      	uxth	r1, r3
 8007fb6:	b909      	cbnz	r1, 8007fbc <__lo0bits+0x2a>
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	2010      	movs	r0, #16
 8007fbc:	b2d9      	uxtb	r1, r3
 8007fbe:	b909      	cbnz	r1, 8007fc4 <__lo0bits+0x32>
 8007fc0:	3008      	adds	r0, #8
 8007fc2:	0a1b      	lsrs	r3, r3, #8
 8007fc4:	0719      	lsls	r1, r3, #28
 8007fc6:	bf04      	itt	eq
 8007fc8:	091b      	lsreq	r3, r3, #4
 8007fca:	3004      	addeq	r0, #4
 8007fcc:	0799      	lsls	r1, r3, #30
 8007fce:	bf04      	itt	eq
 8007fd0:	089b      	lsreq	r3, r3, #2
 8007fd2:	3002      	addeq	r0, #2
 8007fd4:	07d9      	lsls	r1, r3, #31
 8007fd6:	d403      	bmi.n	8007fe0 <__lo0bits+0x4e>
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	f100 0001 	add.w	r0, r0, #1
 8007fde:	d003      	beq.n	8007fe8 <__lo0bits+0x56>
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4770      	bx	lr
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4770      	bx	lr
 8007fe8:	2020      	movs	r0, #32
 8007fea:	4770      	bx	lr

08007fec <__i2b>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	f7ff ff07 	bl	8007e04 <_Balloc>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <__i2b+0x1a>
 8007ffa:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <__i2b+0x24>)
 8007ffc:	4805      	ldr	r0, [pc, #20]	@ (8008014 <__i2b+0x28>)
 8007ffe:	f240 1145 	movw	r1, #325	@ 0x145
 8008002:	f000 fb2d 	bl	8008660 <__assert_func>
 8008006:	2301      	movs	r3, #1
 8008008:	6144      	str	r4, [r0, #20]
 800800a:	6103      	str	r3, [r0, #16]
 800800c:	bd10      	pop	{r4, pc}
 800800e:	bf00      	nop
 8008010:	08009038 	.word	0x08009038
 8008014:	08009049 	.word	0x08009049

08008018 <__multiply>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4614      	mov	r4, r2
 800801e:	690a      	ldr	r2, [r1, #16]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	429a      	cmp	r2, r3
 8008024:	bfa8      	it	ge
 8008026:	4623      	movge	r3, r4
 8008028:	460f      	mov	r7, r1
 800802a:	bfa4      	itt	ge
 800802c:	460c      	movge	r4, r1
 800802e:	461f      	movge	r7, r3
 8008030:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008034:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008038:	68a3      	ldr	r3, [r4, #8]
 800803a:	6861      	ldr	r1, [r4, #4]
 800803c:	eb0a 0609 	add.w	r6, sl, r9
 8008040:	42b3      	cmp	r3, r6
 8008042:	b085      	sub	sp, #20
 8008044:	bfb8      	it	lt
 8008046:	3101      	addlt	r1, #1
 8008048:	f7ff fedc 	bl	8007e04 <_Balloc>
 800804c:	b930      	cbnz	r0, 800805c <__multiply+0x44>
 800804e:	4602      	mov	r2, r0
 8008050:	4b44      	ldr	r3, [pc, #272]	@ (8008164 <__multiply+0x14c>)
 8008052:	4845      	ldr	r0, [pc, #276]	@ (8008168 <__multiply+0x150>)
 8008054:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008058:	f000 fb02 	bl	8008660 <__assert_func>
 800805c:	f100 0514 	add.w	r5, r0, #20
 8008060:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008064:	462b      	mov	r3, r5
 8008066:	2200      	movs	r2, #0
 8008068:	4543      	cmp	r3, r8
 800806a:	d321      	bcc.n	80080b0 <__multiply+0x98>
 800806c:	f107 0114 	add.w	r1, r7, #20
 8008070:	f104 0214 	add.w	r2, r4, #20
 8008074:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008078:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	1b13      	subs	r3, r2, r4
 8008080:	3b15      	subs	r3, #21
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	3304      	adds	r3, #4
 8008088:	f104 0715 	add.w	r7, r4, #21
 800808c:	42ba      	cmp	r2, r7
 800808e:	bf38      	it	cc
 8008090:	2304      	movcc	r3, #4
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	9103      	str	r1, [sp, #12]
 8008098:	428b      	cmp	r3, r1
 800809a:	d80c      	bhi.n	80080b6 <__multiply+0x9e>
 800809c:	2e00      	cmp	r6, #0
 800809e:	dd03      	ble.n	80080a8 <__multiply+0x90>
 80080a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05b      	beq.n	8008160 <__multiply+0x148>
 80080a8:	6106      	str	r6, [r0, #16]
 80080aa:	b005      	add	sp, #20
 80080ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b0:	f843 2b04 	str.w	r2, [r3], #4
 80080b4:	e7d8      	b.n	8008068 <__multiply+0x50>
 80080b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80080ba:	f1ba 0f00 	cmp.w	sl, #0
 80080be:	d024      	beq.n	800810a <__multiply+0xf2>
 80080c0:	f104 0e14 	add.w	lr, r4, #20
 80080c4:	46a9      	mov	r9, r5
 80080c6:	f04f 0c00 	mov.w	ip, #0
 80080ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080ce:	f8d9 3000 	ldr.w	r3, [r9]
 80080d2:	fa1f fb87 	uxth.w	fp, r7
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80080dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80080e0:	f8d9 7000 	ldr.w	r7, [r9]
 80080e4:	4463      	add	r3, ip
 80080e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80080ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80080ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080f8:	4572      	cmp	r2, lr
 80080fa:	f849 3b04 	str.w	r3, [r9], #4
 80080fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008102:	d8e2      	bhi.n	80080ca <__multiply+0xb2>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	f845 c003 	str.w	ip, [r5, r3]
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008110:	3104      	adds	r1, #4
 8008112:	f1b9 0f00 	cmp.w	r9, #0
 8008116:	d021      	beq.n	800815c <__multiply+0x144>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	f104 0c14 	add.w	ip, r4, #20
 800811e:	46ae      	mov	lr, r5
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	f8bc b000 	ldrh.w	fp, [ip]
 8008128:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800812c:	fb09 770b 	mla	r7, r9, fp, r7
 8008130:	4457      	add	r7, sl
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008138:	f84e 3b04 	str.w	r3, [lr], #4
 800813c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008144:	f8be 3000 	ldrh.w	r3, [lr]
 8008148:	fb09 330a 	mla	r3, r9, sl, r3
 800814c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008150:	4562      	cmp	r2, ip
 8008152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008156:	d8e5      	bhi.n	8008124 <__multiply+0x10c>
 8008158:	9f01      	ldr	r7, [sp, #4]
 800815a:	51eb      	str	r3, [r5, r7]
 800815c:	3504      	adds	r5, #4
 800815e:	e799      	b.n	8008094 <__multiply+0x7c>
 8008160:	3e01      	subs	r6, #1
 8008162:	e79b      	b.n	800809c <__multiply+0x84>
 8008164:	08009038 	.word	0x08009038
 8008168:	08009049 	.word	0x08009049

0800816c <__pow5mult>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	4615      	mov	r5, r2
 8008172:	f012 0203 	ands.w	r2, r2, #3
 8008176:	4607      	mov	r7, r0
 8008178:	460e      	mov	r6, r1
 800817a:	d007      	beq.n	800818c <__pow5mult+0x20>
 800817c:	4c25      	ldr	r4, [pc, #148]	@ (8008214 <__pow5mult+0xa8>)
 800817e:	3a01      	subs	r2, #1
 8008180:	2300      	movs	r3, #0
 8008182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008186:	f7ff fe9f 	bl	8007ec8 <__multadd>
 800818a:	4606      	mov	r6, r0
 800818c:	10ad      	asrs	r5, r5, #2
 800818e:	d03d      	beq.n	800820c <__pow5mult+0xa0>
 8008190:	69fc      	ldr	r4, [r7, #28]
 8008192:	b97c      	cbnz	r4, 80081b4 <__pow5mult+0x48>
 8008194:	2010      	movs	r0, #16
 8008196:	f7fe f8af 	bl	80062f8 <malloc>
 800819a:	4602      	mov	r2, r0
 800819c:	61f8      	str	r0, [r7, #28]
 800819e:	b928      	cbnz	r0, 80081ac <__pow5mult+0x40>
 80081a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <__pow5mult+0xac>)
 80081a2:	481e      	ldr	r0, [pc, #120]	@ (800821c <__pow5mult+0xb0>)
 80081a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081a8:	f000 fa5a 	bl	8008660 <__assert_func>
 80081ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b0:	6004      	str	r4, [r0, #0]
 80081b2:	60c4      	str	r4, [r0, #12]
 80081b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081bc:	b94c      	cbnz	r4, 80081d2 <__pow5mult+0x66>
 80081be:	f240 2171 	movw	r1, #625	@ 0x271
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7ff ff12 	bl	8007fec <__i2b>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ce:	4604      	mov	r4, r0
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	07eb      	lsls	r3, r5, #31
 80081d8:	d50a      	bpl.n	80081f0 <__pow5mult+0x84>
 80081da:	4631      	mov	r1, r6
 80081dc:	4622      	mov	r2, r4
 80081de:	4638      	mov	r0, r7
 80081e0:	f7ff ff1a 	bl	8008018 <__multiply>
 80081e4:	4631      	mov	r1, r6
 80081e6:	4680      	mov	r8, r0
 80081e8:	4638      	mov	r0, r7
 80081ea:	f7ff fe4b 	bl	8007e84 <_Bfree>
 80081ee:	4646      	mov	r6, r8
 80081f0:	106d      	asrs	r5, r5, #1
 80081f2:	d00b      	beq.n	800820c <__pow5mult+0xa0>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	b938      	cbnz	r0, 8008208 <__pow5mult+0x9c>
 80081f8:	4622      	mov	r2, r4
 80081fa:	4621      	mov	r1, r4
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff ff0b 	bl	8008018 <__multiply>
 8008202:	6020      	str	r0, [r4, #0]
 8008204:	f8c0 9000 	str.w	r9, [r0]
 8008208:	4604      	mov	r4, r0
 800820a:	e7e4      	b.n	80081d6 <__pow5mult+0x6a>
 800820c:	4630      	mov	r0, r6
 800820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008212:	bf00      	nop
 8008214:	080090a4 	.word	0x080090a4
 8008218:	08008fc9 	.word	0x08008fc9
 800821c:	08009049 	.word	0x08009049

08008220 <__lshift>:
 8008220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	460c      	mov	r4, r1
 8008226:	6849      	ldr	r1, [r1, #4]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	4607      	mov	r7, r0
 8008232:	4691      	mov	r9, r2
 8008234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008238:	f108 0601 	add.w	r6, r8, #1
 800823c:	42b3      	cmp	r3, r6
 800823e:	db0b      	blt.n	8008258 <__lshift+0x38>
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff fddf 	bl	8007e04 <_Balloc>
 8008246:	4605      	mov	r5, r0
 8008248:	b948      	cbnz	r0, 800825e <__lshift+0x3e>
 800824a:	4602      	mov	r2, r0
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <__lshift+0xd0>)
 800824e:	4829      	ldr	r0, [pc, #164]	@ (80082f4 <__lshift+0xd4>)
 8008250:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008254:	f000 fa04 	bl	8008660 <__assert_func>
 8008258:	3101      	adds	r1, #1
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	e7ee      	b.n	800823c <__lshift+0x1c>
 800825e:	2300      	movs	r3, #0
 8008260:	f100 0114 	add.w	r1, r0, #20
 8008264:	f100 0210 	add.w	r2, r0, #16
 8008268:	4618      	mov	r0, r3
 800826a:	4553      	cmp	r3, sl
 800826c:	db33      	blt.n	80082d6 <__lshift+0xb6>
 800826e:	6920      	ldr	r0, [r4, #16]
 8008270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008274:	f104 0314 	add.w	r3, r4, #20
 8008278:	f019 091f 	ands.w	r9, r9, #31
 800827c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008284:	d02b      	beq.n	80082de <__lshift+0xbe>
 8008286:	f1c9 0e20 	rsb	lr, r9, #32
 800828a:	468a      	mov	sl, r1
 800828c:	2200      	movs	r2, #0
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	fa00 f009 	lsl.w	r0, r0, r9
 8008294:	4310      	orrs	r0, r2
 8008296:	f84a 0b04 	str.w	r0, [sl], #4
 800829a:	f853 2b04 	ldr.w	r2, [r3], #4
 800829e:	459c      	cmp	ip, r3
 80082a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082a4:	d8f3      	bhi.n	800828e <__lshift+0x6e>
 80082a6:	ebac 0304 	sub.w	r3, ip, r4
 80082aa:	3b15      	subs	r3, #21
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	3304      	adds	r3, #4
 80082b2:	f104 0015 	add.w	r0, r4, #21
 80082b6:	4584      	cmp	ip, r0
 80082b8:	bf38      	it	cc
 80082ba:	2304      	movcc	r3, #4
 80082bc:	50ca      	str	r2, [r1, r3]
 80082be:	b10a      	cbz	r2, 80082c4 <__lshift+0xa4>
 80082c0:	f108 0602 	add.w	r6, r8, #2
 80082c4:	3e01      	subs	r6, #1
 80082c6:	4638      	mov	r0, r7
 80082c8:	612e      	str	r6, [r5, #16]
 80082ca:	4621      	mov	r1, r4
 80082cc:	f7ff fdda 	bl	8007e84 <_Bfree>
 80082d0:	4628      	mov	r0, r5
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082da:	3301      	adds	r3, #1
 80082dc:	e7c5      	b.n	800826a <__lshift+0x4a>
 80082de:	3904      	subs	r1, #4
 80082e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e8:	459c      	cmp	ip, r3
 80082ea:	d8f9      	bhi.n	80082e0 <__lshift+0xc0>
 80082ec:	e7ea      	b.n	80082c4 <__lshift+0xa4>
 80082ee:	bf00      	nop
 80082f0:	08009038 	.word	0x08009038
 80082f4:	08009049 	.word	0x08009049

080082f8 <__mcmp>:
 80082f8:	690a      	ldr	r2, [r1, #16]
 80082fa:	4603      	mov	r3, r0
 80082fc:	6900      	ldr	r0, [r0, #16]
 80082fe:	1a80      	subs	r0, r0, r2
 8008300:	b530      	push	{r4, r5, lr}
 8008302:	d10e      	bne.n	8008322 <__mcmp+0x2a>
 8008304:	3314      	adds	r3, #20
 8008306:	3114      	adds	r1, #20
 8008308:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800830c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008310:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008314:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008318:	4295      	cmp	r5, r2
 800831a:	d003      	beq.n	8008324 <__mcmp+0x2c>
 800831c:	d205      	bcs.n	800832a <__mcmp+0x32>
 800831e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008322:	bd30      	pop	{r4, r5, pc}
 8008324:	42a3      	cmp	r3, r4
 8008326:	d3f3      	bcc.n	8008310 <__mcmp+0x18>
 8008328:	e7fb      	b.n	8008322 <__mcmp+0x2a>
 800832a:	2001      	movs	r0, #1
 800832c:	e7f9      	b.n	8008322 <__mcmp+0x2a>
	...

08008330 <__mdiff>:
 8008330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4689      	mov	r9, r1
 8008336:	4606      	mov	r6, r0
 8008338:	4611      	mov	r1, r2
 800833a:	4648      	mov	r0, r9
 800833c:	4614      	mov	r4, r2
 800833e:	f7ff ffdb 	bl	80082f8 <__mcmp>
 8008342:	1e05      	subs	r5, r0, #0
 8008344:	d112      	bne.n	800836c <__mdiff+0x3c>
 8008346:	4629      	mov	r1, r5
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff fd5b 	bl	8007e04 <_Balloc>
 800834e:	4602      	mov	r2, r0
 8008350:	b928      	cbnz	r0, 800835e <__mdiff+0x2e>
 8008352:	4b3f      	ldr	r3, [pc, #252]	@ (8008450 <__mdiff+0x120>)
 8008354:	f240 2137 	movw	r1, #567	@ 0x237
 8008358:	483e      	ldr	r0, [pc, #248]	@ (8008454 <__mdiff+0x124>)
 800835a:	f000 f981 	bl	8008660 <__assert_func>
 800835e:	2301      	movs	r3, #1
 8008360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008364:	4610      	mov	r0, r2
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	bfbc      	itt	lt
 800836e:	464b      	movlt	r3, r9
 8008370:	46a1      	movlt	r9, r4
 8008372:	4630      	mov	r0, r6
 8008374:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008378:	bfba      	itte	lt
 800837a:	461c      	movlt	r4, r3
 800837c:	2501      	movlt	r5, #1
 800837e:	2500      	movge	r5, #0
 8008380:	f7ff fd40 	bl	8007e04 <_Balloc>
 8008384:	4602      	mov	r2, r0
 8008386:	b918      	cbnz	r0, 8008390 <__mdiff+0x60>
 8008388:	4b31      	ldr	r3, [pc, #196]	@ (8008450 <__mdiff+0x120>)
 800838a:	f240 2145 	movw	r1, #581	@ 0x245
 800838e:	e7e3      	b.n	8008358 <__mdiff+0x28>
 8008390:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008394:	6926      	ldr	r6, [r4, #16]
 8008396:	60c5      	str	r5, [r0, #12]
 8008398:	f109 0310 	add.w	r3, r9, #16
 800839c:	f109 0514 	add.w	r5, r9, #20
 80083a0:	f104 0e14 	add.w	lr, r4, #20
 80083a4:	f100 0b14 	add.w	fp, r0, #20
 80083a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	46d9      	mov	r9, fp
 80083b4:	f04f 0c00 	mov.w	ip, #0
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	fa1f f38a 	uxth.w	r3, sl
 80083c8:	4619      	mov	r1, r3
 80083ca:	b283      	uxth	r3, r0
 80083cc:	1acb      	subs	r3, r1, r3
 80083ce:	0c00      	lsrs	r0, r0, #16
 80083d0:	4463      	add	r3, ip
 80083d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083e0:	4576      	cmp	r6, lr
 80083e2:	f849 3b04 	str.w	r3, [r9], #4
 80083e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083ea:	d8e5      	bhi.n	80083b8 <__mdiff+0x88>
 80083ec:	1b33      	subs	r3, r6, r4
 80083ee:	3b15      	subs	r3, #21
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	3415      	adds	r4, #21
 80083f6:	3304      	adds	r3, #4
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	bf38      	it	cc
 80083fc:	2304      	movcc	r3, #4
 80083fe:	441d      	add	r5, r3
 8008400:	445b      	add	r3, fp
 8008402:	461e      	mov	r6, r3
 8008404:	462c      	mov	r4, r5
 8008406:	4544      	cmp	r4, r8
 8008408:	d30e      	bcc.n	8008428 <__mdiff+0xf8>
 800840a:	f108 0103 	add.w	r1, r8, #3
 800840e:	1b49      	subs	r1, r1, r5
 8008410:	f021 0103 	bic.w	r1, r1, #3
 8008414:	3d03      	subs	r5, #3
 8008416:	45a8      	cmp	r8, r5
 8008418:	bf38      	it	cc
 800841a:	2100      	movcc	r1, #0
 800841c:	440b      	add	r3, r1
 800841e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008422:	b191      	cbz	r1, 800844a <__mdiff+0x11a>
 8008424:	6117      	str	r7, [r2, #16]
 8008426:	e79d      	b.n	8008364 <__mdiff+0x34>
 8008428:	f854 1b04 	ldr.w	r1, [r4], #4
 800842c:	46e6      	mov	lr, ip
 800842e:	0c08      	lsrs	r0, r1, #16
 8008430:	fa1c fc81 	uxtah	ip, ip, r1
 8008434:	4471      	add	r1, lr
 8008436:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800843a:	b289      	uxth	r1, r1
 800843c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008440:	f846 1b04 	str.w	r1, [r6], #4
 8008444:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008448:	e7dd      	b.n	8008406 <__mdiff+0xd6>
 800844a:	3f01      	subs	r7, #1
 800844c:	e7e7      	b.n	800841e <__mdiff+0xee>
 800844e:	bf00      	nop
 8008450:	08009038 	.word	0x08009038
 8008454:	08009049 	.word	0x08009049

08008458 <__d2b>:
 8008458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800845c:	460f      	mov	r7, r1
 800845e:	2101      	movs	r1, #1
 8008460:	ec59 8b10 	vmov	r8, r9, d0
 8008464:	4616      	mov	r6, r2
 8008466:	f7ff fccd 	bl	8007e04 <_Balloc>
 800846a:	4604      	mov	r4, r0
 800846c:	b930      	cbnz	r0, 800847c <__d2b+0x24>
 800846e:	4602      	mov	r2, r0
 8008470:	4b23      	ldr	r3, [pc, #140]	@ (8008500 <__d2b+0xa8>)
 8008472:	4824      	ldr	r0, [pc, #144]	@ (8008504 <__d2b+0xac>)
 8008474:	f240 310f 	movw	r1, #783	@ 0x30f
 8008478:	f000 f8f2 	bl	8008660 <__assert_func>
 800847c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008484:	b10d      	cbz	r5, 800848a <__d2b+0x32>
 8008486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	f1b8 0300 	subs.w	r3, r8, #0
 8008490:	d023      	beq.n	80084da <__d2b+0x82>
 8008492:	4668      	mov	r0, sp
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	f7ff fd7c 	bl	8007f92 <__lo0bits>
 800849a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800849e:	b1d0      	cbz	r0, 80084d6 <__d2b+0x7e>
 80084a0:	f1c0 0320 	rsb	r3, r0, #32
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	430b      	orrs	r3, r1
 80084aa:	40c2      	lsrs	r2, r0
 80084ac:	6163      	str	r3, [r4, #20]
 80084ae:	9201      	str	r2, [sp, #4]
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	61a3      	str	r3, [r4, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bf0c      	ite	eq
 80084b8:	2201      	moveq	r2, #1
 80084ba:	2202      	movne	r2, #2
 80084bc:	6122      	str	r2, [r4, #16]
 80084be:	b1a5      	cbz	r5, 80084ea <__d2b+0x92>
 80084c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084c4:	4405      	add	r5, r0
 80084c6:	603d      	str	r5, [r7, #0]
 80084c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084cc:	6030      	str	r0, [r6, #0]
 80084ce:	4620      	mov	r0, r4
 80084d0:	b003      	add	sp, #12
 80084d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084d6:	6161      	str	r1, [r4, #20]
 80084d8:	e7ea      	b.n	80084b0 <__d2b+0x58>
 80084da:	a801      	add	r0, sp, #4
 80084dc:	f7ff fd59 	bl	8007f92 <__lo0bits>
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	6163      	str	r3, [r4, #20]
 80084e4:	3020      	adds	r0, #32
 80084e6:	2201      	movs	r2, #1
 80084e8:	e7e8      	b.n	80084bc <__d2b+0x64>
 80084ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084f2:	6038      	str	r0, [r7, #0]
 80084f4:	6918      	ldr	r0, [r3, #16]
 80084f6:	f7ff fd2d 	bl	8007f54 <__hi0bits>
 80084fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084fe:	e7e5      	b.n	80084cc <__d2b+0x74>
 8008500:	08009038 	.word	0x08009038
 8008504:	08009049 	.word	0x08009049

08008508 <__sflush_r>:
 8008508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	0716      	lsls	r6, r2, #28
 8008512:	4605      	mov	r5, r0
 8008514:	460c      	mov	r4, r1
 8008516:	d454      	bmi.n	80085c2 <__sflush_r+0xba>
 8008518:	684b      	ldr	r3, [r1, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dc02      	bgt.n	8008524 <__sflush_r+0x1c>
 800851e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	dd48      	ble.n	80085b6 <__sflush_r+0xae>
 8008524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008526:	2e00      	cmp	r6, #0
 8008528:	d045      	beq.n	80085b6 <__sflush_r+0xae>
 800852a:	2300      	movs	r3, #0
 800852c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008530:	682f      	ldr	r7, [r5, #0]
 8008532:	6a21      	ldr	r1, [r4, #32]
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	d030      	beq.n	800859a <__sflush_r+0x92>
 8008538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	0759      	lsls	r1, r3, #29
 800853e:	d505      	bpl.n	800854c <__sflush_r+0x44>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008546:	b10b      	cbz	r3, 800854c <__sflush_r+0x44>
 8008548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	2300      	movs	r3, #0
 800854e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008550:	6a21      	ldr	r1, [r4, #32]
 8008552:	4628      	mov	r0, r5
 8008554:	47b0      	blx	r6
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	d106      	bne.n	800856a <__sflush_r+0x62>
 800855c:	6829      	ldr	r1, [r5, #0]
 800855e:	291d      	cmp	r1, #29
 8008560:	d82b      	bhi.n	80085ba <__sflush_r+0xb2>
 8008562:	4a2a      	ldr	r2, [pc, #168]	@ (800860c <__sflush_r+0x104>)
 8008564:	410a      	asrs	r2, r1
 8008566:	07d6      	lsls	r6, r2, #31
 8008568:	d427      	bmi.n	80085ba <__sflush_r+0xb2>
 800856a:	2200      	movs	r2, #0
 800856c:	6062      	str	r2, [r4, #4]
 800856e:	04d9      	lsls	r1, r3, #19
 8008570:	6922      	ldr	r2, [r4, #16]
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	d504      	bpl.n	8008580 <__sflush_r+0x78>
 8008576:	1c42      	adds	r2, r0, #1
 8008578:	d101      	bne.n	800857e <__sflush_r+0x76>
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	b903      	cbnz	r3, 8008580 <__sflush_r+0x78>
 800857e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008582:	602f      	str	r7, [r5, #0]
 8008584:	b1b9      	cbz	r1, 80085b6 <__sflush_r+0xae>
 8008586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800858a:	4299      	cmp	r1, r3
 800858c:	d002      	beq.n	8008594 <__sflush_r+0x8c>
 800858e:	4628      	mov	r0, r5
 8008590:	f7ff fbee 	bl	8007d70 <_free_r>
 8008594:	2300      	movs	r3, #0
 8008596:	6363      	str	r3, [r4, #52]	@ 0x34
 8008598:	e00d      	b.n	80085b6 <__sflush_r+0xae>
 800859a:	2301      	movs	r3, #1
 800859c:	4628      	mov	r0, r5
 800859e:	47b0      	blx	r6
 80085a0:	4602      	mov	r2, r0
 80085a2:	1c50      	adds	r0, r2, #1
 80085a4:	d1c9      	bne.n	800853a <__sflush_r+0x32>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0c6      	beq.n	800853a <__sflush_r+0x32>
 80085ac:	2b1d      	cmp	r3, #29
 80085ae:	d001      	beq.n	80085b4 <__sflush_r+0xac>
 80085b0:	2b16      	cmp	r3, #22
 80085b2:	d11e      	bne.n	80085f2 <__sflush_r+0xea>
 80085b4:	602f      	str	r7, [r5, #0]
 80085b6:	2000      	movs	r0, #0
 80085b8:	e022      	b.n	8008600 <__sflush_r+0xf8>
 80085ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085be:	b21b      	sxth	r3, r3
 80085c0:	e01b      	b.n	80085fa <__sflush_r+0xf2>
 80085c2:	690f      	ldr	r7, [r1, #16]
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	d0f6      	beq.n	80085b6 <__sflush_r+0xae>
 80085c8:	0793      	lsls	r3, r2, #30
 80085ca:	680e      	ldr	r6, [r1, #0]
 80085cc:	bf08      	it	eq
 80085ce:	694b      	ldreq	r3, [r1, #20]
 80085d0:	600f      	str	r7, [r1, #0]
 80085d2:	bf18      	it	ne
 80085d4:	2300      	movne	r3, #0
 80085d6:	eba6 0807 	sub.w	r8, r6, r7
 80085da:	608b      	str	r3, [r1, #8]
 80085dc:	f1b8 0f00 	cmp.w	r8, #0
 80085e0:	dde9      	ble.n	80085b6 <__sflush_r+0xae>
 80085e2:	6a21      	ldr	r1, [r4, #32]
 80085e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085e6:	4643      	mov	r3, r8
 80085e8:	463a      	mov	r2, r7
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b0      	blx	r6
 80085ee:	2800      	cmp	r0, #0
 80085f0:	dc08      	bgt.n	8008604 <__sflush_r+0xfc>
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	4407      	add	r7, r0
 8008606:	eba8 0800 	sub.w	r8, r8, r0
 800860a:	e7e7      	b.n	80085dc <__sflush_r+0xd4>
 800860c:	dfbffffe 	.word	0xdfbffffe

08008610 <_fflush_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	690b      	ldr	r3, [r1, #16]
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b913      	cbnz	r3, 8008620 <_fflush_r+0x10>
 800861a:	2500      	movs	r5, #0
 800861c:	4628      	mov	r0, r5
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	b118      	cbz	r0, 800862a <_fflush_r+0x1a>
 8008622:	6a03      	ldr	r3, [r0, #32]
 8008624:	b90b      	cbnz	r3, 800862a <_fflush_r+0x1a>
 8008626:	f7fe fc01 	bl	8006e2c <__sinit>
 800862a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f3      	beq.n	800861a <_fflush_r+0xa>
 8008632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008634:	07d0      	lsls	r0, r2, #31
 8008636:	d404      	bmi.n	8008642 <_fflush_r+0x32>
 8008638:	0599      	lsls	r1, r3, #22
 800863a:	d402      	bmi.n	8008642 <_fflush_r+0x32>
 800863c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800863e:	f7fe fd3a 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8008642:	4628      	mov	r0, r5
 8008644:	4621      	mov	r1, r4
 8008646:	f7ff ff5f 	bl	8008508 <__sflush_r>
 800864a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	4605      	mov	r5, r0
 8008650:	d4e4      	bmi.n	800861c <_fflush_r+0xc>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d4e1      	bmi.n	800861c <_fflush_r+0xc>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f7fe fd2d 	bl	80070b8 <__retarget_lock_release_recursive>
 800865e:	e7dd      	b.n	800861c <_fflush_r+0xc>

08008660 <__assert_func>:
 8008660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008662:	4614      	mov	r4, r2
 8008664:	461a      	mov	r2, r3
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <__assert_func+0x2c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4605      	mov	r5, r0
 800866c:	68d8      	ldr	r0, [r3, #12]
 800866e:	b954      	cbnz	r4, 8008686 <__assert_func+0x26>
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <__assert_func+0x30>)
 8008672:	461c      	mov	r4, r3
 8008674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008678:	9100      	str	r1, [sp, #0]
 800867a:	462b      	mov	r3, r5
 800867c:	4905      	ldr	r1, [pc, #20]	@ (8008694 <__assert_func+0x34>)
 800867e:	f000 f841 	bl	8008704 <fiprintf>
 8008682:	f7fd fe31 	bl	80062e8 <abort>
 8008686:	4b04      	ldr	r3, [pc, #16]	@ (8008698 <__assert_func+0x38>)
 8008688:	e7f4      	b.n	8008674 <__assert_func+0x14>
 800868a:	bf00      	nop
 800868c:	2000001c 	.word	0x2000001c
 8008690:	080091e5 	.word	0x080091e5
 8008694:	080091b7 	.word	0x080091b7
 8008698:	080091aa 	.word	0x080091aa

0800869c <_calloc_r>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	fba1 5402 	umull	r5, r4, r1, r2
 80086a2:	b93c      	cbnz	r4, 80086b4 <_calloc_r+0x18>
 80086a4:	4629      	mov	r1, r5
 80086a6:	f7fd fe51 	bl	800634c <_malloc_r>
 80086aa:	4606      	mov	r6, r0
 80086ac:	b928      	cbnz	r0, 80086ba <_calloc_r+0x1e>
 80086ae:	2600      	movs	r6, #0
 80086b0:	4630      	mov	r0, r6
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	220c      	movs	r2, #12
 80086b6:	6002      	str	r2, [r0, #0]
 80086b8:	e7f9      	b.n	80086ae <_calloc_r+0x12>
 80086ba:	462a      	mov	r2, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7fe fc2e 	bl	8006f1e <memset>
 80086c2:	e7f5      	b.n	80086b0 <_calloc_r+0x14>

080086c4 <__ascii_mbtowc>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	b901      	cbnz	r1, 80086ca <__ascii_mbtowc+0x6>
 80086c8:	a901      	add	r1, sp, #4
 80086ca:	b142      	cbz	r2, 80086de <__ascii_mbtowc+0x1a>
 80086cc:	b14b      	cbz	r3, 80086e2 <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	1e10      	subs	r0, r2, #0
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
 80086de:	4610      	mov	r0, r2
 80086e0:	e7fb      	b.n	80086da <__ascii_mbtowc+0x16>
 80086e2:	f06f 0001 	mvn.w	r0, #1
 80086e6:	e7f8      	b.n	80086da <__ascii_mbtowc+0x16>

080086e8 <__ascii_wctomb>:
 80086e8:	4603      	mov	r3, r0
 80086ea:	4608      	mov	r0, r1
 80086ec:	b141      	cbz	r1, 8008700 <__ascii_wctomb+0x18>
 80086ee:	2aff      	cmp	r2, #255	@ 0xff
 80086f0:	d904      	bls.n	80086fc <__ascii_wctomb+0x14>
 80086f2:	228a      	movs	r2, #138	@ 0x8a
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086fa:	4770      	bx	lr
 80086fc:	700a      	strb	r2, [r1, #0]
 80086fe:	2001      	movs	r0, #1
 8008700:	4770      	bx	lr
	...

08008704 <fiprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b503      	push	{r0, r1, lr}
 8008708:	4601      	mov	r1, r0
 800870a:	ab03      	add	r3, sp, #12
 800870c:	4805      	ldr	r0, [pc, #20]	@ (8008724 <fiprintf+0x20>)
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	6800      	ldr	r0, [r0, #0]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f000 f831 	bl	800877c <_vfiprintf_r>
 800871a:	b002      	add	sp, #8
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	2000001c 	.word	0x2000001c

08008728 <__sfputc_r>:
 8008728:	6893      	ldr	r3, [r2, #8]
 800872a:	3b01      	subs	r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	b410      	push	{r4}
 8008730:	6093      	str	r3, [r2, #8]
 8008732:	da08      	bge.n	8008746 <__sfputc_r+0x1e>
 8008734:	6994      	ldr	r4, [r2, #24]
 8008736:	42a3      	cmp	r3, r4
 8008738:	db01      	blt.n	800873e <__sfputc_r+0x16>
 800873a:	290a      	cmp	r1, #10
 800873c:	d103      	bne.n	8008746 <__sfputc_r+0x1e>
 800873e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008742:	f000 b933 	b.w	80089ac <__swbuf_r>
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	1c58      	adds	r0, r3, #1
 800874a:	6010      	str	r0, [r2, #0]
 800874c:	7019      	strb	r1, [r3, #0]
 800874e:	4608      	mov	r0, r1
 8008750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008754:	4770      	bx	lr

08008756 <__sfputs_r>:
 8008756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	4614      	mov	r4, r2
 800875e:	18d5      	adds	r5, r2, r3
 8008760:	42ac      	cmp	r4, r5
 8008762:	d101      	bne.n	8008768 <__sfputs_r+0x12>
 8008764:	2000      	movs	r0, #0
 8008766:	e007      	b.n	8008778 <__sfputs_r+0x22>
 8008768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876c:	463a      	mov	r2, r7
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff ffda 	bl	8008728 <__sfputc_r>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d1f3      	bne.n	8008760 <__sfputs_r+0xa>
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800877c <_vfiprintf_r>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	460d      	mov	r5, r1
 8008782:	b09d      	sub	sp, #116	@ 0x74
 8008784:	4614      	mov	r4, r2
 8008786:	4698      	mov	r8, r3
 8008788:	4606      	mov	r6, r0
 800878a:	b118      	cbz	r0, 8008794 <_vfiprintf_r+0x18>
 800878c:	6a03      	ldr	r3, [r0, #32]
 800878e:	b90b      	cbnz	r3, 8008794 <_vfiprintf_r+0x18>
 8008790:	f7fe fb4c 	bl	8006e2c <__sinit>
 8008794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d405      	bmi.n	80087a6 <_vfiprintf_r+0x2a>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d402      	bmi.n	80087a6 <_vfiprintf_r+0x2a>
 80087a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a2:	f7fe fc88 	bl	80070b6 <__retarget_lock_acquire_recursive>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	071b      	lsls	r3, r3, #28
 80087aa:	d501      	bpl.n	80087b0 <_vfiprintf_r+0x34>
 80087ac:	692b      	ldr	r3, [r5, #16]
 80087ae:	b99b      	cbnz	r3, 80087d8 <_vfiprintf_r+0x5c>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f000 f938 	bl	8008a28 <__swsetup_r>
 80087b8:	b170      	cbz	r0, 80087d8 <_vfiprintf_r+0x5c>
 80087ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087bc:	07dc      	lsls	r4, r3, #31
 80087be:	d504      	bpl.n	80087ca <_vfiprintf_r+0x4e>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087c4:	b01d      	add	sp, #116	@ 0x74
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	0598      	lsls	r0, r3, #22
 80087ce:	d4f7      	bmi.n	80087c0 <_vfiprintf_r+0x44>
 80087d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087d2:	f7fe fc71 	bl	80070b8 <__retarget_lock_release_recursive>
 80087d6:	e7f3      	b.n	80087c0 <_vfiprintf_r+0x44>
 80087d8:	2300      	movs	r3, #0
 80087da:	9309      	str	r3, [sp, #36]	@ 0x24
 80087dc:	2320      	movs	r3, #32
 80087de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e6:	2330      	movs	r3, #48	@ 0x30
 80087e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008998 <_vfiprintf_r+0x21c>
 80087ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f0:	f04f 0901 	mov.w	r9, #1
 80087f4:	4623      	mov	r3, r4
 80087f6:	469a      	mov	sl, r3
 80087f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fc:	b10a      	cbz	r2, 8008802 <_vfiprintf_r+0x86>
 80087fe:	2a25      	cmp	r2, #37	@ 0x25
 8008800:	d1f9      	bne.n	80087f6 <_vfiprintf_r+0x7a>
 8008802:	ebba 0b04 	subs.w	fp, sl, r4
 8008806:	d00b      	beq.n	8008820 <_vfiprintf_r+0xa4>
 8008808:	465b      	mov	r3, fp
 800880a:	4622      	mov	r2, r4
 800880c:	4629      	mov	r1, r5
 800880e:	4630      	mov	r0, r6
 8008810:	f7ff ffa1 	bl	8008756 <__sfputs_r>
 8008814:	3001      	adds	r0, #1
 8008816:	f000 80a7 	beq.w	8008968 <_vfiprintf_r+0x1ec>
 800881a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800881c:	445a      	add	r2, fp
 800881e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008820:	f89a 3000 	ldrb.w	r3, [sl]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 809f 	beq.w	8008968 <_vfiprintf_r+0x1ec>
 800882a:	2300      	movs	r3, #0
 800882c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008834:	f10a 0a01 	add.w	sl, sl, #1
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	9307      	str	r3, [sp, #28]
 800883c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008840:	931a      	str	r3, [sp, #104]	@ 0x68
 8008842:	4654      	mov	r4, sl
 8008844:	2205      	movs	r2, #5
 8008846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884a:	4853      	ldr	r0, [pc, #332]	@ (8008998 <_vfiprintf_r+0x21c>)
 800884c:	f7f7 fce0 	bl	8000210 <memchr>
 8008850:	9a04      	ldr	r2, [sp, #16]
 8008852:	b9d8      	cbnz	r0, 800888c <_vfiprintf_r+0x110>
 8008854:	06d1      	lsls	r1, r2, #27
 8008856:	bf44      	itt	mi
 8008858:	2320      	movmi	r3, #32
 800885a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885e:	0713      	lsls	r3, r2, #28
 8008860:	bf44      	itt	mi
 8008862:	232b      	movmi	r3, #43	@ 0x2b
 8008864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008868:	f89a 3000 	ldrb.w	r3, [sl]
 800886c:	2b2a      	cmp	r3, #42	@ 0x2a
 800886e:	d015      	beq.n	800889c <_vfiprintf_r+0x120>
 8008870:	9a07      	ldr	r2, [sp, #28]
 8008872:	4654      	mov	r4, sl
 8008874:	2000      	movs	r0, #0
 8008876:	f04f 0c0a 	mov.w	ip, #10
 800887a:	4621      	mov	r1, r4
 800887c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008880:	3b30      	subs	r3, #48	@ 0x30
 8008882:	2b09      	cmp	r3, #9
 8008884:	d94b      	bls.n	800891e <_vfiprintf_r+0x1a2>
 8008886:	b1b0      	cbz	r0, 80088b6 <_vfiprintf_r+0x13a>
 8008888:	9207      	str	r2, [sp, #28]
 800888a:	e014      	b.n	80088b6 <_vfiprintf_r+0x13a>
 800888c:	eba0 0308 	sub.w	r3, r0, r8
 8008890:	fa09 f303 	lsl.w	r3, r9, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	46a2      	mov	sl, r4
 800889a:	e7d2      	b.n	8008842 <_vfiprintf_r+0xc6>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	1d19      	adds	r1, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	9103      	str	r1, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfbb      	ittet	lt
 80088a8:	425b      	neglt	r3, r3
 80088aa:	f042 0202 	orrlt.w	r2, r2, #2
 80088ae:	9307      	strge	r3, [sp, #28]
 80088b0:	9307      	strlt	r3, [sp, #28]
 80088b2:	bfb8      	it	lt
 80088b4:	9204      	strlt	r2, [sp, #16]
 80088b6:	7823      	ldrb	r3, [r4, #0]
 80088b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80088ba:	d10a      	bne.n	80088d2 <_vfiprintf_r+0x156>
 80088bc:	7863      	ldrb	r3, [r4, #1]
 80088be:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c0:	d132      	bne.n	8008928 <_vfiprintf_r+0x1ac>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	1d1a      	adds	r2, r3, #4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9203      	str	r2, [sp, #12]
 80088ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088ce:	3402      	adds	r4, #2
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089a8 <_vfiprintf_r+0x22c>
 80088d6:	7821      	ldrb	r1, [r4, #0]
 80088d8:	2203      	movs	r2, #3
 80088da:	4650      	mov	r0, sl
 80088dc:	f7f7 fc98 	bl	8000210 <memchr>
 80088e0:	b138      	cbz	r0, 80088f2 <_vfiprintf_r+0x176>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	eba0 000a 	sub.w	r0, r0, sl
 80088e8:	2240      	movs	r2, #64	@ 0x40
 80088ea:	4082      	lsls	r2, r0
 80088ec:	4313      	orrs	r3, r2
 80088ee:	3401      	adds	r4, #1
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f6:	4829      	ldr	r0, [pc, #164]	@ (800899c <_vfiprintf_r+0x220>)
 80088f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088fc:	2206      	movs	r2, #6
 80088fe:	f7f7 fc87 	bl	8000210 <memchr>
 8008902:	2800      	cmp	r0, #0
 8008904:	d03f      	beq.n	8008986 <_vfiprintf_r+0x20a>
 8008906:	4b26      	ldr	r3, [pc, #152]	@ (80089a0 <_vfiprintf_r+0x224>)
 8008908:	bb1b      	cbnz	r3, 8008952 <_vfiprintf_r+0x1d6>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	3307      	adds	r3, #7
 800890e:	f023 0307 	bic.w	r3, r3, #7
 8008912:	3308      	adds	r3, #8
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	443b      	add	r3, r7
 800891a:	9309      	str	r3, [sp, #36]	@ 0x24
 800891c:	e76a      	b.n	80087f4 <_vfiprintf_r+0x78>
 800891e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008922:	460c      	mov	r4, r1
 8008924:	2001      	movs	r0, #1
 8008926:	e7a8      	b.n	800887a <_vfiprintf_r+0xfe>
 8008928:	2300      	movs	r3, #0
 800892a:	3401      	adds	r4, #1
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	4619      	mov	r1, r3
 8008930:	f04f 0c0a 	mov.w	ip, #10
 8008934:	4620      	mov	r0, r4
 8008936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893a:	3a30      	subs	r2, #48	@ 0x30
 800893c:	2a09      	cmp	r2, #9
 800893e:	d903      	bls.n	8008948 <_vfiprintf_r+0x1cc>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0c6      	beq.n	80088d2 <_vfiprintf_r+0x156>
 8008944:	9105      	str	r1, [sp, #20]
 8008946:	e7c4      	b.n	80088d2 <_vfiprintf_r+0x156>
 8008948:	fb0c 2101 	mla	r1, ip, r1, r2
 800894c:	4604      	mov	r4, r0
 800894e:	2301      	movs	r3, #1
 8008950:	e7f0      	b.n	8008934 <_vfiprintf_r+0x1b8>
 8008952:	ab03      	add	r3, sp, #12
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	462a      	mov	r2, r5
 8008958:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <_vfiprintf_r+0x228>)
 800895a:	a904      	add	r1, sp, #16
 800895c:	4630      	mov	r0, r6
 800895e:	f7fd fe21 	bl	80065a4 <_printf_float>
 8008962:	4607      	mov	r7, r0
 8008964:	1c78      	adds	r0, r7, #1
 8008966:	d1d6      	bne.n	8008916 <_vfiprintf_r+0x19a>
 8008968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800896a:	07d9      	lsls	r1, r3, #31
 800896c:	d405      	bmi.n	800897a <_vfiprintf_r+0x1fe>
 800896e:	89ab      	ldrh	r3, [r5, #12]
 8008970:	059a      	lsls	r2, r3, #22
 8008972:	d402      	bmi.n	800897a <_vfiprintf_r+0x1fe>
 8008974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008976:	f7fe fb9f 	bl	80070b8 <__retarget_lock_release_recursive>
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	065b      	lsls	r3, r3, #25
 800897e:	f53f af1f 	bmi.w	80087c0 <_vfiprintf_r+0x44>
 8008982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008984:	e71e      	b.n	80087c4 <_vfiprintf_r+0x48>
 8008986:	ab03      	add	r3, sp, #12
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	462a      	mov	r2, r5
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <_vfiprintf_r+0x228>)
 800898e:	a904      	add	r1, sp, #16
 8008990:	4630      	mov	r0, r6
 8008992:	f7fe f89f 	bl	8006ad4 <_printf_i>
 8008996:	e7e4      	b.n	8008962 <_vfiprintf_r+0x1e6>
 8008998:	080092e7 	.word	0x080092e7
 800899c:	080092f1 	.word	0x080092f1
 80089a0:	080065a5 	.word	0x080065a5
 80089a4:	08008757 	.word	0x08008757
 80089a8:	080092ed 	.word	0x080092ed

080089ac <__swbuf_r>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	460e      	mov	r6, r1
 80089b0:	4614      	mov	r4, r2
 80089b2:	4605      	mov	r5, r0
 80089b4:	b118      	cbz	r0, 80089be <__swbuf_r+0x12>
 80089b6:	6a03      	ldr	r3, [r0, #32]
 80089b8:	b90b      	cbnz	r3, 80089be <__swbuf_r+0x12>
 80089ba:	f7fe fa37 	bl	8006e2c <__sinit>
 80089be:	69a3      	ldr	r3, [r4, #24]
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	071a      	lsls	r2, r3, #28
 80089c6:	d501      	bpl.n	80089cc <__swbuf_r+0x20>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b943      	cbnz	r3, 80089de <__swbuf_r+0x32>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f82a 	bl	8008a28 <__swsetup_r>
 80089d4:	b118      	cbz	r0, 80089de <__swbuf_r+0x32>
 80089d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80089da:	4638      	mov	r0, r7
 80089dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	6922      	ldr	r2, [r4, #16]
 80089e2:	1a98      	subs	r0, r3, r2
 80089e4:	6963      	ldr	r3, [r4, #20]
 80089e6:	b2f6      	uxtb	r6, r6
 80089e8:	4283      	cmp	r3, r0
 80089ea:	4637      	mov	r7, r6
 80089ec:	dc05      	bgt.n	80089fa <__swbuf_r+0x4e>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f7ff fe0d 	bl	8008610 <_fflush_r>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d1ed      	bne.n	80089d6 <__swbuf_r+0x2a>
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	60a3      	str	r3, [r4, #8]
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	6022      	str	r2, [r4, #0]
 8008a06:	701e      	strb	r6, [r3, #0]
 8008a08:	6962      	ldr	r2, [r4, #20]
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d004      	beq.n	8008a1a <__swbuf_r+0x6e>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	07db      	lsls	r3, r3, #31
 8008a14:	d5e1      	bpl.n	80089da <__swbuf_r+0x2e>
 8008a16:	2e0a      	cmp	r6, #10
 8008a18:	d1df      	bne.n	80089da <__swbuf_r+0x2e>
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f7ff fdf7 	bl	8008610 <_fflush_r>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0d9      	beq.n	80089da <__swbuf_r+0x2e>
 8008a26:	e7d6      	b.n	80089d6 <__swbuf_r+0x2a>

08008a28 <__swsetup_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4b29      	ldr	r3, [pc, #164]	@ (8008ad0 <__swsetup_r+0xa8>)
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	460c      	mov	r4, r1
 8008a32:	b118      	cbz	r0, 8008a3c <__swsetup_r+0x14>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <__swsetup_r+0x14>
 8008a38:	f7fe f9f8 	bl	8006e2c <__sinit>
 8008a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a40:	0719      	lsls	r1, r3, #28
 8008a42:	d422      	bmi.n	8008a8a <__swsetup_r+0x62>
 8008a44:	06da      	lsls	r2, r3, #27
 8008a46:	d407      	bmi.n	8008a58 <__swsetup_r+0x30>
 8008a48:	2209      	movs	r2, #9
 8008a4a:	602a      	str	r2, [r5, #0]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a56:	e033      	b.n	8008ac0 <__swsetup_r+0x98>
 8008a58:	0758      	lsls	r0, r3, #29
 8008a5a:	d512      	bpl.n	8008a82 <__swsetup_r+0x5a>
 8008a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a5e:	b141      	cbz	r1, 8008a72 <__swsetup_r+0x4a>
 8008a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a64:	4299      	cmp	r1, r3
 8008a66:	d002      	beq.n	8008a6e <__swsetup_r+0x46>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7ff f981 	bl	8007d70 <_free_r>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6063      	str	r3, [r4, #4]
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	f043 0308 	orr.w	r3, r3, #8
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	b94b      	cbnz	r3, 8008aa2 <__swsetup_r+0x7a>
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a98:	d003      	beq.n	8008aa2 <__swsetup_r+0x7a>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 f83f 	bl	8008b20 <__smakebuf_r>
 8008aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa6:	f013 0201 	ands.w	r2, r3, #1
 8008aaa:	d00a      	beq.n	8008ac2 <__swsetup_r+0x9a>
 8008aac:	2200      	movs	r2, #0
 8008aae:	60a2      	str	r2, [r4, #8]
 8008ab0:	6962      	ldr	r2, [r4, #20]
 8008ab2:	4252      	negs	r2, r2
 8008ab4:	61a2      	str	r2, [r4, #24]
 8008ab6:	6922      	ldr	r2, [r4, #16]
 8008ab8:	b942      	cbnz	r2, 8008acc <__swsetup_r+0xa4>
 8008aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008abe:	d1c5      	bne.n	8008a4c <__swsetup_r+0x24>
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
 8008ac2:	0799      	lsls	r1, r3, #30
 8008ac4:	bf58      	it	pl
 8008ac6:	6962      	ldrpl	r2, [r4, #20]
 8008ac8:	60a2      	str	r2, [r4, #8]
 8008aca:	e7f4      	b.n	8008ab6 <__swsetup_r+0x8e>
 8008acc:	2000      	movs	r0, #0
 8008ace:	e7f7      	b.n	8008ac0 <__swsetup_r+0x98>
 8008ad0:	2000001c 	.word	0x2000001c

08008ad4 <__swhatbuf_r>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	2900      	cmp	r1, #0
 8008ade:	b096      	sub	sp, #88	@ 0x58
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	461e      	mov	r6, r3
 8008ae4:	da0d      	bge.n	8008b02 <__swhatbuf_r+0x2e>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aec:	f04f 0100 	mov.w	r1, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2340      	movne	r3, #64	@ 0x40
 8008af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008af8:	2000      	movs	r0, #0
 8008afa:	6031      	str	r1, [r6, #0]
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	b016      	add	sp, #88	@ 0x58
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
 8008b02:	466a      	mov	r2, sp
 8008b04:	f000 f848 	bl	8008b98 <_fstat_r>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dbec      	blt.n	8008ae6 <__swhatbuf_r+0x12>
 8008b0c:	9901      	ldr	r1, [sp, #4]
 8008b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b16:	4259      	negs	r1, r3
 8008b18:	4159      	adcs	r1, r3
 8008b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b1e:	e7eb      	b.n	8008af8 <__swhatbuf_r+0x24>

08008b20 <__smakebuf_r>:
 8008b20:	898b      	ldrh	r3, [r1, #12]
 8008b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b24:	079d      	lsls	r5, r3, #30
 8008b26:	4606      	mov	r6, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	d507      	bpl.n	8008b3c <__smakebuf_r+0x1c>
 8008b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	2301      	movs	r3, #1
 8008b36:	6163      	str	r3, [r4, #20]
 8008b38:	b003      	add	sp, #12
 8008b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3c:	ab01      	add	r3, sp, #4
 8008b3e:	466a      	mov	r2, sp
 8008b40:	f7ff ffc8 	bl	8008ad4 <__swhatbuf_r>
 8008b44:	9f00      	ldr	r7, [sp, #0]
 8008b46:	4605      	mov	r5, r0
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7fd fbfe 	bl	800634c <_malloc_r>
 8008b50:	b948      	cbnz	r0, 8008b66 <__smakebuf_r+0x46>
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	059a      	lsls	r2, r3, #22
 8008b58:	d4ee      	bmi.n	8008b38 <__smakebuf_r+0x18>
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0302 	orr.w	r3, r3, #2
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	e7e2      	b.n	8008b2c <__smakebuf_r+0xc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	6020      	str	r0, [r4, #0]
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b76:	b15b      	cbz	r3, 8008b90 <__smakebuf_r+0x70>
 8008b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 f81d 	bl	8008bbc <_isatty_r>
 8008b82:	b128      	cbz	r0, 8008b90 <__smakebuf_r+0x70>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	431d      	orrs	r5, r3
 8008b94:	81a5      	strh	r5, [r4, #12]
 8008b96:	e7cf      	b.n	8008b38 <__smakebuf_r+0x18>

08008b98 <_fstat_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	@ (8008bb8 <_fstat_r+0x20>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	f000 f821 	bl	8008bec <_fstat>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d102      	bne.n	8008bb4 <_fstat_r+0x1c>
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	b103      	cbz	r3, 8008bb4 <_fstat_r+0x1c>
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000047c 	.word	0x2000047c

08008bbc <_isatty_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	@ (8008bd8 <_isatty_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f000 f820 	bl	8008c0c <_isatty>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_isatty_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_isatty_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	2000047c 	.word	0x2000047c

08008bdc <_close>:
 8008bdc:	4b02      	ldr	r3, [pc, #8]	@ (8008be8 <_close+0xc>)
 8008bde:	2258      	movs	r2, #88	@ 0x58
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008be6:	4770      	bx	lr
 8008be8:	2000047c 	.word	0x2000047c

08008bec <_fstat>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	@ (8008bf8 <_fstat+0xc>)
 8008bee:	2258      	movs	r2, #88	@ 0x58
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bf6:	4770      	bx	lr
 8008bf8:	2000047c 	.word	0x2000047c

08008bfc <_getpid>:
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <_getpid+0xc>)
 8008bfe:	2258      	movs	r2, #88	@ 0x58
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c06:	4770      	bx	lr
 8008c08:	2000047c 	.word	0x2000047c

08008c0c <_isatty>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <_isatty+0xc>)
 8008c0e:	2258      	movs	r2, #88	@ 0x58
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	2000      	movs	r0, #0
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	2000047c 	.word	0x2000047c

08008c1c <_kill>:
 8008c1c:	4b02      	ldr	r3, [pc, #8]	@ (8008c28 <_kill+0xc>)
 8008c1e:	2258      	movs	r2, #88	@ 0x58
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c26:	4770      	bx	lr
 8008c28:	2000047c 	.word	0x2000047c

08008c2c <_lseek>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <_lseek+0xc>)
 8008c2e:	2258      	movs	r2, #88	@ 0x58
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c36:	4770      	bx	lr
 8008c38:	2000047c 	.word	0x2000047c

08008c3c <_read>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	@ (8008c48 <_read+0xc>)
 8008c3e:	2258      	movs	r2, #88	@ 0x58
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c46:	4770      	bx	lr
 8008c48:	2000047c 	.word	0x2000047c

08008c4c <_sbrk>:
 8008c4c:	4a04      	ldr	r2, [pc, #16]	@ (8008c60 <_sbrk+0x14>)
 8008c4e:	6811      	ldr	r1, [r2, #0]
 8008c50:	4603      	mov	r3, r0
 8008c52:	b909      	cbnz	r1, 8008c58 <_sbrk+0xc>
 8008c54:	4903      	ldr	r1, [pc, #12]	@ (8008c64 <_sbrk+0x18>)
 8008c56:	6011      	str	r1, [r2, #0]
 8008c58:	6810      	ldr	r0, [r2, #0]
 8008c5a:	4403      	add	r3, r0
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	4770      	bx	lr
 8008c60:	20000484 	.word	0x20000484
 8008c64:	20000488 	.word	0x20000488

08008c68 <_write>:
 8008c68:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <_write+0xc>)
 8008c6a:	2258      	movs	r2, #88	@ 0x58
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c72:	4770      	bx	lr
 8008c74:	2000047c 	.word	0x2000047c

08008c78 <_exit>:
 8008c78:	e7fe      	b.n	8008c78 <_exit>
	...

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
